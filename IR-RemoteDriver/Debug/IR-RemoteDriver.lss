
IR-RemoteDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  000034e2  00003576  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004a  008001a2  008001a2  000036b8  2**0
                  ALLOC
  3 .debug_aranges 00000448  00000000  00000000  000036b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007d5  00000000  00000000  00003b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004d5f  00000000  00000000  000042d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001f16  00000000  00000000  00009034  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003f37  00000000  00000000  0000af4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000610  00000000  00000000  0000ee84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000158e  00000000  00000000  0000f494  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002427  00000000  00000000  00010a22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 0002c74c  00000000  00000000  00012e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0003f595  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__vector_1>
       8:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__vector_2>
       c:	0c 94 bf 09 	jmp	0x137e	; 0x137e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__vector_5>
      18:	0c 94 80 08 	jmp	0x1100	; 0x1100 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3e       	cpi	r26, 0xEC	; 236
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <main>
      8a:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e7       	ldi	r26, 0x7B	; 123
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 98 17 	jmp	0x2f30	; 0x2f30 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e7       	ldi	r24, 0x7B	; 123
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 98 17 	jmp	0x2f30	; 0x2f30 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e7       	ldi	r22, 0x7B	; 123
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 bc 06 	call	0xd78	; 0xd78 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <__epilogue_restores__+0x18>

000007ea <__floatsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <__prologue_saves__+0x12>
     7f6:	9b 01       	movw	r18, r22
     7f8:	ac 01       	movw	r20, r24
     7fa:	83 e0       	ldi	r24, 0x03	; 3
     7fc:	89 83       	std	Y+1, r24	; 0x01
     7fe:	da 01       	movw	r26, r20
     800:	c9 01       	movw	r24, r18
     802:	88 27       	eor	r24, r24
     804:	b7 fd       	sbrc	r27, 7
     806:	83 95       	inc	r24
     808:	99 27       	eor	r25, r25
     80a:	aa 27       	eor	r26, r26
     80c:	bb 27       	eor	r27, r27
     80e:	b8 2e       	mov	r11, r24
     810:	21 15       	cp	r18, r1
     812:	31 05       	cpc	r19, r1
     814:	41 05       	cpc	r20, r1
     816:	51 05       	cpc	r21, r1
     818:	19 f4       	brne	.+6      	; 0x820 <__floatsisf+0x36>
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	3a c0       	rjmp	.+116    	; 0x894 <__stack+0x35>
     820:	88 23       	and	r24, r24
     822:	a9 f0       	breq	.+42     	; 0x84e <__floatsisf+0x64>
     824:	20 30       	cpi	r18, 0x00	; 0
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	38 07       	cpc	r19, r24
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	48 07       	cpc	r20, r24
     82e:	80 e8       	ldi	r24, 0x80	; 128
     830:	58 07       	cpc	r21, r24
     832:	29 f4       	brne	.+10     	; 0x83e <__floatsisf+0x54>
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	9f ec       	ldi	r25, 0xCF	; 207
     83c:	30 c0       	rjmp	.+96     	; 0x89e <__stack+0x3f>
     83e:	ee 24       	eor	r14, r14
     840:	ff 24       	eor	r15, r15
     842:	87 01       	movw	r16, r14
     844:	e2 1a       	sub	r14, r18
     846:	f3 0a       	sbc	r15, r19
     848:	04 0b       	sbc	r16, r20
     84a:	15 0b       	sbc	r17, r21
     84c:	02 c0       	rjmp	.+4      	; 0x852 <__floatsisf+0x68>
     84e:	79 01       	movw	r14, r18
     850:	8a 01       	movw	r16, r20
     852:	8e e1       	ldi	r24, 0x1E	; 30
     854:	c8 2e       	mov	r12, r24
     856:	d1 2c       	mov	r13, r1
     858:	dc 82       	std	Y+4, r13	; 0x04
     85a:	cb 82       	std	Y+3, r12	; 0x03
     85c:	ed 82       	std	Y+5, r14	; 0x05
     85e:	fe 82       	std	Y+6, r15	; 0x06
     860:	0f 83       	std	Y+7, r16	; 0x07
     862:	18 87       	std	Y+8, r17	; 0x08
     864:	c8 01       	movw	r24, r16
     866:	b7 01       	movw	r22, r14
     868:	0e 94 20 05 	call	0xa40	; 0xa40 <__clzsi2>
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	18 16       	cp	r1, r24
     870:	19 06       	cpc	r1, r25
     872:	84 f4       	brge	.+32     	; 0x894 <__stack+0x35>
     874:	08 2e       	mov	r0, r24
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	ee 0c       	add	r14, r14
     87a:	ff 1c       	adc	r15, r15
     87c:	00 1f       	adc	r16, r16
     87e:	11 1f       	adc	r17, r17
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	ed 82       	std	Y+5, r14	; 0x05
     886:	fe 82       	std	Y+6, r15	; 0x06
     888:	0f 83       	std	Y+7, r16	; 0x07
     88a:	18 87       	std	Y+8, r17	; 0x08
     88c:	c8 1a       	sub	r12, r24
     88e:	d9 0a       	sbc	r13, r25
     890:	dc 82       	std	Y+4, r13	; 0x04
     892:	cb 82       	std	Y+3, r12	; 0x03
     894:	ba 82       	std	Y+2, r11	; 0x02
     896:	ce 01       	movw	r24, r28
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     89e:	28 96       	adiw	r28, 0x08	; 8
     8a0:	e9 e0       	ldi	r30, 0x09	; 9
     8a2:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <__epilogue_restores__+0x12>

000008a6 <__fixsfsi>:
     8a6:	ac e0       	ldi	r26, 0x0C	; 12
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	e9 e5       	ldi	r30, 0x59	; 89
     8ac:	f4 e0       	ldi	r31, 0x04	; 4
     8ae:	0c 94 8c 17 	jmp	0x2f18	; 0x2f18 <__prologue_saves__+0x20>
     8b2:	69 83       	std	Y+1, r22	; 0x01
     8b4:	7a 83       	std	Y+2, r23	; 0x02
     8b6:	8b 83       	std	Y+3, r24	; 0x03
     8b8:	9c 83       	std	Y+4, r25	; 0x04
     8ba:	ce 01       	movw	r24, r28
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	be 01       	movw	r22, r28
     8c0:	6b 5f       	subi	r22, 0xFB	; 251
     8c2:	7f 4f       	sbci	r23, 0xFF	; 255
     8c4:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     8c8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ca:	82 30       	cpi	r24, 0x02	; 2
     8cc:	61 f1       	breq	.+88     	; 0x926 <__fixsfsi+0x80>
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	50 f1       	brcs	.+84     	; 0x926 <__fixsfsi+0x80>
     8d2:	84 30       	cpi	r24, 0x04	; 4
     8d4:	21 f4       	brne	.+8      	; 0x8de <__fixsfsi+0x38>
     8d6:	8e 81       	ldd	r24, Y+6	; 0x06
     8d8:	88 23       	and	r24, r24
     8da:	51 f1       	breq	.+84     	; 0x930 <__fixsfsi+0x8a>
     8dc:	2e c0       	rjmp	.+92     	; 0x93a <__fixsfsi+0x94>
     8de:	2f 81       	ldd	r18, Y+7	; 0x07
     8e0:	38 85       	ldd	r19, Y+8	; 0x08
     8e2:	37 fd       	sbrc	r19, 7
     8e4:	20 c0       	rjmp	.+64     	; 0x926 <__fixsfsi+0x80>
     8e6:	6e 81       	ldd	r22, Y+6	; 0x06
     8e8:	2f 31       	cpi	r18, 0x1F	; 31
     8ea:	31 05       	cpc	r19, r1
     8ec:	1c f0       	brlt	.+6      	; 0x8f4 <__fixsfsi+0x4e>
     8ee:	66 23       	and	r22, r22
     8f0:	f9 f0       	breq	.+62     	; 0x930 <__fixsfsi+0x8a>
     8f2:	23 c0       	rjmp	.+70     	; 0x93a <__fixsfsi+0x94>
     8f4:	8e e1       	ldi	r24, 0x1E	; 30
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	82 1b       	sub	r24, r18
     8fa:	93 0b       	sbc	r25, r19
     8fc:	29 85       	ldd	r18, Y+9	; 0x09
     8fe:	3a 85       	ldd	r19, Y+10	; 0x0a
     900:	4b 85       	ldd	r20, Y+11	; 0x0b
     902:	5c 85       	ldd	r21, Y+12	; 0x0c
     904:	04 c0       	rjmp	.+8      	; 0x90e <__fixsfsi+0x68>
     906:	56 95       	lsr	r21
     908:	47 95       	ror	r20
     90a:	37 95       	ror	r19
     90c:	27 95       	ror	r18
     90e:	8a 95       	dec	r24
     910:	d2 f7       	brpl	.-12     	; 0x906 <__fixsfsi+0x60>
     912:	66 23       	and	r22, r22
     914:	b1 f0       	breq	.+44     	; 0x942 <__fixsfsi+0x9c>
     916:	50 95       	com	r21
     918:	40 95       	com	r20
     91a:	30 95       	com	r19
     91c:	21 95       	neg	r18
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	0e c0       	rjmp	.+28     	; 0x942 <__fixsfsi+0x9c>
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	09 c0       	rjmp	.+18     	; 0x942 <__fixsfsi+0x9c>
     930:	2f ef       	ldi	r18, 0xFF	; 255
     932:	3f ef       	ldi	r19, 0xFF	; 255
     934:	4f ef       	ldi	r20, 0xFF	; 255
     936:	5f e7       	ldi	r21, 0x7F	; 127
     938:	04 c0       	rjmp	.+8      	; 0x942 <__fixsfsi+0x9c>
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e8       	ldi	r21, 0x80	; 128
     942:	b9 01       	movw	r22, r18
     944:	ca 01       	movw	r24, r20
     946:	2c 96       	adiw	r28, 0x0c	; 12
     948:	e2 e0       	ldi	r30, 0x02	; 2
     94a:	0c 94 a8 17 	jmp	0x2f50	; 0x2f50 <__epilogue_restores__+0x20>

0000094e <__floatunsisf>:
     94e:	a8 e0       	ldi	r26, 0x08	; 8
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	ed ea       	ldi	r30, 0xAD	; 173
     954:	f4 e0       	ldi	r31, 0x04	; 4
     956:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__prologue_saves__+0x10>
     95a:	7b 01       	movw	r14, r22
     95c:	8c 01       	movw	r16, r24
     95e:	61 15       	cp	r22, r1
     960:	71 05       	cpc	r23, r1
     962:	81 05       	cpc	r24, r1
     964:	91 05       	cpc	r25, r1
     966:	19 f4       	brne	.+6      	; 0x96e <__floatunsisf+0x20>
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	89 83       	std	Y+1, r24	; 0x01
     96c:	60 c0       	rjmp	.+192    	; 0xa2e <__floatunsisf+0xe0>
     96e:	83 e0       	ldi	r24, 0x03	; 3
     970:	89 83       	std	Y+1, r24	; 0x01
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 20 05 	call	0xa40	; 0xa40 <__clzsi2>
     98c:	fc 01       	movw	r30, r24
     98e:	31 97       	sbiw	r30, 0x01	; 1
     990:	f7 ff       	sbrs	r31, 7
     992:	3b c0       	rjmp	.+118    	; 0xa0a <__floatunsisf+0xbc>
     994:	22 27       	eor	r18, r18
     996:	33 27       	eor	r19, r19
     998:	2e 1b       	sub	r18, r30
     99a:	3f 0b       	sbc	r19, r31
     99c:	57 01       	movw	r10, r14
     99e:	68 01       	movw	r12, r16
     9a0:	02 2e       	mov	r0, r18
     9a2:	04 c0       	rjmp	.+8      	; 0x9ac <__floatunsisf+0x5e>
     9a4:	d6 94       	lsr	r13
     9a6:	c7 94       	ror	r12
     9a8:	b7 94       	ror	r11
     9aa:	a7 94       	ror	r10
     9ac:	0a 94       	dec	r0
     9ae:	d2 f7       	brpl	.-12     	; 0x9a4 <__floatunsisf+0x56>
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	a0 e0       	ldi	r26, 0x00	; 0
     9be:	b0 e0       	ldi	r27, 0x00	; 0
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__floatunsisf+0x7c>
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	aa 1f       	adc	r26, r26
     9c8:	bb 1f       	adc	r27, r27
     9ca:	2a 95       	dec	r18
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__floatunsisf+0x74>
     9ce:	01 97       	sbiw	r24, 0x01	; 1
     9d0:	a1 09       	sbc	r26, r1
     9d2:	b1 09       	sbc	r27, r1
     9d4:	8e 21       	and	r24, r14
     9d6:	9f 21       	and	r25, r15
     9d8:	a0 23       	and	r26, r16
     9da:	b1 23       	and	r27, r17
     9dc:	00 97       	sbiw	r24, 0x00	; 0
     9de:	a1 05       	cpc	r26, r1
     9e0:	b1 05       	cpc	r27, r1
     9e2:	21 f0       	breq	.+8      	; 0x9ec <__floatunsisf+0x9e>
     9e4:	41 e0       	ldi	r20, 0x01	; 1
     9e6:	50 e0       	ldi	r21, 0x00	; 0
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	4a 29       	or	r20, r10
     9ee:	5b 29       	or	r21, r11
     9f0:	6c 29       	or	r22, r12
     9f2:	7d 29       	or	r23, r13
     9f4:	4d 83       	std	Y+5, r20	; 0x05
     9f6:	5e 83       	std	Y+6, r21	; 0x06
     9f8:	6f 83       	std	Y+7, r22	; 0x07
     9fa:	78 87       	std	Y+8, r23	; 0x08
     9fc:	8e e1       	ldi	r24, 0x1E	; 30
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	8e 1b       	sub	r24, r30
     a02:	9f 0b       	sbc	r25, r31
     a04:	9c 83       	std	Y+4, r25	; 0x04
     a06:	8b 83       	std	Y+3, r24	; 0x03
     a08:	12 c0       	rjmp	.+36     	; 0xa2e <__floatunsisf+0xe0>
     a0a:	30 97       	sbiw	r30, 0x00	; 0
     a0c:	81 f0       	breq	.+32     	; 0xa2e <__floatunsisf+0xe0>
     a0e:	0e 2e       	mov	r0, r30
     a10:	04 c0       	rjmp	.+8      	; 0xa1a <__floatunsisf+0xcc>
     a12:	ee 0c       	add	r14, r14
     a14:	ff 1c       	adc	r15, r15
     a16:	00 1f       	adc	r16, r16
     a18:	11 1f       	adc	r17, r17
     a1a:	0a 94       	dec	r0
     a1c:	d2 f7       	brpl	.-12     	; 0xa12 <__floatunsisf+0xc4>
     a1e:	ed 82       	std	Y+5, r14	; 0x05
     a20:	fe 82       	std	Y+6, r15	; 0x06
     a22:	0f 83       	std	Y+7, r16	; 0x07
     a24:	18 87       	std	Y+8, r17	; 0x08
     a26:	ce 1a       	sub	r12, r30
     a28:	df 0a       	sbc	r13, r31
     a2a:	dc 82       	std	Y+4, r13	; 0x04
     a2c:	cb 82       	std	Y+3, r12	; 0x03
     a2e:	1a 82       	std	Y+2, r1	; 0x02
     a30:	ce 01       	movw	r24, r28
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     a38:	28 96       	adiw	r28, 0x08	; 8
     a3a:	ea e0       	ldi	r30, 0x0A	; 10
     a3c:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__epilogue_restores__+0x10>

00000a40 <__clzsi2>:
     a40:	ef 92       	push	r14
     a42:	ff 92       	push	r15
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	7b 01       	movw	r14, r22
     a4a:	8c 01       	movw	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	e8 16       	cp	r14, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	f8 06       	cpc	r15, r24
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	08 07       	cpc	r16, r24
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	18 07       	cpc	r17, r24
     a5c:	88 f4       	brcc	.+34     	; 0xa80 <__clzsi2+0x40>
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	e8 16       	cp	r14, r24
     a62:	f1 04       	cpc	r15, r1
     a64:	01 05       	cpc	r16, r1
     a66:	11 05       	cpc	r17, r1
     a68:	31 f0       	breq	.+12     	; 0xa76 <__clzsi2+0x36>
     a6a:	28 f0       	brcs	.+10     	; 0xa76 <__clzsi2+0x36>
     a6c:	88 e0       	ldi	r24, 0x08	; 8
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	a0 e0       	ldi	r26, 0x00	; 0
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	17 c0       	rjmp	.+46     	; 0xaa4 <__clzsi2+0x64>
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	12 c0       	rjmp	.+36     	; 0xaa4 <__clzsi2+0x64>
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	e8 16       	cp	r14, r24
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	f8 06       	cpc	r15, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	08 07       	cpc	r16, r24
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	18 07       	cpc	r17, r24
     a90:	28 f0       	brcs	.+10     	; 0xa9c <__clzsi2+0x5c>
     a92:	88 e1       	ldi	r24, 0x18	; 24
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	a0 e0       	ldi	r26, 0x00	; 0
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <__clzsi2+0x64>
     a9c:	80 e1       	ldi	r24, 0x10	; 16
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	a0 e0       	ldi	r26, 0x00	; 0
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	20 e2       	ldi	r18, 0x20	; 32
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	28 1b       	sub	r18, r24
     aae:	39 0b       	sbc	r19, r25
     ab0:	4a 0b       	sbc	r20, r26
     ab2:	5b 0b       	sbc	r21, r27
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__clzsi2+0x7e>
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__clzsi2+0x76>
     ac2:	f7 01       	movw	r30, r14
     ac4:	ed 57       	subi	r30, 0x7D	; 125
     ac6:	ff 4f       	sbci	r31, 0xFF	; 255
     ac8:	80 81       	ld	r24, Z
     aca:	28 1b       	sub	r18, r24
     acc:	31 09       	sbc	r19, r1
     ace:	41 09       	sbc	r20, r1
     ad0:	51 09       	sbc	r21, r1
     ad2:	c9 01       	movw	r24, r18
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	08 95       	ret

00000ade <__pack_f>:
     ade:	df 92       	push	r13
     ae0:	ef 92       	push	r14
     ae2:	ff 92       	push	r15
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	fc 01       	movw	r30, r24
     aea:	e4 80       	ldd	r14, Z+4	; 0x04
     aec:	f5 80       	ldd	r15, Z+5	; 0x05
     aee:	06 81       	ldd	r16, Z+6	; 0x06
     af0:	17 81       	ldd	r17, Z+7	; 0x07
     af2:	d1 80       	ldd	r13, Z+1	; 0x01
     af4:	80 81       	ld	r24, Z
     af6:	82 30       	cpi	r24, 0x02	; 2
     af8:	48 f4       	brcc	.+18     	; 0xb0c <__pack_f+0x2e>
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	a0 e1       	ldi	r26, 0x10	; 16
     b00:	b0 e0       	ldi	r27, 0x00	; 0
     b02:	e8 2a       	or	r14, r24
     b04:	f9 2a       	or	r15, r25
     b06:	0a 2b       	or	r16, r26
     b08:	1b 2b       	or	r17, r27
     b0a:	a5 c0       	rjmp	.+330    	; 0xc56 <__pack_f+0x178>
     b0c:	84 30       	cpi	r24, 0x04	; 4
     b0e:	09 f4       	brne	.+2      	; 0xb12 <__pack_f+0x34>
     b10:	9f c0       	rjmp	.+318    	; 0xc50 <__pack_f+0x172>
     b12:	82 30       	cpi	r24, 0x02	; 2
     b14:	21 f4       	brne	.+8      	; 0xb1e <__pack_f+0x40>
     b16:	ee 24       	eor	r14, r14
     b18:	ff 24       	eor	r15, r15
     b1a:	87 01       	movw	r16, r14
     b1c:	05 c0       	rjmp	.+10     	; 0xb28 <__pack_f+0x4a>
     b1e:	e1 14       	cp	r14, r1
     b20:	f1 04       	cpc	r15, r1
     b22:	01 05       	cpc	r16, r1
     b24:	11 05       	cpc	r17, r1
     b26:	19 f4       	brne	.+6      	; 0xb2e <__pack_f+0x50>
     b28:	e0 e0       	ldi	r30, 0x00	; 0
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	96 c0       	rjmp	.+300    	; 0xc5a <__pack_f+0x17c>
     b2e:	62 81       	ldd	r22, Z+2	; 0x02
     b30:	73 81       	ldd	r23, Z+3	; 0x03
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	62 38       	cpi	r22, 0x82	; 130
     b36:	79 07       	cpc	r23, r25
     b38:	0c f0       	brlt	.+2      	; 0xb3c <__pack_f+0x5e>
     b3a:	5b c0       	rjmp	.+182    	; 0xbf2 <__pack_f+0x114>
     b3c:	22 e8       	ldi	r18, 0x82	; 130
     b3e:	3f ef       	ldi	r19, 0xFF	; 255
     b40:	26 1b       	sub	r18, r22
     b42:	37 0b       	sbc	r19, r23
     b44:	2a 31       	cpi	r18, 0x1A	; 26
     b46:	31 05       	cpc	r19, r1
     b48:	2c f0       	brlt	.+10     	; 0xb54 <__pack_f+0x76>
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	2a c0       	rjmp	.+84     	; 0xba8 <__pack_f+0xca>
     b54:	b8 01       	movw	r22, r16
     b56:	a7 01       	movw	r20, r14
     b58:	02 2e       	mov	r0, r18
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__pack_f+0x86>
     b5c:	76 95       	lsr	r23
     b5e:	67 95       	ror	r22
     b60:	57 95       	ror	r21
     b62:	47 95       	ror	r20
     b64:	0a 94       	dec	r0
     b66:	d2 f7       	brpl	.-12     	; 0xb5c <__pack_f+0x7e>
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	a0 e0       	ldi	r26, 0x00	; 0
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	04 c0       	rjmp	.+8      	; 0xb7a <__pack_f+0x9c>
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	aa 1f       	adc	r26, r26
     b78:	bb 1f       	adc	r27, r27
     b7a:	2a 95       	dec	r18
     b7c:	d2 f7       	brpl	.-12     	; 0xb72 <__pack_f+0x94>
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	a1 09       	sbc	r26, r1
     b82:	b1 09       	sbc	r27, r1
     b84:	8e 21       	and	r24, r14
     b86:	9f 21       	and	r25, r15
     b88:	a0 23       	and	r26, r16
     b8a:	b1 23       	and	r27, r17
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	a1 05       	cpc	r26, r1
     b90:	b1 05       	cpc	r27, r1
     b92:	21 f0       	breq	.+8      	; 0xb9c <__pack_f+0xbe>
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	9a 01       	movw	r18, r20
     b9e:	ab 01       	movw	r20, r22
     ba0:	28 2b       	or	r18, r24
     ba2:	39 2b       	or	r19, r25
     ba4:	4a 2b       	or	r20, r26
     ba6:	5b 2b       	or	r21, r27
     ba8:	da 01       	movw	r26, r20
     baa:	c9 01       	movw	r24, r18
     bac:	8f 77       	andi	r24, 0x7F	; 127
     bae:	90 70       	andi	r25, 0x00	; 0
     bb0:	a0 70       	andi	r26, 0x00	; 0
     bb2:	b0 70       	andi	r27, 0x00	; 0
     bb4:	80 34       	cpi	r24, 0x40	; 64
     bb6:	91 05       	cpc	r25, r1
     bb8:	a1 05       	cpc	r26, r1
     bba:	b1 05       	cpc	r27, r1
     bbc:	39 f4       	brne	.+14     	; 0xbcc <__pack_f+0xee>
     bbe:	27 ff       	sbrs	r18, 7
     bc0:	09 c0       	rjmp	.+18     	; 0xbd4 <__pack_f+0xf6>
     bc2:	20 5c       	subi	r18, 0xC0	; 192
     bc4:	3f 4f       	sbci	r19, 0xFF	; 255
     bc6:	4f 4f       	sbci	r20, 0xFF	; 255
     bc8:	5f 4f       	sbci	r21, 0xFF	; 255
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <__pack_f+0xf6>
     bcc:	21 5c       	subi	r18, 0xC1	; 193
     bce:	3f 4f       	sbci	r19, 0xFF	; 255
     bd0:	4f 4f       	sbci	r20, 0xFF	; 255
     bd2:	5f 4f       	sbci	r21, 0xFF	; 255
     bd4:	e0 e0       	ldi	r30, 0x00	; 0
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	20 30       	cpi	r18, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	3a 07       	cpc	r19, r26
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	4a 07       	cpc	r20, r26
     be2:	a0 e4       	ldi	r26, 0x40	; 64
     be4:	5a 07       	cpc	r21, r26
     be6:	10 f0       	brcs	.+4      	; 0xbec <__pack_f+0x10e>
     be8:	e1 e0       	ldi	r30, 0x01	; 1
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	79 01       	movw	r14, r18
     bee:	8a 01       	movw	r16, r20
     bf0:	27 c0       	rjmp	.+78     	; 0xc40 <__pack_f+0x162>
     bf2:	60 38       	cpi	r22, 0x80	; 128
     bf4:	71 05       	cpc	r23, r1
     bf6:	64 f5       	brge	.+88     	; 0xc50 <__pack_f+0x172>
     bf8:	fb 01       	movw	r30, r22
     bfa:	e1 58       	subi	r30, 0x81	; 129
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	d8 01       	movw	r26, r16
     c00:	c7 01       	movw	r24, r14
     c02:	8f 77       	andi	r24, 0x7F	; 127
     c04:	90 70       	andi	r25, 0x00	; 0
     c06:	a0 70       	andi	r26, 0x00	; 0
     c08:	b0 70       	andi	r27, 0x00	; 0
     c0a:	80 34       	cpi	r24, 0x40	; 64
     c0c:	91 05       	cpc	r25, r1
     c0e:	a1 05       	cpc	r26, r1
     c10:	b1 05       	cpc	r27, r1
     c12:	39 f4       	brne	.+14     	; 0xc22 <__pack_f+0x144>
     c14:	e7 fe       	sbrs	r14, 7
     c16:	0d c0       	rjmp	.+26     	; 0xc32 <__pack_f+0x154>
     c18:	80 e4       	ldi	r24, 0x40	; 64
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x14c>
     c22:	8f e3       	ldi	r24, 0x3F	; 63
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	a0 e0       	ldi	r26, 0x00	; 0
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e8 0e       	add	r14, r24
     c2c:	f9 1e       	adc	r15, r25
     c2e:	0a 1f       	adc	r16, r26
     c30:	1b 1f       	adc	r17, r27
     c32:	17 ff       	sbrs	r17, 7
     c34:	05 c0       	rjmp	.+10     	; 0xc40 <__pack_f+0x162>
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	31 96       	adiw	r30, 0x01	; 1
     c40:	87 e0       	ldi	r24, 0x07	; 7
     c42:	16 95       	lsr	r17
     c44:	07 95       	ror	r16
     c46:	f7 94       	ror	r15
     c48:	e7 94       	ror	r14
     c4a:	8a 95       	dec	r24
     c4c:	d1 f7       	brne	.-12     	; 0xc42 <__pack_f+0x164>
     c4e:	05 c0       	rjmp	.+10     	; 0xc5a <__pack_f+0x17c>
     c50:	ee 24       	eor	r14, r14
     c52:	ff 24       	eor	r15, r15
     c54:	87 01       	movw	r16, r14
     c56:	ef ef       	ldi	r30, 0xFF	; 255
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	6e 2f       	mov	r22, r30
     c5c:	67 95       	ror	r22
     c5e:	66 27       	eor	r22, r22
     c60:	67 95       	ror	r22
     c62:	90 2f       	mov	r25, r16
     c64:	9f 77       	andi	r25, 0x7F	; 127
     c66:	d7 94       	ror	r13
     c68:	dd 24       	eor	r13, r13
     c6a:	d7 94       	ror	r13
     c6c:	8e 2f       	mov	r24, r30
     c6e:	86 95       	lsr	r24
     c70:	49 2f       	mov	r20, r25
     c72:	46 2b       	or	r20, r22
     c74:	58 2f       	mov	r21, r24
     c76:	5d 29       	or	r21, r13
     c78:	b7 01       	movw	r22, r14
     c7a:	ca 01       	movw	r24, r20
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	df 90       	pop	r13
     c86:	08 95       	ret

00000c88 <__unpack_f>:
     c88:	fc 01       	movw	r30, r24
     c8a:	db 01       	movw	r26, r22
     c8c:	40 81       	ld	r20, Z
     c8e:	51 81       	ldd	r21, Z+1	; 0x01
     c90:	22 81       	ldd	r18, Z+2	; 0x02
     c92:	62 2f       	mov	r22, r18
     c94:	6f 77       	andi	r22, 0x7F	; 127
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	22 1f       	adc	r18, r18
     c9a:	22 27       	eor	r18, r18
     c9c:	22 1f       	adc	r18, r18
     c9e:	93 81       	ldd	r25, Z+3	; 0x03
     ca0:	89 2f       	mov	r24, r25
     ca2:	88 0f       	add	r24, r24
     ca4:	82 2b       	or	r24, r18
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	99 1f       	adc	r25, r25
     cac:	99 27       	eor	r25, r25
     cae:	99 1f       	adc	r25, r25
     cb0:	11 96       	adiw	r26, 0x01	; 1
     cb2:	9c 93       	st	X, r25
     cb4:	11 97       	sbiw	r26, 0x01	; 1
     cb6:	21 15       	cp	r18, r1
     cb8:	31 05       	cpc	r19, r1
     cba:	a9 f5       	brne	.+106    	; 0xd26 <__unpack_f+0x9e>
     cbc:	41 15       	cp	r20, r1
     cbe:	51 05       	cpc	r21, r1
     cc0:	61 05       	cpc	r22, r1
     cc2:	71 05       	cpc	r23, r1
     cc4:	11 f4       	brne	.+4      	; 0xcca <__unpack_f+0x42>
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	37 c0       	rjmp	.+110    	; 0xd38 <__unpack_f+0xb0>
     cca:	82 e8       	ldi	r24, 0x82	; 130
     ccc:	9f ef       	ldi	r25, 0xFF	; 255
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	9a 01       	movw	r18, r20
     cd8:	ab 01       	movw	r20, r22
     cda:	67 e0       	ldi	r22, 0x07	; 7
     cdc:	22 0f       	add	r18, r18
     cde:	33 1f       	adc	r19, r19
     ce0:	44 1f       	adc	r20, r20
     ce2:	55 1f       	adc	r21, r21
     ce4:	6a 95       	dec	r22
     ce6:	d1 f7       	brne	.-12     	; 0xcdc <__unpack_f+0x54>
     ce8:	83 e0       	ldi	r24, 0x03	; 3
     cea:	8c 93       	st	X, r24
     cec:	0d c0       	rjmp	.+26     	; 0xd08 <__unpack_f+0x80>
     cee:	22 0f       	add	r18, r18
     cf0:	33 1f       	adc	r19, r19
     cf2:	44 1f       	adc	r20, r20
     cf4:	55 1f       	adc	r21, r21
     cf6:	12 96       	adiw	r26, 0x02	; 2
     cf8:	8d 91       	ld	r24, X+
     cfa:	9c 91       	ld	r25, X
     cfc:	13 97       	sbiw	r26, 0x03	; 3
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	13 96       	adiw	r26, 0x03	; 3
     d02:	9c 93       	st	X, r25
     d04:	8e 93       	st	-X, r24
     d06:	12 97       	sbiw	r26, 0x02	; 2
     d08:	20 30       	cpi	r18, 0x00	; 0
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	38 07       	cpc	r19, r24
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	48 07       	cpc	r20, r24
     d12:	80 e4       	ldi	r24, 0x40	; 64
     d14:	58 07       	cpc	r21, r24
     d16:	58 f3       	brcs	.-42     	; 0xcee <__unpack_f+0x66>
     d18:	14 96       	adiw	r26, 0x04	; 4
     d1a:	2d 93       	st	X+, r18
     d1c:	3d 93       	st	X+, r19
     d1e:	4d 93       	st	X+, r20
     d20:	5c 93       	st	X, r21
     d22:	17 97       	sbiw	r26, 0x07	; 7
     d24:	08 95       	ret
     d26:	2f 3f       	cpi	r18, 0xFF	; 255
     d28:	31 05       	cpc	r19, r1
     d2a:	79 f4       	brne	.+30     	; 0xd4a <__unpack_f+0xc2>
     d2c:	41 15       	cp	r20, r1
     d2e:	51 05       	cpc	r21, r1
     d30:	61 05       	cpc	r22, r1
     d32:	71 05       	cpc	r23, r1
     d34:	19 f4       	brne	.+6      	; 0xd3c <__unpack_f+0xb4>
     d36:	84 e0       	ldi	r24, 0x04	; 4
     d38:	8c 93       	st	X, r24
     d3a:	08 95       	ret
     d3c:	64 ff       	sbrs	r22, 4
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <__unpack_f+0xbe>
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	8c 93       	st	X, r24
     d44:	12 c0       	rjmp	.+36     	; 0xd6a <__unpack_f+0xe2>
     d46:	1c 92       	st	X, r1
     d48:	10 c0       	rjmp	.+32     	; 0xd6a <__unpack_f+0xe2>
     d4a:	2f 57       	subi	r18, 0x7F	; 127
     d4c:	30 40       	sbci	r19, 0x00	; 0
     d4e:	13 96       	adiw	r26, 0x03	; 3
     d50:	3c 93       	st	X, r19
     d52:	2e 93       	st	-X, r18
     d54:	12 97       	sbiw	r26, 0x02	; 2
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	8c 93       	st	X, r24
     d5a:	87 e0       	ldi	r24, 0x07	; 7
     d5c:	44 0f       	add	r20, r20
     d5e:	55 1f       	adc	r21, r21
     d60:	66 1f       	adc	r22, r22
     d62:	77 1f       	adc	r23, r23
     d64:	8a 95       	dec	r24
     d66:	d1 f7       	brne	.-12     	; 0xd5c <__unpack_f+0xd4>
     d68:	70 64       	ori	r23, 0x40	; 64
     d6a:	14 96       	adiw	r26, 0x04	; 4
     d6c:	4d 93       	st	X+, r20
     d6e:	5d 93       	st	X+, r21
     d70:	6d 93       	st	X+, r22
     d72:	7c 93       	st	X, r23
     d74:	17 97       	sbiw	r26, 0x07	; 7
     d76:	08 95       	ret

00000d78 <__fpcmp_parts_f>:
     d78:	1f 93       	push	r17
     d7a:	dc 01       	movw	r26, r24
     d7c:	fb 01       	movw	r30, r22
     d7e:	9c 91       	ld	r25, X
     d80:	92 30       	cpi	r25, 0x02	; 2
     d82:	08 f4       	brcc	.+2      	; 0xd86 <__fpcmp_parts_f+0xe>
     d84:	47 c0       	rjmp	.+142    	; 0xe14 <__fpcmp_parts_f+0x9c>
     d86:	80 81       	ld	r24, Z
     d88:	82 30       	cpi	r24, 0x02	; 2
     d8a:	08 f4       	brcc	.+2      	; 0xd8e <__fpcmp_parts_f+0x16>
     d8c:	43 c0       	rjmp	.+134    	; 0xe14 <__fpcmp_parts_f+0x9c>
     d8e:	94 30       	cpi	r25, 0x04	; 4
     d90:	51 f4       	brne	.+20     	; 0xda6 <__fpcmp_parts_f+0x2e>
     d92:	11 96       	adiw	r26, 0x01	; 1
     d94:	1c 91       	ld	r17, X
     d96:	84 30       	cpi	r24, 0x04	; 4
     d98:	99 f5       	brne	.+102    	; 0xe00 <__fpcmp_parts_f+0x88>
     d9a:	81 81       	ldd	r24, Z+1	; 0x01
     d9c:	68 2f       	mov	r22, r24
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	61 1b       	sub	r22, r17
     da2:	71 09       	sbc	r23, r1
     da4:	3f c0       	rjmp	.+126    	; 0xe24 <__fpcmp_parts_f+0xac>
     da6:	84 30       	cpi	r24, 0x04	; 4
     da8:	21 f0       	breq	.+8      	; 0xdb2 <__fpcmp_parts_f+0x3a>
     daa:	92 30       	cpi	r25, 0x02	; 2
     dac:	31 f4       	brne	.+12     	; 0xdba <__fpcmp_parts_f+0x42>
     dae:	82 30       	cpi	r24, 0x02	; 2
     db0:	b9 f1       	breq	.+110    	; 0xe20 <__fpcmp_parts_f+0xa8>
     db2:	81 81       	ldd	r24, Z+1	; 0x01
     db4:	88 23       	and	r24, r24
     db6:	89 f1       	breq	.+98     	; 0xe1a <__fpcmp_parts_f+0xa2>
     db8:	2d c0       	rjmp	.+90     	; 0xe14 <__fpcmp_parts_f+0x9c>
     dba:	11 96       	adiw	r26, 0x01	; 1
     dbc:	1c 91       	ld	r17, X
     dbe:	11 97       	sbiw	r26, 0x01	; 1
     dc0:	82 30       	cpi	r24, 0x02	; 2
     dc2:	f1 f0       	breq	.+60     	; 0xe00 <__fpcmp_parts_f+0x88>
     dc4:	81 81       	ldd	r24, Z+1	; 0x01
     dc6:	18 17       	cp	r17, r24
     dc8:	d9 f4       	brne	.+54     	; 0xe00 <__fpcmp_parts_f+0x88>
     dca:	12 96       	adiw	r26, 0x02	; 2
     dcc:	2d 91       	ld	r18, X+
     dce:	3c 91       	ld	r19, X
     dd0:	13 97       	sbiw	r26, 0x03	; 3
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	82 17       	cp	r24, r18
     dd8:	93 07       	cpc	r25, r19
     dda:	94 f0       	brlt	.+36     	; 0xe00 <__fpcmp_parts_f+0x88>
     ddc:	28 17       	cp	r18, r24
     dde:	39 07       	cpc	r19, r25
     de0:	bc f0       	brlt	.+46     	; 0xe10 <__fpcmp_parts_f+0x98>
     de2:	14 96       	adiw	r26, 0x04	; 4
     de4:	8d 91       	ld	r24, X+
     de6:	9d 91       	ld	r25, X+
     de8:	0d 90       	ld	r0, X+
     dea:	bc 91       	ld	r27, X
     dec:	a0 2d       	mov	r26, r0
     dee:	24 81       	ldd	r18, Z+4	; 0x04
     df0:	35 81       	ldd	r19, Z+5	; 0x05
     df2:	46 81       	ldd	r20, Z+6	; 0x06
     df4:	57 81       	ldd	r21, Z+7	; 0x07
     df6:	28 17       	cp	r18, r24
     df8:	39 07       	cpc	r19, r25
     dfa:	4a 07       	cpc	r20, r26
     dfc:	5b 07       	cpc	r21, r27
     dfe:	18 f4       	brcc	.+6      	; 0xe06 <__fpcmp_parts_f+0x8e>
     e00:	11 23       	and	r17, r17
     e02:	41 f0       	breq	.+16     	; 0xe14 <__fpcmp_parts_f+0x9c>
     e04:	0a c0       	rjmp	.+20     	; 0xe1a <__fpcmp_parts_f+0xa2>
     e06:	82 17       	cp	r24, r18
     e08:	93 07       	cpc	r25, r19
     e0a:	a4 07       	cpc	r26, r20
     e0c:	b5 07       	cpc	r27, r21
     e0e:	40 f4       	brcc	.+16     	; 0xe20 <__fpcmp_parts_f+0xa8>
     e10:	11 23       	and	r17, r17
     e12:	19 f0       	breq	.+6      	; 0xe1a <__fpcmp_parts_f+0xa2>
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <__fpcmp_parts_f+0xac>
     e1a:	6f ef       	ldi	r22, 0xFF	; 255
     e1c:	7f ef       	ldi	r23, 0xFF	; 255
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <__fpcmp_parts_f+0xac>
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	cb 01       	movw	r24, r22
     e26:	1f 91       	pop	r17
     e28:	08 95       	ret

00000e2a <GPIO_PIN_CONFIG>:
uint8 *PINX_REGS[]={&PINA,&PINB,&PINC,&PIND};

static Bool PIN_CONFIG(GPIO_CONFIG_t *GPIO_PIN);

Bool GPIO_PIN_CONFIG(GPIO_CONFIG_t *GPIO_PIN)
{
     e2a:	dc 01       	movw	r26, r24
	Bool ret=E_OK;
	if(NULL==GPIO_PIN||GPIO_PIN->GPIO_PIN>PIN_MAX-1||GPIO_PIN->GPIO_PORT>PORT_MAX-1)
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	11 f4       	brne	.+4      	; 0xe34 <GPIO_PIN_CONFIG+0xa>
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	08 95       	ret
     e34:	8c 91       	ld	r24, X
     e36:	28 2f       	mov	r18, r24
     e38:	26 95       	lsr	r18
     e3a:	26 95       	lsr	r18
     e3c:	27 70       	andi	r18, 0x07	; 7
     e3e:	98 2f       	mov	r25, r24
     e40:	93 70       	andi	r25, 0x03	; 3
     e42:	e9 2f       	mov	r30, r25
     e44:	f0 e0       	ldi	r31, 0x00	; 0


static Bool PIN_CONFIG(GPIO_CONFIG_t *GPIO_PIN)
{
	Bool ret=E_OK;
	switch(GPIO_PIN->GPIO_STATE)
     e46:	82 95       	swap	r24
     e48:	86 95       	lsr	r24
     e4a:	83 70       	andi	r24, 0x03	; 3
     e4c:	48 2f       	mov	r20, r24
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	41 30       	cpi	r20, 0x01	; 1
     e52:	51 05       	cpc	r21, r1
     e54:	d1 f0       	breq	.+52     	; 0xe8a <GPIO_PIN_CONFIG+0x60>
     e56:	42 30       	cpi	r20, 0x02	; 2
     e58:	51 05       	cpc	r21, r1
     e5a:	09 f4       	brne	.+2      	; 0xe5e <GPIO_PIN_CONFIG+0x34>
     e5c:	41 c0       	rjmp	.+130    	; 0xee0 <GPIO_PIN_CONFIG+0xb6>
     e5e:	45 2b       	or	r20, r21
     e60:	09 f0       	breq	.+2      	; 0xe64 <GPIO_PIN_CONFIG+0x3a>
     e62:	3c c0       	rjmp	.+120    	; 0xedc <GPIO_PIN_CONFIG+0xb2>
	{
		case GPIO_INPUT:
			CLEAR_BIT(*DDRX_REGS[GPIO_PIN->GPIO_PORT],GPIO_PIN->GPIO_PIN);
     e64:	ee 0f       	add	r30, r30
     e66:	ff 1f       	adc	r31, r31
     e68:	e5 57       	subi	r30, 0x75	; 117
     e6a:	fe 4f       	sbci	r31, 0xFE	; 254
     e6c:	01 90       	ld	r0, Z+
     e6e:	f0 81       	ld	r31, Z
     e70:	e0 2d       	mov	r30, r0
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <GPIO_PIN_CONFIG+0x52>
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	2a 95       	dec	r18
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <GPIO_PIN_CONFIG+0x4e>
     e80:	80 95       	com	r24
     e82:	20 81       	ld	r18, Z
     e84:	28 23       	and	r18, r24
     e86:	20 83       	st	Z, r18
     e88:	29 c0       	rjmp	.+82     	; 0xedc <GPIO_PIN_CONFIG+0xb2>
			break;
		case GPIO_OUTPUT:
			SET_BIT(*DDRX_REGS[GPIO_PIN->GPIO_PORT],GPIO_PIN->GPIO_PIN);
     e8a:	ee 0f       	add	r30, r30
     e8c:	ff 1f       	adc	r31, r31
     e8e:	e5 57       	subi	r30, 0x75	; 117
     e90:	fe 4f       	sbci	r31, 0xFE	; 254
     e92:	01 90       	ld	r0, Z+
     e94:	f0 81       	ld	r31, Z
     e96:	e0 2d       	mov	r30, r0
     e98:	ca 01       	movw	r24, r20
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <GPIO_PIN_CONFIG+0x76>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	2a 95       	dec	r18
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <GPIO_PIN_CONFIG+0x72>
     ea4:	9c 01       	movw	r18, r24
     ea6:	80 81       	ld	r24, Z
     ea8:	82 2b       	or	r24, r18
     eaa:	80 83       	st	Z, r24
			CLEAR_BIT(*PORTX_REGS[GPIO_PIN->GPIO_PORT],GPIO_PIN->GPIO_PIN);
     eac:	8c 91       	ld	r24, X
     eae:	e8 2f       	mov	r30, r24
     eb0:	e3 70       	andi	r30, 0x03	; 3
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	ee 0f       	add	r30, r30
     eb6:	ff 1f       	adc	r31, r31
     eb8:	ed 57       	subi	r30, 0x7D	; 125
     eba:	fe 4f       	sbci	r31, 0xFE	; 254
     ebc:	01 90       	ld	r0, Z+
     ebe:	f0 81       	ld	r31, Z
     ec0:	e0 2d       	mov	r30, r0
     ec2:	86 95       	lsr	r24
     ec4:	86 95       	lsr	r24
     ec6:	87 70       	andi	r24, 0x07	; 7
     ec8:	02 c0       	rjmp	.+4      	; 0xece <GPIO_PIN_CONFIG+0xa4>
     eca:	44 0f       	add	r20, r20
     ecc:	55 1f       	adc	r21, r21
     ece:	8a 95       	dec	r24
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <GPIO_PIN_CONFIG+0xa0>
     ed2:	94 2f       	mov	r25, r20
     ed4:	90 95       	com	r25
     ed6:	80 81       	ld	r24, Z
     ed8:	89 23       	and	r24, r25
     eda:	80 83       	st	Z, r24
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	08 95       	ret
			break;
		case GPIO_INPUT_PULLUP:
			CLEAR_BIT(*DDRX_REGS[GPIO_PIN->GPIO_PORT],GPIO_PIN->GPIO_PIN);
     ee0:	ee 0f       	add	r30, r30
     ee2:	ff 1f       	adc	r31, r31
     ee4:	e5 57       	subi	r30, 0x75	; 117
     ee6:	fe 4f       	sbci	r31, 0xFE	; 254
     ee8:	01 90       	ld	r0, Z+
     eea:	f0 81       	ld	r31, Z
     eec:	e0 2d       	mov	r30, r0
     eee:	41 e0       	ldi	r20, 0x01	; 1
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	ca 01       	movw	r24, r20
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <GPIO_PIN_CONFIG+0xd0>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	2a 95       	dec	r18
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <GPIO_PIN_CONFIG+0xcc>
     efe:	80 95       	com	r24
     f00:	20 81       	ld	r18, Z
     f02:	28 23       	and	r18, r24
     f04:	20 83       	st	Z, r18
			SET_BIT(*PORTX_REGS[GPIO_PIN->GPIO_PORT],GPIO_PIN->GPIO_PIN);
     f06:	8c 91       	ld	r24, X
     f08:	e8 2f       	mov	r30, r24
     f0a:	e3 70       	andi	r30, 0x03	; 3
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	ee 0f       	add	r30, r30
     f10:	ff 1f       	adc	r31, r31
     f12:	ed 57       	subi	r30, 0x7D	; 125
     f14:	fe 4f       	sbci	r31, 0xFE	; 254
     f16:	01 90       	ld	r0, Z+
     f18:	f0 81       	ld	r31, Z
     f1a:	e0 2d       	mov	r30, r0
     f1c:	86 95       	lsr	r24
     f1e:	86 95       	lsr	r24
     f20:	87 70       	andi	r24, 0x07	; 7
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <GPIO_PIN_CONFIG+0xfe>
     f24:	44 0f       	add	r20, r20
     f26:	55 1f       	adc	r21, r21
     f28:	8a 95       	dec	r24
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <GPIO_PIN_CONFIG+0xfa>
     f2c:	80 81       	ld	r24, Z
     f2e:	84 2b       	or	r24, r20
     f30:	80 83       	st	Z, r24
     f32:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		PIN_CONFIG(GPIO_PIN);
	}
	return ret;
}
     f34:	08 95       	ret

00000f36 <GPIO_PIN_READ>:

Bool GPIO_PIN_READ(GPIO_CONFIG_t *GPIO_PIN,Logic_Level *Level)
{
     f36:	fc 01       	movw	r30, r24
     f38:	db 01       	movw	r26, r22
	Bool ret = E_OK;
	if (NULL == GPIO_PIN)
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	11 f4       	brne	.+4      	; 0xf42 <GPIO_PIN_READ+0xc>
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	08 95       	ret
		ret = E_NOK;
	else {
		*Level=READ_BIT(*PINX_REGS[GPIO_PIN->GPIO_PORT],GPIO_PIN->GPIO_PIN);
     f42:	20 81       	ld	r18, Z
     f44:	e2 2f       	mov	r30, r18
     f46:	e3 70       	andi	r30, 0x03	; 3
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	ee 0f       	add	r30, r30
     f4c:	ff 1f       	adc	r31, r31
     f4e:	ed 56       	subi	r30, 0x6D	; 109
     f50:	fe 4f       	sbci	r31, 0xFE	; 254
     f52:	01 90       	ld	r0, Z+
     f54:	f0 81       	ld	r31, Z
     f56:	e0 2d       	mov	r30, r0
     f58:	80 81       	ld	r24, Z
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	26 95       	lsr	r18
     f5e:	26 95       	lsr	r18
     f60:	27 70       	andi	r18, 0x07	; 7
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <GPIO_PIN_READ+0x32>
     f64:	95 95       	asr	r25
     f66:	87 95       	ror	r24
     f68:	2a 95       	dec	r18
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <GPIO_PIN_READ+0x2e>
     f6c:	81 70       	andi	r24, 0x01	; 1
     f6e:	8c 93       	st	X, r24
     f70:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ret;
}
     f72:	08 95       	ret

00000f74 <GPIO_PIN_WRITE>:

Bool GPIO_PIN_WRITE(GPIO_CONFIG_t *GPIO_PIN,Logic_Level Level)
{
     f74:	fc 01       	movw	r30, r24
	Bool ret = E_OK;
	if (NULL == GPIO_PIN)
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	b9 f1       	breq	.+110    	; 0xfe8 <GPIO_PIN_WRITE+0x74>
		ret = E_NOK;
	else {
		switch(Level)
     f7a:	66 23       	and	r22, r22
     f7c:	d1 f0       	breq	.+52     	; 0xfb2 <GPIO_PIN_WRITE+0x3e>
     f7e:	61 30       	cpi	r22, 0x01	; 1
     f80:	99 f5       	brne	.+102    	; 0xfe8 <GPIO_PIN_WRITE+0x74>
		{
			case GPIO_HIGH:
				SET_BIT(*PORTX_REGS[GPIO_PIN->GPIO_PORT],GPIO_PIN->GPIO_PIN);
     f82:	20 81       	ld	r18, Z
     f84:	e2 2f       	mov	r30, r18
     f86:	e3 70       	andi	r30, 0x03	; 3
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	ee 0f       	add	r30, r30
     f8c:	ff 1f       	adc	r31, r31
     f8e:	ed 57       	subi	r30, 0x7D	; 125
     f90:	fe 4f       	sbci	r31, 0xFE	; 254
     f92:	01 90       	ld	r0, Z+
     f94:	f0 81       	ld	r31, Z
     f96:	e0 2d       	mov	r30, r0
     f98:	26 95       	lsr	r18
     f9a:	26 95       	lsr	r18
     f9c:	27 70       	andi	r18, 0x07	; 7
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <GPIO_PIN_WRITE+0x34>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	2a 95       	dec	r18
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <GPIO_PIN_WRITE+0x30>
     fac:	20 81       	ld	r18, Z
     fae:	28 2b       	or	r18, r24
     fb0:	18 c0       	rjmp	.+48     	; 0xfe2 <GPIO_PIN_WRITE+0x6e>
				break;
			case GPIO_LOW:
				CLEAR_BIT(*PORTX_REGS[GPIO_PIN->GPIO_PORT],GPIO_PIN->GPIO_PIN);
     fb2:	20 81       	ld	r18, Z
     fb4:	e2 2f       	mov	r30, r18
     fb6:	e3 70       	andi	r30, 0x03	; 3
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	ee 0f       	add	r30, r30
     fbc:	ff 1f       	adc	r31, r31
     fbe:	ed 57       	subi	r30, 0x7D	; 125
     fc0:	fe 4f       	sbci	r31, 0xFE	; 254
     fc2:	01 90       	ld	r0, Z+
     fc4:	f0 81       	ld	r31, Z
     fc6:	e0 2d       	mov	r30, r0
     fc8:	26 95       	lsr	r18
     fca:	26 95       	lsr	r18
     fcc:	27 70       	andi	r18, 0x07	; 7
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <GPIO_PIN_WRITE+0x64>
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	2a 95       	dec	r18
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <GPIO_PIN_WRITE+0x60>
     fdc:	80 95       	com	r24
     fde:	20 81       	ld	r18, Z
     fe0:	28 23       	and	r18, r24
     fe2:	20 83       	st	Z, r18
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	08 95       	ret
				break;
     fe8:	80 e0       	ldi	r24, 0x00	; 0
			default:
				ret=E_NOK;
		}
	}
	return ret;
}
     fea:	08 95       	ret

00000fec <GPIO_PIN_Toggle>:

Bool GPIO_PIN_Toggle(GPIO_CONFIG_t *GPIO_PIN)
{
     fec:	fc 01       	movw	r30, r24
	Bool ret = E_OK;
	if (NULL == GPIO_PIN)
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	11 f4       	brne	.+4      	; 0xff6 <GPIO_PIN_Toggle+0xa>
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	08 95       	ret
		ret = E_NOK;
	else {
		TOGGLE_BIT(*PORTX_REGS[GPIO_PIN->GPIO_PORT], GPIO_PIN->GPIO_PIN);
     ff6:	20 81       	ld	r18, Z
     ff8:	e2 2f       	mov	r30, r18
     ffa:	e3 70       	andi	r30, 0x03	; 3
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	ee 0f       	add	r30, r30
    1000:	ff 1f       	adc	r31, r31
    1002:	ed 57       	subi	r30, 0x7D	; 125
    1004:	fe 4f       	sbci	r31, 0xFE	; 254
    1006:	01 90       	ld	r0, Z+
    1008:	f0 81       	ld	r31, Z
    100a:	e0 2d       	mov	r30, r0
    100c:	26 95       	lsr	r18
    100e:	26 95       	lsr	r18
    1010:	27 70       	andi	r18, 0x07	; 7
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 c0       	rjmp	.+4      	; 0x101c <GPIO_PIN_Toggle+0x30>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	2a 95       	dec	r18
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <GPIO_PIN_Toggle+0x2c>
    1020:	20 81       	ld	r18, Z
    1022:	28 27       	eor	r18, r24
    1024:	20 83       	st	Z, r18
    1026:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ret;
}
    1028:	08 95       	ret

0000102a <GPIO_PORT_CONFIG>:

Bool GPIO_PORT_CONFIG(PORT_INDEX Port,uint8 Config)
{
	Bool ret = E_OK;
	if(Port>PORT_MAX-1)
    102a:	84 30       	cpi	r24, 0x04	; 4
    102c:	10 f0       	brcs	.+4      	; 0x1032 <GPIO_PORT_CONFIG+0x8>
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	08 95       	ret
		ret=E_NOK;
	else
	{
		*DDRX_REGS[Port] = Config;
    1032:	e8 2f       	mov	r30, r24
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	ee 0f       	add	r30, r30
    1038:	ff 1f       	adc	r31, r31
    103a:	e5 57       	subi	r30, 0x75	; 117
    103c:	fe 4f       	sbci	r31, 0xFE	; 254
    103e:	01 90       	ld	r0, Z+
    1040:	f0 81       	ld	r31, Z
    1042:	e0 2d       	mov	r30, r0
    1044:	60 83       	st	Z, r22
    1046:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ret;
}
    1048:	08 95       	ret

0000104a <GPIO_PORT_WRITE>:

Bool GPIO_PORT_WRITE(PORT_INDEX Port,Logic_Level Level){
	Bool ret = E_OK;
	if (Port>PORT_MAX-1)
    104a:	84 30       	cpi	r24, 0x04	; 4
    104c:	10 f0       	brcs	.+4      	; 0x1052 <GPIO_PORT_WRITE+0x8>
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	08 95       	ret
		ret = E_NOK;
	else {
		*PORTX_REGS[Port] = Level;
    1052:	e8 2f       	mov	r30, r24
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	ee 0f       	add	r30, r30
    1058:	ff 1f       	adc	r31, r31
    105a:	ed 57       	subi	r30, 0x7D	; 125
    105c:	fe 4f       	sbci	r31, 0xFE	; 254
    105e:	01 90       	ld	r0, Z+
    1060:	f0 81       	ld	r31, Z
    1062:	e0 2d       	mov	r30, r0
    1064:	60 83       	st	Z, r22
    1066:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ret;
}
    1068:	08 95       	ret

0000106a <GPIO_PORT_READ>:

Bool GPIO_PORT_READ(PORT_INDEX Port,Logic_Level *Level)
{
    106a:	db 01       	movw	r26, r22
	Bool ret = E_OK;
	if (Port>PORT_MAX-1||NULL == Level)
    106c:	84 30       	cpi	r24, 0x04	; 4
    106e:	80 f4       	brcc	.+32     	; 0x1090 <GPIO_PORT_READ+0x26>
    1070:	61 15       	cp	r22, r1
    1072:	71 05       	cpc	r23, r1
    1074:	69 f0       	breq	.+26     	; 0x1090 <GPIO_PORT_READ+0x26>
		ret = E_NOK;
	else {
		*Level=*PINX_REGS[Port];
    1076:	e8 2f       	mov	r30, r24
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	ee 0f       	add	r30, r30
    107c:	ff 1f       	adc	r31, r31
    107e:	ed 56       	subi	r30, 0x6D	; 109
    1080:	fe 4f       	sbci	r31, 0xFE	; 254
    1082:	01 90       	ld	r0, Z+
    1084:	f0 81       	ld	r31, Z
    1086:	e0 2d       	mov	r30, r0
    1088:	80 81       	ld	r24, Z
    108a:	8c 93       	st	X, r24
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	08 95       	ret
    1090:	80 e0       	ldi	r24, 0x00	; 0
	}
	return ret;
}
    1092:	08 95       	ret

00001094 <GPIO_PORT_Toggle>:

Bool GPIO_PORT_Toggle(PORT_INDEX Port)
{
	Bool ret = E_OK;
		if (Port>PORT_MAX-1)
    1094:	84 30       	cpi	r24, 0x04	; 4
    1096:	10 f0       	brcs	.+4      	; 0x109c <GPIO_PORT_Toggle+0x8>
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	08 95       	ret
			ret = E_NOK;
		else {
			*PORTX_REGS[Port]=~(*PORTX_REGS[Port]);
    109c:	e8 2f       	mov	r30, r24
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	ee 0f       	add	r30, r30
    10a2:	ff 1f       	adc	r31, r31
    10a4:	ed 57       	subi	r30, 0x7D	; 125
    10a6:	fe 4f       	sbci	r31, 0xFE	; 254
    10a8:	01 90       	ld	r0, Z+
    10aa:	f0 81       	ld	r31, Z
    10ac:	e0 2d       	mov	r30, r0
    10ae:	80 81       	ld	r24, Z
    10b0:	80 95       	com	r24
    10b2:	80 83       	st	Z, r24
    10b4:	81 e0       	ldi	r24, 0x01	; 1
		}
		return ret;
}
    10b6:	08 95       	ret

000010b8 <__vector_5>:
{
	Timer1_capt_ISR();
}

ISR(TIMER2_OVF_vect)
{
    10b8:	1f 92       	push	r1
    10ba:	0f 92       	push	r0
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	0f 92       	push	r0
    10c0:	11 24       	eor	r1, r1
    10c2:	2f 93       	push	r18
    10c4:	3f 93       	push	r19
    10c6:	4f 93       	push	r20
    10c8:	5f 93       	push	r21
    10ca:	6f 93       	push	r22
    10cc:	7f 93       	push	r23
    10ce:	8f 93       	push	r24
    10d0:	9f 93       	push	r25
    10d2:	af 93       	push	r26
    10d4:	bf 93       	push	r27
    10d6:	ef 93       	push	r30
    10d8:	ff 93       	push	r31
	Timer2_ovf_ISR();
    10da:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <Timer2_ovf_ISR>
}
    10de:	ff 91       	pop	r31
    10e0:	ef 91       	pop	r30
    10e2:	bf 91       	pop	r27
    10e4:	af 91       	pop	r26
    10e6:	9f 91       	pop	r25
    10e8:	8f 91       	pop	r24
    10ea:	7f 91       	pop	r23
    10ec:	6f 91       	pop	r22
    10ee:	5f 91       	pop	r21
    10f0:	4f 91       	pop	r20
    10f2:	3f 91       	pop	r19
    10f4:	2f 91       	pop	r18
    10f6:	0f 90       	pop	r0
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	0f 90       	pop	r0
    10fc:	1f 90       	pop	r1
    10fe:	18 95       	reti

00001100 <__vector_6>:
{
	Timer1_ovf_ISR();
}

ISR(TIMER1_CAPT_vect)
{
    1100:	1f 92       	push	r1
    1102:	0f 92       	push	r0
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	0f 92       	push	r0
    1108:	11 24       	eor	r1, r1
    110a:	2f 93       	push	r18
    110c:	3f 93       	push	r19
    110e:	4f 93       	push	r20
    1110:	5f 93       	push	r21
    1112:	6f 93       	push	r22
    1114:	7f 93       	push	r23
    1116:	8f 93       	push	r24
    1118:	9f 93       	push	r25
    111a:	af 93       	push	r26
    111c:	bf 93       	push	r27
    111e:	ef 93       	push	r30
    1120:	ff 93       	push	r31
	Timer1_capt_ISR();
    1122:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <Timer1_capt_ISR>
}
    1126:	ff 91       	pop	r31
    1128:	ef 91       	pop	r30
    112a:	bf 91       	pop	r27
    112c:	af 91       	pop	r26
    112e:	9f 91       	pop	r25
    1130:	8f 91       	pop	r24
    1132:	7f 91       	pop	r23
    1134:	6f 91       	pop	r22
    1136:	5f 91       	pop	r21
    1138:	4f 91       	pop	r20
    113a:	3f 91       	pop	r19
    113c:	2f 91       	pop	r18
    113e:	0f 90       	pop	r0
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	0f 90       	pop	r0
    1144:	1f 90       	pop	r1
    1146:	18 95       	reti

00001148 <__vector_9>:
 *      Author: Seif pc
 */
#include "Interrupts.h"

ISR(TIMER1_OVF_vect)
{
    1148:	1f 92       	push	r1
    114a:	0f 92       	push	r0
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	0f 92       	push	r0
    1150:	11 24       	eor	r1, r1
    1152:	2f 93       	push	r18
    1154:	3f 93       	push	r19
    1156:	4f 93       	push	r20
    1158:	5f 93       	push	r21
    115a:	6f 93       	push	r22
    115c:	7f 93       	push	r23
    115e:	8f 93       	push	r24
    1160:	9f 93       	push	r25
    1162:	af 93       	push	r26
    1164:	bf 93       	push	r27
    1166:	ef 93       	push	r30
    1168:	ff 93       	push	r31
	Timer1_ovf_ISR();
    116a:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <Timer1_ovf_ISR>
}
    116e:	ff 91       	pop	r31
    1170:	ef 91       	pop	r30
    1172:	bf 91       	pop	r27
    1174:	af 91       	pop	r26
    1176:	9f 91       	pop	r25
    1178:	8f 91       	pop	r24
    117a:	7f 91       	pop	r23
    117c:	6f 91       	pop	r22
    117e:	5f 91       	pop	r21
    1180:	4f 91       	pop	r20
    1182:	3f 91       	pop	r19
    1184:	2f 91       	pop	r18
    1186:	0f 90       	pop	r0
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	0f 90       	pop	r0
    118c:	1f 90       	pop	r1
    118e:	18 95       	reti

00001190 <EXT_Int_init>:
#endif
	return ret;
}

Bool EXT_Int_init(EXT_INT_CONFIG_t *Int)
{
    1190:	fc 01       	movw	r30, r24
	Bool ret=E_OK;
	if(NULL==Int)
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	09 f4       	brne	.+2      	; 0x1198 <EXT_Int_init+0x8>
    1196:	88 c0       	rjmp	.+272    	; 0x12a8 <EXT_Int_init+0x118>
	static void (*INT2_Callback_Ptr)(void);
#endif

static inline void Ext_INT_Disable()
{
	GLOBAL_INT_DISABLE();
    1198:	8f b7       	in	r24, 0x3f	; 63
    119a:	80 68       	ori	r24, 0x80	; 128
    119c:	8f bf       	out	0x3f, r24	; 63
	EXT_INT0_MODULE_DISABLE();
    119e:	8b b7       	in	r24, 0x3b	; 59
    11a0:	8f 7b       	andi	r24, 0xBF	; 191
    11a2:	8b bf       	out	0x3b, r24	; 59
	EXT_INT1_MODULE_DISABLE();
    11a4:	8b b7       	in	r24, 0x3b	; 59
    11a6:	8f 77       	andi	r24, 0x7F	; 127
    11a8:	8b bf       	out	0x3b, r24	; 59
	EXT_INT2_MODULE_DISABLE();
    11aa:	8b b7       	in	r24, 0x3b	; 59
    11ac:	8f 7d       	andi	r24, 0xDF	; 223
    11ae:	8b bf       	out	0x3b, r24	; 59
	if(NULL==Int)
		ret=E_NOK;
	else
	{
		Ext_INT_Disable();
		switch(Int->Pin)
    11b0:	80 81       	ld	r24, Z
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	89 f1       	breq	.+98     	; 0x1218 <EXT_Int_init+0x88>
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	20 f0       	brcs	.+8      	; 0x11c2 <EXT_Int_init+0x32>
    11ba:	82 30       	cpi	r24, 0x02	; 2
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <EXT_Int_init+0x30>
    11be:	74 c0       	rjmp	.+232    	; 0x12a8 <EXT_Int_init+0x118>
    11c0:	56 c0       	rjmp	.+172    	; 0x126e <EXT_Int_init+0xde>
		{
			case EXT_INT0:
				GLOBAL_INT_ENABLE();
    11c2:	8f b7       	in	r24, 0x3f	; 63
    11c4:	80 68       	ori	r24, 0x80	; 128
    11c6:	8f bf       	out	0x3f, r24	; 63

static Bool Ext_INT0_init(EXT_INT_CONFIG_t *Int)
{
	Bool ret=E_OK;
#if EXT_INT0_FEATURE_ENABLE==FEATURE_ENABLE
	switch(Int->Sense_Control)
    11c8:	81 81       	ldd	r24, Z+1	; 0x01
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	51 f0       	breq	.+20     	; 0x11e2 <EXT_Int_init+0x52>
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	28 f0       	brcs	.+10     	; 0x11dc <EXT_Int_init+0x4c>
    11d2:	82 30       	cpi	r24, 0x02	; 2
    11d4:	79 f0       	breq	.+30     	; 0x11f4 <EXT_Int_init+0x64>
    11d6:	83 30       	cpi	r24, 0x03	; 3
    11d8:	99 f4       	brne	.+38     	; 0x1200 <EXT_Int_init+0x70>
    11da:	09 c0       	rjmp	.+18     	; 0x11ee <EXT_Int_init+0x5e>
	{
		case EXT_INT_LOW_LEVEL:
					CLEAR_BIT(MCUCR,ISC00);
    11dc:	85 b7       	in	r24, 0x35	; 53
    11de:	8e 7f       	andi	r24, 0xFE	; 254
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <EXT_Int_init+0x56>
					CLEAR_BIT(MCUCR,ISC01);
					break;
		case EXT_INT_LEVEL_CHANGE:
				   SET_BIT(MCUCR,ISC00);
    11e2:	85 b7       	in	r24, 0x35	; 53
    11e4:	81 60       	ori	r24, 0x01	; 1
    11e6:	85 bf       	out	0x35, r24	; 53
				   CLEAR_BIT(MCUCR,ISC01);
    11e8:	85 b7       	in	r24, 0x35	; 53
    11ea:	8d 7f       	andi	r24, 0xFD	; 253
    11ec:	08 c0       	rjmp	.+16     	; 0x11fe <EXT_Int_init+0x6e>
				   break;
		case EXT_INT_FALLING_EDGE:
		     	   CLEAR_BIT(MCUCR,ISC00);
    11ee:	85 b7       	in	r24, 0x35	; 53
    11f0:	8e 7f       	andi	r24, 0xFE	; 254
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <EXT_Int_init+0x68>
				   SET_BIT(MCUCR,ISC01);
				   break;
		case EXT_INT_RISING_EDGE:
				   SET_BIT(MCUCR,ISC00);
    11f4:	85 b7       	in	r24, 0x35	; 53
    11f6:	81 60       	ori	r24, 0x01	; 1
    11f8:	85 bf       	out	0x35, r24	; 53
				   SET_BIT(MCUCR,ISC01);
    11fa:	85 b7       	in	r24, 0x35	; 53
    11fc:	82 60       	ori	r24, 0x02	; 2
    11fe:	85 bf       	out	0x35, r24	; 53
				   break;
		default:
			ret=E_NOK;
	}
	INT0_Callback_Ptr=Int->INT0_Callback;
    1200:	82 81       	ldd	r24, Z+2	; 0x02
    1202:	93 81       	ldd	r25, Z+3	; 0x03
    1204:	90 93 a3 01 	sts	0x01A3, r25
    1208:	80 93 a2 01 	sts	0x01A2, r24
		switch(Int->Pin)
		{
			case EXT_INT0:
				GLOBAL_INT_ENABLE();
				Ext_INT0_init(Int);
				EXT_INT0_FLAG_CLEAR();
    120c:	8a b7       	in	r24, 0x3a	; 58
    120e:	80 64       	ori	r24, 0x40	; 64
    1210:	8a bf       	out	0x3a, r24	; 58
				EXT_INT0_MODULE_ENABLE();
    1212:	8b b7       	in	r24, 0x3b	; 59
    1214:	80 64       	ori	r24, 0x40	; 64
    1216:	45 c0       	rjmp	.+138    	; 0x12a2 <EXT_Int_init+0x112>
				break;
			case EXT_INT1:
				GLOBAL_INT_ENABLE();
    1218:	8f b7       	in	r24, 0x3f	; 63
    121a:	80 68       	ori	r24, 0x80	; 128
    121c:	8f bf       	out	0x3f, r24	; 63

static Bool Ext_INT1_init(EXT_INT_CONFIG_t *Int)
{
	Bool ret = E_OK;
#if EXT_INT1_FEATURE_ENABLE==FEATURE_ENABLE
	switch (Int->Sense_Control) {
    121e:	81 81       	ldd	r24, Z+1	; 0x01
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	51 f0       	breq	.+20     	; 0x1238 <EXT_Int_init+0xa8>
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	28 f0       	brcs	.+10     	; 0x1232 <EXT_Int_init+0xa2>
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	79 f0       	breq	.+30     	; 0x124a <EXT_Int_init+0xba>
    122c:	83 30       	cpi	r24, 0x03	; 3
    122e:	99 f4       	brne	.+38     	; 0x1256 <EXT_Int_init+0xc6>
    1230:	09 c0       	rjmp	.+18     	; 0x1244 <EXT_Int_init+0xb4>
	case EXT_INT_LOW_LEVEL:
			CLEAR_BIT(MCUCR, ISC10);
    1232:	85 b7       	in	r24, 0x35	; 53
    1234:	8b 7f       	andi	r24, 0xFB	; 251
    1236:	02 c0       	rjmp	.+4      	; 0x123c <EXT_Int_init+0xac>
			CLEAR_BIT(MCUCR, ISC11);
			break;
	case EXT_INT_LEVEL_CHANGE:
			SET_BIT(MCUCR, ISC10);
    1238:	85 b7       	in	r24, 0x35	; 53
    123a:	84 60       	ori	r24, 0x04	; 4
    123c:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR, ISC11);
    123e:	85 b7       	in	r24, 0x35	; 53
    1240:	87 7f       	andi	r24, 0xF7	; 247
    1242:	08 c0       	rjmp	.+16     	; 0x1254 <EXT_Int_init+0xc4>
			break;
	case EXT_INT_FALLING_EDGE:
			CLEAR_BIT(MCUCR, ISC10);
    1244:	85 b7       	in	r24, 0x35	; 53
    1246:	8b 7f       	andi	r24, 0xFB	; 251
    1248:	02 c0       	rjmp	.+4      	; 0x124e <EXT_Int_init+0xbe>
			SET_BIT(MCUCR, ISC11);
		    break;
	case EXT_INT_RISING_EDGE:
			SET_BIT(MCUCR, ISC10);
    124a:	85 b7       	in	r24, 0x35	; 53
    124c:	84 60       	ori	r24, 0x04	; 4
    124e:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, ISC11);
    1250:	85 b7       	in	r24, 0x35	; 53
    1252:	88 60       	ori	r24, 0x08	; 8
    1254:	85 bf       	out	0x35, r24	; 53
			break;
	default:
		ret = E_NOK;
	}
	INT1_Callback_Ptr=Int->INT1_Callback;
    1256:	84 81       	ldd	r24, Z+4	; 0x04
    1258:	95 81       	ldd	r25, Z+5	; 0x05
    125a:	90 93 a5 01 	sts	0x01A5, r25
    125e:	80 93 a4 01 	sts	0x01A4, r24
				EXT_INT0_MODULE_ENABLE();
				break;
			case EXT_INT1:
				GLOBAL_INT_ENABLE();
				Ext_INT1_init(Int);
				EXT_INT1_FLAG_CLEAR();
    1262:	8a b7       	in	r24, 0x3a	; 58
    1264:	80 68       	ori	r24, 0x80	; 128
    1266:	8a bf       	out	0x3a, r24	; 58
				EXT_INT1_MODULE_ENABLE();
    1268:	8b b7       	in	r24, 0x3b	; 59
    126a:	80 68       	ori	r24, 0x80	; 128
    126c:	1a c0       	rjmp	.+52     	; 0x12a2 <EXT_Int_init+0x112>
				break;
			case  EXT_INT2:
				GLOBAL_INT_ENABLE();
    126e:	8f b7       	in	r24, 0x3f	; 63
    1270:	80 68       	ori	r24, 0x80	; 128
    1272:	8f bf       	out	0x3f, r24	; 63

static Bool Ext_INT2_init(EXT_INT_CONFIG_t *Int)
{
	Bool ret=E_OK;
#if EXT_INT2_FEATURE_ENABLE==FEATURE_ENABLE
	switch(Int->Sense_Control)
    1274:	81 81       	ldd	r24, Z+1	; 0x01
    1276:	84 30       	cpi	r24, 0x04	; 4
    1278:	19 f0       	breq	.+6      	; 0x1280 <EXT_Int_init+0xf0>
    127a:	85 30       	cpi	r24, 0x05	; 5
    127c:	39 f4       	brne	.+14     	; 0x128c <EXT_Int_init+0xfc>
    127e:	03 c0       	rjmp	.+6      	; 0x1286 <EXT_Int_init+0xf6>
	{
		case EXT_INT2_FALLING_EDGE:
			EXT_INT2_FEDG();
    1280:	84 b7       	in	r24, 0x34	; 52
    1282:	80 64       	ori	r24, 0x40	; 64
    1284:	02 c0       	rjmp	.+4      	; 0x128a <EXT_Int_init+0xfa>
			break;
		case EXT_INT2_RISING_EDGE:
			EXT_INT2_RSEDG();
    1286:	84 b7       	in	r24, 0x34	; 52
    1288:	8f 7b       	andi	r24, 0xBF	; 191
    128a:	84 bf       	out	0x34, r24	; 52
			break;
		default:
			ret=E_NOK;
	}
	INT2_Callback_Ptr=Int->INT2_Callback;
    128c:	86 81       	ldd	r24, Z+6	; 0x06
    128e:	97 81       	ldd	r25, Z+7	; 0x07
    1290:	90 93 a7 01 	sts	0x01A7, r25
    1294:	80 93 a6 01 	sts	0x01A6, r24
				EXT_INT1_MODULE_ENABLE();
				break;
			case  EXT_INT2:
				GLOBAL_INT_ENABLE();
				Ext_INT2_init(Int);
				EXT_INT2_FLAG_CLEAR();
    1298:	8a b7       	in	r24, 0x3a	; 58
    129a:	80 62       	ori	r24, 0x20	; 32
    129c:	8a bf       	out	0x3a, r24	; 58
				EXT_INT2_MODULE_ENABLE();
    129e:	8b b7       	in	r24, 0x3b	; 59
    12a0:	80 62       	ori	r24, 0x20	; 32
    12a2:	8b bf       	out	0x3b, r24	; 59
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	08 95       	ret
				break;
    12a8:	80 e0       	ldi	r24, 0x00	; 0
			default:
				ret=E_NOK;
		}
	}
	return ret;
}
    12aa:	08 95       	ret

000012ac <INT0_ISR_>:

void INT0_ISR_()
{
	EXT_INT0_FLAG_CLEAR();
    12ac:	8a b7       	in	r24, 0x3a	; 58
    12ae:	80 64       	ori	r24, 0x40	; 64
    12b0:	8a bf       	out	0x3a, r24	; 58
	if(INT0_Callback_Ptr)
    12b2:	e0 91 a2 01 	lds	r30, 0x01A2
    12b6:	f0 91 a3 01 	lds	r31, 0x01A3
    12ba:	30 97       	sbiw	r30, 0x00	; 0
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <INT0_ISR_+0x14>
		INT0_Callback_Ptr();
    12be:	09 95       	icall
    12c0:	08 95       	ret

000012c2 <INT1_ISR_>:
}

void INT1_ISR_()
{
	EXT_INT1_FLAG_CLEAR();
    12c2:	8a b7       	in	r24, 0x3a	; 58
    12c4:	80 68       	ori	r24, 0x80	; 128
    12c6:	8a bf       	out	0x3a, r24	; 58
	if(INT1_Callback_Ptr)
    12c8:	e0 91 a4 01 	lds	r30, 0x01A4
    12cc:	f0 91 a5 01 	lds	r31, 0x01A5
    12d0:	30 97       	sbiw	r30, 0x00	; 0
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <INT1_ISR_+0x14>
		INT1_Callback_Ptr();
    12d4:	09 95       	icall
    12d6:	08 95       	ret

000012d8 <INT2_ISR_>:
}

void INT2_ISR_()
{
	EXT_INT2_FLAG_CLEAR();
    12d8:	8a b7       	in	r24, 0x3a	; 58
    12da:	80 62       	ori	r24, 0x20	; 32
    12dc:	8a bf       	out	0x3a, r24	; 58
	if(INT2_Callback_Ptr)
    12de:	e0 91 a6 01 	lds	r30, 0x01A6
    12e2:	f0 91 a7 01 	lds	r31, 0x01A7
    12e6:	30 97       	sbiw	r30, 0x00	; 0
    12e8:	09 f0       	breq	.+2      	; 0x12ec <INT2_ISR_+0x14>
		INT2_Callback_Ptr();
    12ea:	09 95       	icall
    12ec:	08 95       	ret

000012ee <__vector_1>:
}

ISR(INT0_vect)
{
    12ee:	1f 92       	push	r1
    12f0:	0f 92       	push	r0
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	0f 92       	push	r0
    12f6:	11 24       	eor	r1, r1
    12f8:	2f 93       	push	r18
    12fa:	3f 93       	push	r19
    12fc:	4f 93       	push	r20
    12fe:	5f 93       	push	r21
    1300:	6f 93       	push	r22
    1302:	7f 93       	push	r23
    1304:	8f 93       	push	r24
    1306:	9f 93       	push	r25
    1308:	af 93       	push	r26
    130a:	bf 93       	push	r27
    130c:	ef 93       	push	r30
    130e:	ff 93       	push	r31
	INT0_ISR_();
    1310:	0e 94 56 09 	call	0x12ac	; 0x12ac <INT0_ISR_>
}
    1314:	ff 91       	pop	r31
    1316:	ef 91       	pop	r30
    1318:	bf 91       	pop	r27
    131a:	af 91       	pop	r26
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	7f 91       	pop	r23
    1322:	6f 91       	pop	r22
    1324:	5f 91       	pop	r21
    1326:	4f 91       	pop	r20
    1328:	3f 91       	pop	r19
    132a:	2f 91       	pop	r18
    132c:	0f 90       	pop	r0
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	0f 90       	pop	r0
    1332:	1f 90       	pop	r1
    1334:	18 95       	reti

00001336 <__vector_2>:

ISR(INT1_vect)
{
    1336:	1f 92       	push	r1
    1338:	0f 92       	push	r0
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	0f 92       	push	r0
    133e:	11 24       	eor	r1, r1
    1340:	2f 93       	push	r18
    1342:	3f 93       	push	r19
    1344:	4f 93       	push	r20
    1346:	5f 93       	push	r21
    1348:	6f 93       	push	r22
    134a:	7f 93       	push	r23
    134c:	8f 93       	push	r24
    134e:	9f 93       	push	r25
    1350:	af 93       	push	r26
    1352:	bf 93       	push	r27
    1354:	ef 93       	push	r30
    1356:	ff 93       	push	r31
	INT1_ISR_();
    1358:	0e 94 61 09 	call	0x12c2	; 0x12c2 <INT1_ISR_>
}
    135c:	ff 91       	pop	r31
    135e:	ef 91       	pop	r30
    1360:	bf 91       	pop	r27
    1362:	af 91       	pop	r26
    1364:	9f 91       	pop	r25
    1366:	8f 91       	pop	r24
    1368:	7f 91       	pop	r23
    136a:	6f 91       	pop	r22
    136c:	5f 91       	pop	r21
    136e:	4f 91       	pop	r20
    1370:	3f 91       	pop	r19
    1372:	2f 91       	pop	r18
    1374:	0f 90       	pop	r0
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	0f 90       	pop	r0
    137a:	1f 90       	pop	r1
    137c:	18 95       	reti

0000137e <__vector_3>:

ISR(INT2_vect)
{
    137e:	1f 92       	push	r1
    1380:	0f 92       	push	r0
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	0f 92       	push	r0
    1386:	11 24       	eor	r1, r1
    1388:	2f 93       	push	r18
    138a:	3f 93       	push	r19
    138c:	4f 93       	push	r20
    138e:	5f 93       	push	r21
    1390:	6f 93       	push	r22
    1392:	7f 93       	push	r23
    1394:	8f 93       	push	r24
    1396:	9f 93       	push	r25
    1398:	af 93       	push	r26
    139a:	bf 93       	push	r27
    139c:	ef 93       	push	r30
    139e:	ff 93       	push	r31
	INT2_ISR_();
    13a0:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <INT2_ISR_>
}
    13a4:	ff 91       	pop	r31
    13a6:	ef 91       	pop	r30
    13a8:	bf 91       	pop	r27
    13aa:	af 91       	pop	r26
    13ac:	9f 91       	pop	r25
    13ae:	8f 91       	pop	r24
    13b0:	7f 91       	pop	r23
    13b2:	6f 91       	pop	r22
    13b4:	5f 91       	pop	r21
    13b6:	4f 91       	pop	r20
    13b8:	3f 91       	pop	r19
    13ba:	2f 91       	pop	r18
    13bc:	0f 90       	pop	r0
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	0f 90       	pop	r0
    13c2:	1f 90       	pop	r1
    13c4:	18 95       	reti

000013c6 <convert_int_to_Hex>:
        *(str+10)='\0';
    }
}

void convert_int_to_Hex(uint32 data,uint8 *str)
{
    13c6:	0f 93       	push	r16
    13c8:	1f 93       	push	r17
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	8b 01       	movw	r16, r22
    13d0:	9c 01       	movw	r18, r24
    13d2:	ea 01       	movw	r28, r20
	if (NULL == str)
    13d4:	41 15       	cp	r20, r1
    13d6:	51 05       	cpc	r21, r1
    13d8:	39 f1       	breq	.+78     	; 0x1428 <convert_int_to_Hex+0x62>
		return;
	else {
		memset(str, '\0', 11);
    13da:	8b e0       	ldi	r24, 0x0B	; 11
    13dc:	da 01       	movw	r26, r20
    13de:	1d 92       	st	X+, r1
    13e0:	8a 95       	dec	r24
    13e2:	e9 f7       	brne	.-6      	; 0x13de <convert_int_to_Hex+0x18>
		sprintf(str, "%X", data);
    13e4:	ed b7       	in	r30, 0x3d	; 61
    13e6:	fe b7       	in	r31, 0x3e	; 62
    13e8:	38 97       	sbiw	r30, 0x08	; 8
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	fe bf       	out	0x3e, r31	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	ed bf       	out	0x3d, r30	; 61
    13f4:	31 96       	adiw	r30, 0x01	; 1
    13f6:	ad b7       	in	r26, 0x3d	; 61
    13f8:	be b7       	in	r27, 0x3e	; 62
    13fa:	12 96       	adiw	r26, 0x02	; 2
    13fc:	5c 93       	st	X, r21
    13fe:	4e 93       	st	-X, r20
    1400:	11 97       	sbiw	r26, 0x01	; 1
    1402:	80 e6       	ldi	r24, 0x60	; 96
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	93 83       	std	Z+3, r25	; 0x03
    1408:	82 83       	std	Z+2, r24	; 0x02
    140a:	04 83       	std	Z+4, r16	; 0x04
    140c:	15 83       	std	Z+5, r17	; 0x05
    140e:	26 83       	std	Z+6, r18	; 0x06
    1410:	37 83       	std	Z+7, r19	; 0x07
    1412:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <sprintf>
		*(str + 10) = '\0';
    1416:	1a 86       	std	Y+10, r1	; 0x0a
    1418:	ed b7       	in	r30, 0x3d	; 61
    141a:	fe b7       	in	r31, 0x3e	; 62
    141c:	38 96       	adiw	r30, 0x08	; 8
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	fe bf       	out	0x3e, r31	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	ed bf       	out	0x3d, r30	; 61
	}
}
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	08 95       	ret

00001432 <convert_int_to_string>:
        strncat(str,"  ",2);
        *(str+5)='\0';
    }
}
void convert_int_to_string(uint32 data,uint8 *str)
{
    1432:	0f 93       	push	r16
    1434:	1f 93       	push	r17
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	8b 01       	movw	r16, r22
    143c:	9c 01       	movw	r18, r24
    143e:	ea 01       	movw	r28, r20
    if(NULL==str)
    1440:	41 15       	cp	r20, r1
    1442:	51 05       	cpc	r21, r1
    1444:	39 f1       	breq	.+78     	; 0x1494 <convert_int_to_string+0x62>
        return;
    else
    {
        memset(str,'\0',11);
    1446:	8b e0       	ldi	r24, 0x0B	; 11
    1448:	da 01       	movw	r26, r20
    144a:	1d 92       	st	X+, r1
    144c:	8a 95       	dec	r24
    144e:	e9 f7       	brne	.-6      	; 0x144a <convert_int_to_string+0x18>
        sprintf(str,"%i",data);
    1450:	ed b7       	in	r30, 0x3d	; 61
    1452:	fe b7       	in	r31, 0x3e	; 62
    1454:	38 97       	sbiw	r30, 0x08	; 8
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	fe bf       	out	0x3e, r31	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	ed bf       	out	0x3d, r30	; 61
    1460:	31 96       	adiw	r30, 0x01	; 1
    1462:	ad b7       	in	r26, 0x3d	; 61
    1464:	be b7       	in	r27, 0x3e	; 62
    1466:	12 96       	adiw	r26, 0x02	; 2
    1468:	5c 93       	st	X, r21
    146a:	4e 93       	st	-X, r20
    146c:	11 97       	sbiw	r26, 0x01	; 1
    146e:	83 e6       	ldi	r24, 0x63	; 99
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	93 83       	std	Z+3, r25	; 0x03
    1474:	82 83       	std	Z+2, r24	; 0x02
    1476:	04 83       	std	Z+4, r16	; 0x04
    1478:	15 83       	std	Z+5, r17	; 0x05
    147a:	26 83       	std	Z+6, r18	; 0x06
    147c:	37 83       	std	Z+7, r19	; 0x07
    147e:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <sprintf>
        *(str+10)='\0';
    1482:	1a 86       	std	Y+10, r1	; 0x0a
    1484:	ed b7       	in	r30, 0x3d	; 61
    1486:	fe b7       	in	r31, 0x3e	; 62
    1488:	38 96       	adiw	r30, 0x08	; 8
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	fe bf       	out	0x3e, r31	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	ed bf       	out	0x3d, r30	; 61
    }
}
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	1f 91       	pop	r17
    149a:	0f 91       	pop	r16
    149c:	08 95       	ret

0000149e <convert_short_to_string>:
        strncat(str,"     ",4);
        *(str+3)='\0';
    }
}
void convert_short_to_string(uint16 data,uint8 *str)
{
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    14a2:	9c 01       	movw	r18, r24
    14a4:	eb 01       	movw	r28, r22
    if(NULL==str)
    14a6:	61 15       	cp	r22, r1
    14a8:	71 05       	cpc	r23, r1
    14aa:	39 f1       	breq	.+78     	; 0x14fa <convert_short_to_string+0x5c>
        return;
    else
    {
        memset(str,'\0',6);
    14ac:	86 e0       	ldi	r24, 0x06	; 6
    14ae:	db 01       	movw	r26, r22
    14b0:	1d 92       	st	X+, r1
    14b2:	8a 95       	dec	r24
    14b4:	e9 f7       	brne	.-6      	; 0x14b0 <convert_short_to_string+0x12>
        sprintf(str,"%i",data);
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <convert_short_to_string+0x1a>
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <convert_short_to_string+0x1c>
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <convert_short_to_string+0x1e>
    14bc:	ed b7       	in	r30, 0x3d	; 61
    14be:	fe b7       	in	r31, 0x3e	; 62
    14c0:	31 96       	adiw	r30, 0x01	; 1
    14c2:	ad b7       	in	r26, 0x3d	; 61
    14c4:	be b7       	in	r27, 0x3e	; 62
    14c6:	12 96       	adiw	r26, 0x02	; 2
    14c8:	7c 93       	st	X, r23
    14ca:	6e 93       	st	-X, r22
    14cc:	11 97       	sbiw	r26, 0x01	; 1
    14ce:	83 e6       	ldi	r24, 0x63	; 99
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	93 83       	std	Z+3, r25	; 0x03
    14d4:	82 83       	std	Z+2, r24	; 0x02
    14d6:	35 83       	std	Z+5, r19	; 0x05
    14d8:	24 83       	std	Z+4, r18	; 0x04
    14da:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <sprintf>
        strncat(str,"  ",2);
    14de:	ed b7       	in	r30, 0x3d	; 61
    14e0:	fe b7       	in	r31, 0x3e	; 62
    14e2:	36 96       	adiw	r30, 0x06	; 6
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	fe bf       	out	0x3e, r31	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	ed bf       	out	0x3d, r30	; 61
    14ee:	ce 01       	movw	r24, r28
    14f0:	66 e6       	ldi	r22, 0x66	; 102
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <strcat>
        *(str+5)='\0';
    14f8:	1d 82       	std	Y+5, r1	; 0x05
    }
}
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	08 95       	ret

00001500 <convert_byte_to_string>:
	}
	return ret;
}

void convert_byte_to_string(uint8 data,uint8 *str)
{
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	28 2f       	mov	r18, r24
    1506:	eb 01       	movw	r28, r22
    if(NULL==str)
    1508:	61 15       	cp	r22, r1
    150a:	71 05       	cpc	r23, r1
    150c:	41 f1       	breq	.+80     	; 0x155e <convert_byte_to_string+0x5e>
        return;
    else
    {
        memset(str,'\0',4);
    150e:	18 82       	st	Y, r1
    1510:	19 82       	std	Y+1, r1	; 0x01
    1512:	1a 82       	std	Y+2, r1	; 0x02
    1514:	1b 82       	std	Y+3, r1	; 0x03
        sprintf(str,"%i",data);
    1516:	00 d0       	rcall	.+0      	; 0x1518 <convert_byte_to_string+0x18>
    1518:	00 d0       	rcall	.+0      	; 0x151a <convert_byte_to_string+0x1a>
    151a:	00 d0       	rcall	.+0      	; 0x151c <convert_byte_to_string+0x1c>
    151c:	ed b7       	in	r30, 0x3d	; 61
    151e:	fe b7       	in	r31, 0x3e	; 62
    1520:	31 96       	adiw	r30, 0x01	; 1
    1522:	ad b7       	in	r26, 0x3d	; 61
    1524:	be b7       	in	r27, 0x3e	; 62
    1526:	12 96       	adiw	r26, 0x02	; 2
    1528:	7c 93       	st	X, r23
    152a:	6e 93       	st	-X, r22
    152c:	11 97       	sbiw	r26, 0x01	; 1
    152e:	83 e6       	ldi	r24, 0x63	; 99
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	93 83       	std	Z+3, r25	; 0x03
    1534:	82 83       	std	Z+2, r24	; 0x02
    1536:	24 83       	std	Z+4, r18	; 0x04
    1538:	15 82       	std	Z+5, r1	; 0x05
    153a:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <sprintf>
        strncat(str,"     ",4);
    153e:	8d b7       	in	r24, 0x3d	; 61
    1540:	9e b7       	in	r25, 0x3e	; 62
    1542:	06 96       	adiw	r24, 0x06	; 6
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	9e bf       	out	0x3e, r25	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	8d bf       	out	0x3d, r24	; 61
    154e:	ce 01       	movw	r24, r28
    1550:	69 e6       	ldi	r22, 0x69	; 105
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	44 e0       	ldi	r20, 0x04	; 4
    1556:	50 e0       	ldi	r21, 0x00	; 0
    1558:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <strncat>
        *(str+3)='\0';
    155c:	1b 82       	std	Y+3, r1	; 0x03
    }
}
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	08 95       	ret

00001564 <LCD_ENABLE_8BITS>:
	}
	return ret;
}

static Bool LCD_ENABLE_8BITS(LCD_8BIT_t *LCD)
{
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
	Bool ret = E_OK;
	if (NULL == LCD)
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	11 f4       	brne	.+4      	; 0x1570 <LCD_ENABLE_8BITS+0xc>
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	0e c0       	rjmp	.+28     	; 0x158c <LCD_ENABLE_8BITS+0x28>
		ret = E_NOK;
	else {
		ret=GPIO_PIN_WRITE(&(LCD->LCD_E), GPIO_HIGH);
    1570:	8c 01       	movw	r16, r24
    1572:	0f 5f       	subi	r16, 0xFF	; 255
    1574:	1f 4f       	sbci	r17, 0xFF	; 255
    1576:	c8 01       	movw	r24, r16
    1578:	61 e0       	ldi	r22, 0x01	; 1
    157a:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	8a 95       	dec	r24
    1582:	f1 f7       	brne	.-4      	; 0x1580 <LCD_ENABLE_8BITS+0x1c>
		_delay_us(5);
		ret=GPIO_PIN_WRITE(&(LCD->LCD_E), GPIO_LOW);
    1584:	c8 01       	movw	r24, r16
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
	}
	return ret;
}
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	08 95       	ret

00001592 <LCD_8BIT_SEND_CMD>:
	ret = LCD_8BIT_SET_POS(LCD, row, col);
	ret = LCD_8BIT_SEND(LCD, data);
	return ret;
}
Bool LCD_8BIT_SEND_CMD(LCD_8BIT_t *LCD,uint8 Cmd)
{
    1592:	ef 92       	push	r14
    1594:	ff 92       	push	r15
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	8c 01       	movw	r16, r24
    15a0:	f6 2e       	mov	r15, r22
	Bool ret = E_OK;
	if (NULL == LCD)
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	11 f4       	brne	.+4      	; 0x15aa <LCD_8BIT_SEND_CMD+0x18>
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	21 c0       	rjmp	.+66     	; 0x15ec <LCD_8BIT_SEND_CMD+0x5a>
		ret = E_NOK;
	else {
		ret = GPIO_PIN_WRITE(&(LCD->LCD_RS), GPIO_LOW);
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
		ret = GPIO_PIN_WRITE(&(LCD->LCD_RW), GPIO_LOW);
    15b0:	c8 01       	movw	r24, r16
    15b2:	02 96       	adiw	r24, 0x02	; 2
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
    15ba:	c0 e0       	ldi	r28, 0x00	; 0
    15bc:	d0 e0       	ldi	r29, 0x00	; 0
	if (NULL == LCD)
		ret = E_NOK;
	else {
		uint8 LCD_PINS = 0;
		for (LCD_PINS = 0; LCD_PINS <= LCD_8BIT_PINS-1; LCD_PINS++)
			ret = GPIO_PIN_WRITE(&LCD->LCD_Data[LCD_PINS],
    15be:	ef 2c       	mov	r14, r15
    15c0:	ff 24       	eor	r15, r15
    15c2:	b7 01       	movw	r22, r14
    15c4:	0c 2e       	mov	r0, r28
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <LCD_8BIT_SEND_CMD+0x3a>
    15c8:	75 95       	asr	r23
    15ca:	67 95       	ror	r22
    15cc:	0a 94       	dec	r0
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <LCD_8BIT_SEND_CMD+0x36>
    15d0:	61 70       	andi	r22, 0x01	; 1
    15d2:	23 96       	adiw	r28, 0x03	; 3
    15d4:	c8 01       	movw	r24, r16
    15d6:	8c 0f       	add	r24, r28
    15d8:	9d 1f       	adc	r25, r29
    15da:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
    15de:	22 97       	sbiw	r28, 0x02	; 2
	Bool ret = E_OK;
	if (NULL == LCD)
		ret = E_NOK;
	else {
		uint8 LCD_PINS = 0;
		for (LCD_PINS = 0; LCD_PINS <= LCD_8BIT_PINS-1; LCD_PINS++)
    15e0:	c8 30       	cpi	r28, 0x08	; 8
    15e2:	d1 05       	cpc	r29, r1
    15e4:	71 f7       	brne	.-36     	; 0x15c2 <LCD_8BIT_SEND_CMD+0x30>
		ret = E_NOK;
	else {
		ret = GPIO_PIN_WRITE(&(LCD->LCD_RS), GPIO_LOW);
		ret = GPIO_PIN_WRITE(&(LCD->LCD_RW), GPIO_LOW);
		ret = LCD_SEND_8BITS(LCD, Cmd);
		ret = LCD_ENABLE_8BITS(LCD);
    15e6:	c8 01       	movw	r24, r16
    15e8:	0e 94 b2 0a 	call	0x1564	; 0x1564 <LCD_ENABLE_8BITS>
	}
	return ret;
}
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	ff 90       	pop	r15
    15f6:	ef 90       	pop	r14
    15f8:	08 95       	ret

000015fa <LCD_8BIT_SET_POS>:
}

Bool LCD_8BIT_SET_POS(LCD_8BIT_t *LCD,uint8 row,uint8 col)
{
	Bool ret = E_OK;
	if (NULL == LCD)
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	b9 f0       	breq	.+46     	; 0x162c <LCD_8BIT_SET_POS+0x32>
		ret = E_NOK;
	else {
		switch (row) {
    15fe:	62 30       	cpi	r22, 0x02	; 2
    1600:	61 f0       	breq	.+24     	; 0x161a <LCD_8BIT_SET_POS+0x20>
    1602:	63 30       	cpi	r22, 0x03	; 3
    1604:	18 f4       	brcc	.+6      	; 0x160c <LCD_8BIT_SET_POS+0x12>
    1606:	61 30       	cpi	r22, 0x01	; 1
    1608:	89 f4       	brne	.+34     	; 0x162c <LCD_8BIT_SET_POS+0x32>
    160a:	05 c0       	rjmp	.+10     	; 0x1616 <LCD_8BIT_SET_POS+0x1c>
    160c:	63 30       	cpi	r22, 0x03	; 3
    160e:	39 f0       	breq	.+14     	; 0x161e <LCD_8BIT_SET_POS+0x24>
    1610:	64 30       	cpi	r22, 0x04	; 4
    1612:	61 f4       	brne	.+24     	; 0x162c <LCD_8BIT_SET_POS+0x32>
    1614:	06 c0       	rjmp	.+12     	; 0x1622 <LCD_8BIT_SET_POS+0x28>
		case ROW1:
			ret = LCD_8BIT_SEND_CMD(LCD,
    1616:	40 58       	subi	r20, 0x80	; 128
    1618:	05 c0       	rjmp	.+10     	; 0x1624 <LCD_8BIT_SET_POS+0x2a>
					(LCD_SET_DDRAM_ADD | ROW1_ADDRESS) + col);
			break;
		case ROW2:
			ret = LCD_8BIT_SEND_CMD(LCD,
    161a:	40 54       	subi	r20, 0x40	; 64
    161c:	03 c0       	rjmp	.+6      	; 0x1624 <LCD_8BIT_SET_POS+0x2a>
					(LCD_SET_DDRAM_ADD | ROW2_ADDRESS) + col);
			break;
		case ROW3:
			ret = LCD_8BIT_SEND_CMD(LCD,
    161e:	4c 56       	subi	r20, 0x6C	; 108
    1620:	01 c0       	rjmp	.+2      	; 0x1624 <LCD_8BIT_SET_POS+0x2a>
					(LCD_SET_DDRAM_ADD | ROW3_ADDRESS) + col);
			break;
		case ROW4:
			ret = LCD_8BIT_SEND_CMD(LCD,
    1622:	4c 52       	subi	r20, 0x2C	; 44
    1624:	64 2f       	mov	r22, r20
    1626:	0e 94 c9 0a 	call	0x1592	; 0x1592 <LCD_8BIT_SEND_CMD>
    162a:	08 95       	ret
					(LCD_SET_DDRAM_ADD | ROW4_ADDRESS) + col);
			break;
    162c:	80 e0       	ldi	r24, 0x00	; 0
		default:
			ret = E_NOK;
		}
	}
	return ret;
}
    162e:	08 95       	ret

00001630 <LCD_8BIT_SEND>:
	}
	return ret;
}

Bool LCD_8BIT_SEND(LCD_8BIT_t *LCD,uint8 data)
{
    1630:	ef 92       	push	r14
    1632:	ff 92       	push	r15
    1634:	0f 93       	push	r16
    1636:	1f 93       	push	r17
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	8c 01       	movw	r16, r24
    163e:	f6 2e       	mov	r15, r22
	Bool ret = E_OK;
	if (NULL == LCD)
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	11 f4       	brne	.+4      	; 0x1648 <LCD_8BIT_SEND+0x18>
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	21 c0       	rjmp	.+66     	; 0x168a <LCD_8BIT_SEND+0x5a>
		ret = E_NOK;
	else {
		ret = GPIO_PIN_WRITE(&(LCD->LCD_RS), GPIO_HIGH);
    1648:	61 e0       	ldi	r22, 0x01	; 1
    164a:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
		ret = GPIO_PIN_WRITE(&(LCD->LCD_RW), GPIO_LOW);
    164e:	c8 01       	movw	r24, r16
    1650:	02 96       	adiw	r24, 0x02	; 2
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
    1658:	c0 e0       	ldi	r28, 0x00	; 0
    165a:	d0 e0       	ldi	r29, 0x00	; 0
	if (NULL == LCD)
		ret = E_NOK;
	else {
		uint8 LCD_PINS = 0;
		for (LCD_PINS = 0; LCD_PINS <= LCD_8BIT_PINS-1; LCD_PINS++)
			ret = GPIO_PIN_WRITE(&LCD->LCD_Data[LCD_PINS],
    165c:	ef 2c       	mov	r14, r15
    165e:	ff 24       	eor	r15, r15
    1660:	b7 01       	movw	r22, r14
    1662:	0c 2e       	mov	r0, r28
    1664:	02 c0       	rjmp	.+4      	; 0x166a <LCD_8BIT_SEND+0x3a>
    1666:	75 95       	asr	r23
    1668:	67 95       	ror	r22
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <LCD_8BIT_SEND+0x36>
    166e:	61 70       	andi	r22, 0x01	; 1
    1670:	23 96       	adiw	r28, 0x03	; 3
    1672:	c8 01       	movw	r24, r16
    1674:	8c 0f       	add	r24, r28
    1676:	9d 1f       	adc	r25, r29
    1678:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
    167c:	22 97       	sbiw	r28, 0x02	; 2
	Bool ret = E_OK;
	if (NULL == LCD)
		ret = E_NOK;
	else {
		uint8 LCD_PINS = 0;
		for (LCD_PINS = 0; LCD_PINS <= LCD_8BIT_PINS-1; LCD_PINS++)
    167e:	c8 30       	cpi	r28, 0x08	; 8
    1680:	d1 05       	cpc	r29, r1
    1682:	71 f7       	brne	.-36     	; 0x1660 <LCD_8BIT_SEND+0x30>
		ret = E_NOK;
	else {
		ret = GPIO_PIN_WRITE(&(LCD->LCD_RS), GPIO_HIGH);
		ret = GPIO_PIN_WRITE(&(LCD->LCD_RW), GPIO_LOW);
		ret = LCD_SEND_8BITS(LCD, data);
		ret = LCD_ENABLE_8BITS(LCD);
    1684:	c8 01       	movw	r24, r16
    1686:	0e 94 b2 0a 	call	0x1564	; 0x1564 <LCD_ENABLE_8BITS>
	}
	return ret;
}
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	1f 91       	pop	r17
    1690:	0f 91       	pop	r16
    1692:	ff 90       	pop	r15
    1694:	ef 90       	pop	r14
    1696:	08 95       	ret

00001698 <LCD_8BIT_SEND_STRING>:
		ret = LCD_ENABLE_8BITS(LCD);
	}
	return ret;
}
Bool LCD_8BIT_SEND_STRING(LCD_8BIT_t *LCD,uint8 *str)
{
    1698:	ef 92       	push	r14
    169a:	ff 92       	push	r15
    169c:	1f 93       	push	r17
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	ec 01       	movw	r28, r24
    16a4:	7b 01       	movw	r14, r22
	Bool ret = E_OK;
	if (NULL == LCD)
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	11 f4       	brne	.+4      	; 0x16ae <LCD_8BIT_SEND_STRING+0x16>
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	0d c0       	rjmp	.+26     	; 0x16c8 <LCD_8BIT_SEND_STRING+0x30>
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	10 e0       	ldi	r17, 0x00	; 0
    16b2:	04 c0       	rjmp	.+8      	; 0x16bc <LCD_8BIT_SEND_STRING+0x24>
		ret = E_NOK;
	else {
		uint8 Char_pos = 0;
		while (*(str + Char_pos) != '\0') {
			ret = LCD_8BIT_SEND(LCD, *(str + Char_pos));
    16b4:	ce 01       	movw	r24, r28
    16b6:	0e 94 18 0b 	call	0x1630	; 0x1630 <LCD_8BIT_SEND>
			Char_pos++;
    16ba:	1f 5f       	subi	r17, 0xFF	; 255
	Bool ret = E_OK;
	if (NULL == LCD)
		ret = E_NOK;
	else {
		uint8 Char_pos = 0;
		while (*(str + Char_pos) != '\0') {
    16bc:	f7 01       	movw	r30, r14
    16be:	e1 0f       	add	r30, r17
    16c0:	f1 1d       	adc	r31, r1
    16c2:	60 81       	ld	r22, Z
    16c4:	66 23       	and	r22, r22
    16c6:	b1 f7       	brne	.-20     	; 0x16b4 <LCD_8BIT_SEND_STRING+0x1c>
			ret = LCD_8BIT_SEND(LCD, *(str + Char_pos));
			Char_pos++;
		}
	}
	return ret;
}
    16c8:	df 91       	pop	r29
    16ca:	cf 91       	pop	r28
    16cc:	1f 91       	pop	r17
    16ce:	ff 90       	pop	r15
    16d0:	ef 90       	pop	r14
    16d2:	08 95       	ret

000016d4 <LCD_8BIT_SEND_STRING_POS>:

Bool LCD_8BIT_SEND_STRING_POS(LCD_8BIT_t *LCD,uint8 *str,uint8 row,uint8 col)
{
    16d4:	ef 92       	push	r14
    16d6:	ff 92       	push	r15
    16d8:	0f 93       	push	r16
    16da:	1f 93       	push	r17
    16dc:	8c 01       	movw	r16, r24
    16de:	7b 01       	movw	r14, r22
	Bool ret = E_OK;
	ret = LCD_8BIT_SET_POS(LCD, row, col);
    16e0:	64 2f       	mov	r22, r20
    16e2:	42 2f       	mov	r20, r18
    16e4:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_8BIT_SET_POS>
	ret = LCD_8BIT_SEND_STRING(LCD, str);
    16e8:	c8 01       	movw	r24, r16
    16ea:	b7 01       	movw	r22, r14
    16ec:	0e 94 4c 0b 	call	0x1698	; 0x1698 <LCD_8BIT_SEND_STRING>
	return ret;
}
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	ff 90       	pop	r15
    16f6:	ef 90       	pop	r14
    16f8:	08 95       	ret

000016fa <LCD_8BIT_SEND_POS>:
	}
	return ret;
}

Bool LCD_8BIT_SEND_POS(LCD_8BIT_t *LCD,uint8 data,uint8 row,uint8 col)
{
    16fa:	ff 92       	push	r15
    16fc:	0f 93       	push	r16
    16fe:	1f 93       	push	r17
    1700:	8c 01       	movw	r16, r24
    1702:	f6 2e       	mov	r15, r22
	Bool ret = E_OK;
	ret = LCD_8BIT_SET_POS(LCD, row, col);
    1704:	64 2f       	mov	r22, r20
    1706:	42 2f       	mov	r20, r18
    1708:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_8BIT_SET_POS>
	ret = LCD_8BIT_SEND(LCD, data);
    170c:	c8 01       	movw	r24, r16
    170e:	6f 2d       	mov	r22, r15
    1710:	0e 94 18 0b 	call	0x1630	; 0x1630 <LCD_8BIT_SEND>
	return ret;
}
    1714:	1f 91       	pop	r17
    1716:	0f 91       	pop	r16
    1718:	ff 90       	pop	r15
    171a:	08 95       	ret

0000171c <LCD_8bit_send_custom_character>:
		}
	}
	return ret;
}
Bool LCD_8bit_send_custom_character(LCD_8BIT_t *LCD,uint8 row,uint8 col,const uint8 data[],uint8 mem_pos)
{
    171c:	bf 92       	push	r11
    171e:	cf 92       	push	r12
    1720:	df 92       	push	r13
    1722:	ef 92       	push	r14
    1724:	ff 92       	push	r15
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	7c 01       	movw	r14, r24
    1730:	16 2f       	mov	r17, r22
    1732:	b4 2e       	mov	r11, r20
    1734:	69 01       	movw	r12, r18
	Bool ret = E_OK;
	if (NULL == LCD)
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	11 f4       	brne	.+4      	; 0x173e <LCD_8bit_send_custom_character+0x22>
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	1f c0       	rjmp	.+62     	; 0x177c <LCD_8bit_send_custom_character+0x60>
		ret = E_NOK;
	else {
		uint8 Byte_pos = 0;
		ret = LCD_8BIT_SEND_CMD(LCD, LCD_SET_CGRAM_ADD + 8 * (mem_pos));
    173e:	60 2f       	mov	r22, r16
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	68 5f       	subi	r22, 0xF8	; 248
    1744:	7f 4f       	sbci	r23, 0xFF	; 255
    1746:	83 e0       	ldi	r24, 0x03	; 3
    1748:	66 0f       	add	r22, r22
    174a:	77 1f       	adc	r23, r23
    174c:	8a 95       	dec	r24
    174e:	e1 f7       	brne	.-8      	; 0x1748 <LCD_8bit_send_custom_character+0x2c>
    1750:	c7 01       	movw	r24, r14
    1752:	0e 94 c9 0a 	call	0x1592	; 0x1592 <LCD_8BIT_SEND_CMD>
    1756:	c0 e0       	ldi	r28, 0x00	; 0
    1758:	d0 e0       	ldi	r29, 0x00	; 0
		for (Byte_pos = 0; Byte_pos <= 7; Byte_pos++)
			ret = LCD_8BIT_SEND(LCD, data[Byte_pos]);
    175a:	f6 01       	movw	r30, r12
    175c:	ec 0f       	add	r30, r28
    175e:	fd 1f       	adc	r31, r29
    1760:	c7 01       	movw	r24, r14
    1762:	60 81       	ld	r22, Z
    1764:	0e 94 18 0b 	call	0x1630	; 0x1630 <LCD_8BIT_SEND>
    1768:	21 96       	adiw	r28, 0x01	; 1
	if (NULL == LCD)
		ret = E_NOK;
	else {
		uint8 Byte_pos = 0;
		ret = LCD_8BIT_SEND_CMD(LCD, LCD_SET_CGRAM_ADD + 8 * (mem_pos));
		for (Byte_pos = 0; Byte_pos <= 7; Byte_pos++)
    176a:	c8 30       	cpi	r28, 0x08	; 8
    176c:	d1 05       	cpc	r29, r1
    176e:	a9 f7       	brne	.-22     	; 0x175a <LCD_8bit_send_custom_character+0x3e>
			ret = LCD_8BIT_SEND(LCD, data[Byte_pos]);
		ret = LCD_8BIT_SEND_POS(LCD, mem_pos, row, col);
    1770:	c7 01       	movw	r24, r14
    1772:	60 2f       	mov	r22, r16
    1774:	41 2f       	mov	r20, r17
    1776:	2b 2d       	mov	r18, r11
    1778:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_8BIT_SEND_POS>
	}
	return ret;
}
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	ff 90       	pop	r15
    1786:	ef 90       	pop	r14
    1788:	df 90       	pop	r13
    178a:	cf 90       	pop	r12
    178c:	bf 90       	pop	r11
    178e:	08 95       	ret

00001790 <LCD_SEND_4BITS>:
 */
#include "LCD.h"
#include <string.h>

static Bool LCD_SEND_4BITS(LCD_4BIT_t *LCD,uint8 CMD)
{
    1790:	0f 93       	push	r16
    1792:	1f 93       	push	r17
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	ec 01       	movw	r28, r24
	Bool ret=E_OK;
	if(NULL==LCD)
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	11 f4       	brne	.+4      	; 0x17a2 <LCD_SEND_4BITS+0x12>
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	1e c0       	rjmp	.+60     	; 0x17de <LCD_SEND_4BITS+0x4e>
		ret=E_NOK;
	else
	{
		uint8 LCD_PINS=0;
		for(LCD_PINS=0;LCD_PINS<=LCD_4BIT_PINS-1;LCD_PINS++)
			ret=GPIO_PIN_WRITE(&LCD->LCD_Data[LCD_PINS],((CMD>>LCD_PINS)&BIT_MASK));
    17a2:	06 2f       	mov	r16, r22
    17a4:	10 e0       	ldi	r17, 0x00	; 0
    17a6:	61 70       	andi	r22, 0x01	; 1
    17a8:	03 96       	adiw	r24, 0x03	; 3
    17aa:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
    17ae:	15 95       	asr	r17
    17b0:	07 95       	ror	r16
    17b2:	60 2f       	mov	r22, r16
    17b4:	61 70       	andi	r22, 0x01	; 1
    17b6:	ce 01       	movw	r24, r28
    17b8:	04 96       	adiw	r24, 0x04	; 4
    17ba:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
    17be:	15 95       	asr	r17
    17c0:	07 95       	ror	r16
    17c2:	60 2f       	mov	r22, r16
    17c4:	61 70       	andi	r22, 0x01	; 1
    17c6:	ce 01       	movw	r24, r28
    17c8:	05 96       	adiw	r24, 0x05	; 5
    17ca:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
    17ce:	15 95       	asr	r17
    17d0:	07 95       	ror	r16
    17d2:	01 70       	andi	r16, 0x01	; 1
    17d4:	ce 01       	movw	r24, r28
    17d6:	06 96       	adiw	r24, 0x06	; 6
    17d8:	60 2f       	mov	r22, r16
    17da:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
	}
	return ret;
}
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	1f 91       	pop	r17
    17e4:	0f 91       	pop	r16
    17e6:	08 95       	ret

000017e8 <LCD_ENABLE_4BITS>:
	}
	return ret;
}

static Bool LCD_ENABLE_4BITS(LCD_4BIT_t *LCD)
{
    17e8:	0f 93       	push	r16
    17ea:	1f 93       	push	r17
	Bool ret = E_OK;
	if (NULL == LCD)
    17ec:	00 97       	sbiw	r24, 0x00	; 0
    17ee:	11 f4       	brne	.+4      	; 0x17f4 <LCD_ENABLE_4BITS+0xc>
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	0e c0       	rjmp	.+28     	; 0x1810 <LCD_ENABLE_4BITS+0x28>
		ret = E_NOK;
	else {
		ret=GPIO_PIN_WRITE(&(LCD->LCD_E),GPIO_HIGH);
    17f4:	8c 01       	movw	r16, r24
    17f6:	0f 5f       	subi	r16, 0xFF	; 255
    17f8:	1f 4f       	sbci	r17, 0xFF	; 255
    17fa:	c8 01       	movw	r24, r16
    17fc:	61 e0       	ldi	r22, 0x01	; 1
    17fe:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	8a 95       	dec	r24
    1806:	f1 f7       	brne	.-4      	; 0x1804 <LCD_ENABLE_4BITS+0x1c>
		_delay_us(5);
		ret=GPIO_PIN_WRITE(&(LCD->LCD_E),GPIO_LOW);
    1808:	c8 01       	movw	r24, r16
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
	}
	return ret;
}
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	08 95       	ret

00001816 <LCD_4BIT_SEND_CMD>:
	}
	return ret;
}

Bool LCD_4BIT_SEND_CMD(LCD_4BIT_t *LCD,uint8 Cmd)
{
    1816:	1f 93       	push	r17
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	ec 01       	movw	r28, r24
    181e:	16 2f       	mov	r17, r22
	Bool ret = E_OK;
	if (NULL == LCD)
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	11 f4       	brne	.+4      	; 0x1828 <LCD_4BIT_SEND_CMD+0x12>
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	19 c0       	rjmp	.+50     	; 0x185a <LCD_4BIT_SEND_CMD+0x44>
		ret = E_NOK;
	else {
		ret=GPIO_PIN_WRITE(&(LCD->LCD_RS),GPIO_LOW);
    1828:	60 e0       	ldi	r22, 0x00	; 0
    182a:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
		ret=GPIO_PIN_WRITE(&(LCD->LCD_RW),GPIO_LOW);
    182e:	ce 01       	movw	r24, r28
    1830:	02 96       	adiw	r24, 0x02	; 2
    1832:	60 e0       	ldi	r22, 0x00	; 0
    1834:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
		ret=LCD_SEND_4BITS(LCD,Cmd>>LCD_4BIT_PINS);
    1838:	61 2f       	mov	r22, r17
    183a:	62 95       	swap	r22
    183c:	6f 70       	andi	r22, 0x0F	; 15
    183e:	ce 01       	movw	r24, r28
    1840:	0e 94 c8 0b 	call	0x1790	; 0x1790 <LCD_SEND_4BITS>
		ret=LCD_ENABLE_4BITS(LCD);
    1844:	ce 01       	movw	r24, r28
    1846:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <LCD_ENABLE_4BITS>
		ret=LCD_SEND_4BITS(LCD,Cmd&0x0F);
    184a:	1f 70       	andi	r17, 0x0F	; 15
    184c:	ce 01       	movw	r24, r28
    184e:	61 2f       	mov	r22, r17
    1850:	0e 94 c8 0b 	call	0x1790	; 0x1790 <LCD_SEND_4BITS>
		ret=LCD_ENABLE_4BITS(LCD);
    1854:	ce 01       	movw	r24, r28
    1856:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <LCD_ENABLE_4BITS>
	}
	return ret;
}
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	1f 91       	pop	r17
    1860:	08 95       	ret

00001862 <LCD_4BIT_SET_POS>:
}

Bool LCD_4BIT_SET_POS(LCD_4BIT_t *LCD,uint8 row,uint8 col)
{
	Bool ret = E_OK;
	if (NULL == LCD)
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	b9 f0       	breq	.+46     	; 0x1894 <LCD_4BIT_SET_POS+0x32>
		ret = E_NOK;
	else {
		switch(row)
    1866:	62 30       	cpi	r22, 0x02	; 2
    1868:	61 f0       	breq	.+24     	; 0x1882 <LCD_4BIT_SET_POS+0x20>
    186a:	63 30       	cpi	r22, 0x03	; 3
    186c:	18 f4       	brcc	.+6      	; 0x1874 <LCD_4BIT_SET_POS+0x12>
    186e:	61 30       	cpi	r22, 0x01	; 1
    1870:	89 f4       	brne	.+34     	; 0x1894 <LCD_4BIT_SET_POS+0x32>
    1872:	05 c0       	rjmp	.+10     	; 0x187e <LCD_4BIT_SET_POS+0x1c>
    1874:	63 30       	cpi	r22, 0x03	; 3
    1876:	39 f0       	breq	.+14     	; 0x1886 <LCD_4BIT_SET_POS+0x24>
    1878:	64 30       	cpi	r22, 0x04	; 4
    187a:	61 f4       	brne	.+24     	; 0x1894 <LCD_4BIT_SET_POS+0x32>
    187c:	06 c0       	rjmp	.+12     	; 0x188a <LCD_4BIT_SET_POS+0x28>
		{
			case ROW1:
				ret=LCD_4BIT_SEND_CMD(LCD,(LCD_SET_DDRAM_ADD|ROW1_ADDRESS)+col);
    187e:	40 58       	subi	r20, 0x80	; 128
    1880:	05 c0       	rjmp	.+10     	; 0x188c <LCD_4BIT_SET_POS+0x2a>
				break;
			case ROW2:
				ret=LCD_4BIT_SEND_CMD(LCD,(LCD_SET_DDRAM_ADD|ROW2_ADDRESS)+col);
    1882:	40 54       	subi	r20, 0x40	; 64
    1884:	03 c0       	rjmp	.+6      	; 0x188c <LCD_4BIT_SET_POS+0x2a>
				break;
			case ROW3:
				ret=LCD_4BIT_SEND_CMD(LCD,(LCD_SET_DDRAM_ADD|ROW3_ADDRESS)+col);
    1886:	4c 56       	subi	r20, 0x6C	; 108
    1888:	01 c0       	rjmp	.+2      	; 0x188c <LCD_4BIT_SET_POS+0x2a>
				break;
			case ROW4:
				ret=LCD_4BIT_SEND_CMD(LCD,(LCD_SET_DDRAM_ADD|ROW4_ADDRESS)+col);
    188a:	4c 52       	subi	r20, 0x2C	; 44
    188c:	64 2f       	mov	r22, r20
    188e:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_4BIT_SEND_CMD>
    1892:	08 95       	ret
				break;
    1894:	80 e0       	ldi	r24, 0x00	; 0
			default:
				ret=E_NOK;
		}
	}
	return ret;
}
    1896:	08 95       	ret

00001898 <LCD_4BIT_SEND>:
	}
	return ret;
}

Bool LCD_4BIT_SEND(LCD_4BIT_t *LCD,uint8 data)
{
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	ec 01       	movw	r28, r24
    18a0:	16 2f       	mov	r17, r22
	Bool ret = E_OK;
	if (NULL == LCD)
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	11 f4       	brne	.+4      	; 0x18aa <LCD_4BIT_SEND+0x12>
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	19 c0       	rjmp	.+50     	; 0x18dc <LCD_4BIT_SEND+0x44>
		ret = E_NOK;
	else
	{
		ret=GPIO_PIN_WRITE(&(LCD->LCD_RS),GPIO_HIGH);
    18aa:	61 e0       	ldi	r22, 0x01	; 1
    18ac:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
		ret=GPIO_PIN_WRITE(&(LCD->LCD_RW),GPIO_LOW);
    18b0:	ce 01       	movw	r24, r28
    18b2:	02 96       	adiw	r24, 0x02	; 2
    18b4:	60 e0       	ldi	r22, 0x00	; 0
    18b6:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
		ret = LCD_SEND_4BITS(LCD, data >> LCD_4BIT_PINS);
    18ba:	61 2f       	mov	r22, r17
    18bc:	62 95       	swap	r22
    18be:	6f 70       	andi	r22, 0x0F	; 15
    18c0:	ce 01       	movw	r24, r28
    18c2:	0e 94 c8 0b 	call	0x1790	; 0x1790 <LCD_SEND_4BITS>
		ret = LCD_ENABLE_4BITS(LCD);
    18c6:	ce 01       	movw	r24, r28
    18c8:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <LCD_ENABLE_4BITS>
		ret = LCD_SEND_4BITS(LCD, data & 0x0F);
    18cc:	1f 70       	andi	r17, 0x0F	; 15
    18ce:	ce 01       	movw	r24, r28
    18d0:	61 2f       	mov	r22, r17
    18d2:	0e 94 c8 0b 	call	0x1790	; 0x1790 <LCD_SEND_4BITS>
		ret = LCD_ENABLE_4BITS(LCD);
    18d6:	ce 01       	movw	r24, r28
    18d8:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <LCD_ENABLE_4BITS>
	}
	return ret;
}
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	1f 91       	pop	r17
    18e2:	08 95       	ret

000018e4 <LCD_4BIT_SEND_POS>:
	ret=LCD_4BIT_SEND_STRING(LCD,str);
	return ret;
}

Bool LCD_4BIT_SEND_POS(LCD_4BIT_t *LCD,uint8 data,uint8 row,uint8 col)
{
    18e4:	ff 92       	push	r15
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	8c 01       	movw	r16, r24
    18ec:	f6 2e       	mov	r15, r22
	Bool ret = E_OK;
	ret=LCD_4BIT_SET_POS(LCD,row,col);
    18ee:	64 2f       	mov	r22, r20
    18f0:	42 2f       	mov	r20, r18
    18f2:	0e 94 31 0c 	call	0x1862	; 0x1862 <LCD_4BIT_SET_POS>
	ret=LCD_4BIT_SEND(LCD,data);
    18f6:	c8 01       	movw	r24, r16
    18f8:	6f 2d       	mov	r22, r15
    18fa:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_4BIT_SEND>
	return ret;
}
    18fe:	1f 91       	pop	r17
    1900:	0f 91       	pop	r16
    1902:	ff 90       	pop	r15
    1904:	08 95       	ret

00001906 <LCD_4bit_send_custom_character>:

Bool LCD_4bit_send_custom_character(LCD_4BIT_t *LCD,uint8 row,uint8 col,const uint8 data[],uint8 mem_pos)
{
    1906:	bf 92       	push	r11
    1908:	cf 92       	push	r12
    190a:	df 92       	push	r13
    190c:	ef 92       	push	r14
    190e:	ff 92       	push	r15
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	7c 01       	movw	r14, r24
    191a:	16 2f       	mov	r17, r22
    191c:	b4 2e       	mov	r11, r20
    191e:	69 01       	movw	r12, r18
	Bool ret = E_OK;
	if (NULL == LCD)
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	11 f4       	brne	.+4      	; 0x1928 <LCD_4bit_send_custom_character+0x22>
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	1e c0       	rjmp	.+60     	; 0x1964 <LCD_4bit_send_custom_character+0x5e>
		ret = E_NOK;
	else {
		uint8 Byte_pos=0;
		ret=LCD_4BIT_SEND_CMD(LCD,LCD_SET_CGRAM_ADD+8*(mem_pos));
    1928:	60 2f       	mov	r22, r16
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	68 5f       	subi	r22, 0xF8	; 248
    192e:	7f 4f       	sbci	r23, 0xFF	; 255
    1930:	43 e0       	ldi	r20, 0x03	; 3
    1932:	66 0f       	add	r22, r22
    1934:	77 1f       	adc	r23, r23
    1936:	4a 95       	dec	r20
    1938:	e1 f7       	brne	.-8      	; 0x1932 <LCD_4bit_send_custom_character+0x2c>
    193a:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_4BIT_SEND_CMD>
    193e:	c0 e0       	ldi	r28, 0x00	; 0
    1940:	d0 e0       	ldi	r29, 0x00	; 0
		for(Byte_pos=0;Byte_pos<=7;Byte_pos++)
			ret=LCD_4BIT_SEND(LCD,data[Byte_pos]);
    1942:	f6 01       	movw	r30, r12
    1944:	ec 0f       	add	r30, r28
    1946:	fd 1f       	adc	r31, r29
    1948:	c7 01       	movw	r24, r14
    194a:	60 81       	ld	r22, Z
    194c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_4BIT_SEND>
    1950:	21 96       	adiw	r28, 0x01	; 1
	if (NULL == LCD)
		ret = E_NOK;
	else {
		uint8 Byte_pos=0;
		ret=LCD_4BIT_SEND_CMD(LCD,LCD_SET_CGRAM_ADD+8*(mem_pos));
		for(Byte_pos=0;Byte_pos<=7;Byte_pos++)
    1952:	c8 30       	cpi	r28, 0x08	; 8
    1954:	d1 05       	cpc	r29, r1
    1956:	a9 f7       	brne	.-22     	; 0x1942 <LCD_4bit_send_custom_character+0x3c>
			ret=LCD_4BIT_SEND(LCD,data[Byte_pos]);
		ret=LCD_4BIT_SEND_POS(LCD,mem_pos,row,col);
    1958:	c7 01       	movw	r24, r14
    195a:	60 2f       	mov	r22, r16
    195c:	41 2f       	mov	r20, r17
    195e:	2b 2d       	mov	r18, r11
    1960:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_4BIT_SEND_POS>
	}
	return ret;
}
    1964:	df 91       	pop	r29
    1966:	cf 91       	pop	r28
    1968:	1f 91       	pop	r17
    196a:	0f 91       	pop	r16
    196c:	ff 90       	pop	r15
    196e:	ef 90       	pop	r14
    1970:	df 90       	pop	r13
    1972:	cf 90       	pop	r12
    1974:	bf 90       	pop	r11
    1976:	08 95       	ret

00001978 <LCD_4BIT_SEND_STRING>:
	}
	return ret;
}

Bool LCD_4BIT_SEND_STRING(LCD_4BIT_t *LCD,uint8 *str)
{
    1978:	ef 92       	push	r14
    197a:	ff 92       	push	r15
    197c:	1f 93       	push	r17
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29
    1982:	ec 01       	movw	r28, r24
    1984:	7b 01       	movw	r14, r22
	Bool ret = E_OK;
	if (NULL == LCD)
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	11 f4       	brne	.+4      	; 0x198e <LCD_4BIT_SEND_STRING+0x16>
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	0d c0       	rjmp	.+26     	; 0x19a8 <LCD_4BIT_SEND_STRING+0x30>
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	10 e0       	ldi	r17, 0x00	; 0
    1992:	04 c0       	rjmp	.+8      	; 0x199c <LCD_4BIT_SEND_STRING+0x24>
		ret = E_NOK;
	else {
		uint8 Char_pos=0;
		while(*(str+Char_pos)!='\0')
		{
			ret=LCD_4BIT_SEND(LCD,*(str+Char_pos));
    1994:	ce 01       	movw	r24, r28
    1996:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_4BIT_SEND>
			Char_pos++;
    199a:	1f 5f       	subi	r17, 0xFF	; 255
	Bool ret = E_OK;
	if (NULL == LCD)
		ret = E_NOK;
	else {
		uint8 Char_pos=0;
		while(*(str+Char_pos)!='\0')
    199c:	f7 01       	movw	r30, r14
    199e:	e1 0f       	add	r30, r17
    19a0:	f1 1d       	adc	r31, r1
    19a2:	60 81       	ld	r22, Z
    19a4:	66 23       	and	r22, r22
    19a6:	b1 f7       	brne	.-20     	; 0x1994 <LCD_4BIT_SEND_STRING+0x1c>
			ret=LCD_4BIT_SEND(LCD,*(str+Char_pos));
			Char_pos++;
		}
	}
	return ret;
}
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	ff 90       	pop	r15
    19b0:	ef 90       	pop	r14
    19b2:	08 95       	ret

000019b4 <LCD_4BIT_SEND_STRING_POS>:
	}
	return E_stat;
}

Bool LCD_4BIT_SEND_STRING_POS(LCD_4BIT_t *LCD,uint8 *str,uint8 row,uint8 col)
{
    19b4:	ef 92       	push	r14
    19b6:	ff 92       	push	r15
    19b8:	0f 93       	push	r16
    19ba:	1f 93       	push	r17
    19bc:	8c 01       	movw	r16, r24
    19be:	7b 01       	movw	r14, r22
	Bool ret = E_OK;
	ret=LCD_4BIT_SET_POS(LCD,row,col);
    19c0:	64 2f       	mov	r22, r20
    19c2:	42 2f       	mov	r20, r18
    19c4:	0e 94 31 0c 	call	0x1862	; 0x1862 <LCD_4BIT_SET_POS>
	ret=LCD_4BIT_SEND_STRING(LCD,str);
    19c8:	c8 01       	movw	r24, r16
    19ca:	b7 01       	movw	r22, r14
    19cc:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_4BIT_SEND_STRING>
	return ret;
}
    19d0:	1f 91       	pop	r17
    19d2:	0f 91       	pop	r16
    19d4:	ff 90       	pop	r15
    19d6:	ef 90       	pop	r14
    19d8:	08 95       	ret

000019da <LCD_8BIT_INIT>:
	}
	return ret;
}

Bool LCD_8BIT_INIT(LCD_8BIT_t *LCD)
{
    19da:	af 92       	push	r10
    19dc:	bf 92       	push	r11
    19de:	cf 92       	push	r12
    19e0:	df 92       	push	r13
    19e2:	ef 92       	push	r14
    19e4:	ff 92       	push	r15
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	ec 01       	movw	r28, r24
	Bool ret = E_OK;
	if (NULL == LCD)
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	11 f4       	brne	.+4      	; 0x19f8 <LCD_8BIT_INIT+0x1e>
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	67 c0       	rjmp	.+206    	; 0x1ac6 <LCD_8BIT_INIT+0xec>
		ret = E_NOK;
	else {
		uint8 LCD_PINS = 0;
		ret = GPIO_PIN_CONFIG(&(LCD->LCD_E));
    19f8:	01 96       	adiw	r24, 0x01	; 1
    19fa:	0e 94 15 07 	call	0xe2a	; 0xe2a <GPIO_PIN_CONFIG>
		ret = GPIO_PIN_CONFIG(&(LCD->LCD_RS));
    19fe:	ce 01       	movw	r24, r28
    1a00:	0e 94 15 07 	call	0xe2a	; 0xe2a <GPIO_PIN_CONFIG>
		ret = GPIO_PIN_CONFIG(&(LCD->LCD_RW));
    1a04:	ce 01       	movw	r24, r28
    1a06:	02 96       	adiw	r24, 0x02	; 2
    1a08:	0e 94 15 07 	call	0xe2a	; 0xe2a <GPIO_PIN_CONFIG>
		for (LCD_PINS = 0; LCD_PINS <= LCD_4BIT_PINS - 1; LCD_PINS++)
			ret = GPIO_PIN_CONFIG(&LCD->LCD_Data[LCD_PINS]);
    1a0c:	8e 01       	movw	r16, r28
    1a0e:	0d 5f       	subi	r16, 0xFD	; 253
    1a10:	1f 4f       	sbci	r17, 0xFF	; 255
    1a12:	c8 01       	movw	r24, r16
    1a14:	0e 94 15 07 	call	0xe2a	; 0xe2a <GPIO_PIN_CONFIG>
    1a18:	74 e0       	ldi	r23, 0x04	; 4
    1a1a:	e7 2e       	mov	r14, r23
    1a1c:	f1 2c       	mov	r15, r1
    1a1e:	ec 0e       	add	r14, r28
    1a20:	fd 1e       	adc	r15, r29
    1a22:	c7 01       	movw	r24, r14
    1a24:	0e 94 15 07 	call	0xe2a	; 0xe2a <GPIO_PIN_CONFIG>
    1a28:	65 e0       	ldi	r22, 0x05	; 5
    1a2a:	c6 2e       	mov	r12, r22
    1a2c:	d1 2c       	mov	r13, r1
    1a2e:	cc 0e       	add	r12, r28
    1a30:	dd 1e       	adc	r13, r29
    1a32:	c6 01       	movw	r24, r12
    1a34:	0e 94 15 07 	call	0xe2a	; 0xe2a <GPIO_PIN_CONFIG>
    1a38:	56 e0       	ldi	r21, 0x06	; 6
    1a3a:	a5 2e       	mov	r10, r21
    1a3c:	b1 2c       	mov	r11, r1
    1a3e:	ac 0e       	add	r10, r28
    1a40:	bd 1e       	adc	r11, r29
    1a42:	c5 01       	movw	r24, r10
    1a44:	0e 94 15 07 	call	0xe2a	; 0xe2a <GPIO_PIN_CONFIG>
		for (LCD_PINS = 0; LCD_PINS <= LCD_4BIT_PINS - 1; LCD_PINS++)
			ret = GPIO_PIN_WRITE(&LCD->LCD_Data[LCD_PINS], GPIO_LOW);
    1a48:	c8 01       	movw	r24, r16
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
    1a50:	c7 01       	movw	r24, r14
    1a52:	60 e0       	ldi	r22, 0x00	; 0
    1a54:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
    1a58:	c6 01       	movw	r24, r12
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
    1a60:	c5 01       	movw	r24, r10
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a68:	88 e8       	ldi	r24, 0x88	; 136
    1a6a:	93 e1       	ldi	r25, 0x13	; 19
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <LCD_8BIT_INIT+0x92>
		_delay_ms(20);
		ret = LCD_8BIT_SEND_CMD(LCD, LCD_8BIT_TWO_LINE);
    1a70:	ce 01       	movw	r24, r28
    1a72:	68 e3       	ldi	r22, 0x38	; 56
    1a74:	0e 94 c9 0a 	call	0x1592	; 0x1592 <LCD_8BIT_SEND_CMD>
    1a78:	82 ee       	ldi	r24, 0xE2	; 226
    1a7a:	94 e0       	ldi	r25, 0x04	; 4
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <LCD_8BIT_INIT+0xa2>
		_delay_ms(5);
		ret = LCD_8BIT_SEND_CMD(LCD, LCD_8BIT_TWO_LINE);
    1a80:	ce 01       	movw	r24, r28
    1a82:	68 e3       	ldi	r22, 0x38	; 56
    1a84:	0e 94 c9 0a 	call	0x1592	; 0x1592 <LCD_8BIT_SEND_CMD>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a88:	82 e3       	ldi	r24, 0x32	; 50
    1a8a:	8a 95       	dec	r24
    1a8c:	f1 f7       	brne	.-4      	; 0x1a8a <LCD_8BIT_INIT+0xb0>
		_delay_us(150);
		ret = LCD_8BIT_SEND_CMD(LCD, LCD_8BIT_TWO_LINE);
    1a8e:	ce 01       	movw	r24, r28
    1a90:	68 e3       	ldi	r22, 0x38	; 56
    1a92:	0e 94 c9 0a 	call	0x1592	; 0x1592 <LCD_8BIT_SEND_CMD>

		ret = LCD_8BIT_SEND_CMD(LCD, LCD_CLEAR_DISPLAY);
    1a96:	ce 01       	movw	r24, r28
    1a98:	61 e0       	ldi	r22, 0x01	; 1
    1a9a:	0e 94 c9 0a 	call	0x1592	; 0x1592 <LCD_8BIT_SEND_CMD>
		ret = LCD_8BIT_SEND_CMD(LCD, LCD_RETURN_HOME);
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	62 e0       	ldi	r22, 0x02	; 2
    1aa2:	0e 94 c9 0a 	call	0x1592	; 0x1592 <LCD_8BIT_SEND_CMD>
		ret = LCD_8BIT_SEND_CMD(LCD, LCD_INCREMENT_SHIFT_OFF);
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	66 e0       	ldi	r22, 0x06	; 6
    1aaa:	0e 94 c9 0a 	call	0x1592	; 0x1592 <LCD_8BIT_SEND_CMD>
		ret = LCD_8BIT_SEND_CMD(LCD, LCD_DISPLAY_ON_CURSOR_OFF);
    1aae:	ce 01       	movw	r24, r28
    1ab0:	6c e0       	ldi	r22, 0x0C	; 12
    1ab2:	0e 94 c9 0a 	call	0x1592	; 0x1592 <LCD_8BIT_SEND_CMD>
		ret = LCD_8BIT_SEND_CMD(LCD, LCD_8BIT_TWO_LINE);
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	68 e3       	ldi	r22, 0x38	; 56
    1aba:	0e 94 c9 0a 	call	0x1592	; 0x1592 <LCD_8BIT_SEND_CMD>
		ret = LCD_8BIT_SEND_CMD(LCD, LCD_SET_DDRAM_ADD);
    1abe:	ce 01       	movw	r24, r28
    1ac0:	60 e8       	ldi	r22, 0x80	; 128
    1ac2:	0e 94 c9 0a 	call	0x1592	; 0x1592 <LCD_8BIT_SEND_CMD>
	}
	return ret;
}
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	ff 90       	pop	r15
    1ad0:	ef 90       	pop	r14
    1ad2:	df 90       	pop	r13
    1ad4:	cf 90       	pop	r12
    1ad6:	bf 90       	pop	r11
    1ad8:	af 90       	pop	r10
    1ada:	08 95       	ret

00001adc <LCD_4BIT_INIT>:
	}
	return ret;
}

Bool LCD_4BIT_INIT(LCD_4BIT_t *LCD)
{
    1adc:	af 92       	push	r10
    1ade:	bf 92       	push	r11
    1ae0:	cf 92       	push	r12
    1ae2:	df 92       	push	r13
    1ae4:	ef 92       	push	r14
    1ae6:	ff 92       	push	r15
    1ae8:	0f 93       	push	r16
    1aea:	1f 93       	push	r17
    1aec:	cf 93       	push	r28
    1aee:	df 93       	push	r29
    1af0:	ec 01       	movw	r28, r24
	Bool ret=E_OK;
	if(NULL==LCD)
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	11 f4       	brne	.+4      	; 0x1afa <LCD_4BIT_INIT+0x1e>
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	67 c0       	rjmp	.+206    	; 0x1bc8 <LCD_4BIT_INIT+0xec>
		ret=E_NOK;
	else
	{
		uint8 LCD_PINS=0;
		ret=GPIO_PIN_CONFIG(&(LCD->LCD_E));
    1afa:	01 96       	adiw	r24, 0x01	; 1
    1afc:	0e 94 15 07 	call	0xe2a	; 0xe2a <GPIO_PIN_CONFIG>
		ret=GPIO_PIN_CONFIG(&(LCD->LCD_RS));
    1b00:	ce 01       	movw	r24, r28
    1b02:	0e 94 15 07 	call	0xe2a	; 0xe2a <GPIO_PIN_CONFIG>
		ret=GPIO_PIN_CONFIG(&(LCD->LCD_RW));
    1b06:	ce 01       	movw	r24, r28
    1b08:	02 96       	adiw	r24, 0x02	; 2
    1b0a:	0e 94 15 07 	call	0xe2a	; 0xe2a <GPIO_PIN_CONFIG>
		for(LCD_PINS=0;LCD_PINS<=LCD_4BIT_PINS-1;LCD_PINS++)
			ret=GPIO_PIN_CONFIG(&LCD->LCD_Data[LCD_PINS]);
    1b0e:	8e 01       	movw	r16, r28
    1b10:	0d 5f       	subi	r16, 0xFD	; 253
    1b12:	1f 4f       	sbci	r17, 0xFF	; 255
    1b14:	c8 01       	movw	r24, r16
    1b16:	0e 94 15 07 	call	0xe2a	; 0xe2a <GPIO_PIN_CONFIG>
    1b1a:	a4 e0       	ldi	r26, 0x04	; 4
    1b1c:	ea 2e       	mov	r14, r26
    1b1e:	f1 2c       	mov	r15, r1
    1b20:	ec 0e       	add	r14, r28
    1b22:	fd 1e       	adc	r15, r29
    1b24:	c7 01       	movw	r24, r14
    1b26:	0e 94 15 07 	call	0xe2a	; 0xe2a <GPIO_PIN_CONFIG>
    1b2a:	f5 e0       	ldi	r31, 0x05	; 5
    1b2c:	cf 2e       	mov	r12, r31
    1b2e:	d1 2c       	mov	r13, r1
    1b30:	cc 0e       	add	r12, r28
    1b32:	dd 1e       	adc	r13, r29
    1b34:	c6 01       	movw	r24, r12
    1b36:	0e 94 15 07 	call	0xe2a	; 0xe2a <GPIO_PIN_CONFIG>
    1b3a:	e6 e0       	ldi	r30, 0x06	; 6
    1b3c:	ae 2e       	mov	r10, r30
    1b3e:	b1 2c       	mov	r11, r1
    1b40:	ac 0e       	add	r10, r28
    1b42:	bd 1e       	adc	r11, r29
    1b44:	c5 01       	movw	r24, r10
    1b46:	0e 94 15 07 	call	0xe2a	; 0xe2a <GPIO_PIN_CONFIG>
		for(LCD_PINS=0;LCD_PINS<=LCD_4BIT_PINS-1;LCD_PINS++)
			ret=GPIO_PIN_WRITE(&LCD->LCD_Data[LCD_PINS],GPIO_LOW);
    1b4a:	c8 01       	movw	r24, r16
    1b4c:	60 e0       	ldi	r22, 0x00	; 0
    1b4e:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
    1b52:	c7 01       	movw	r24, r14
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
    1b5a:	c6 01       	movw	r24, r12
    1b5c:	60 e0       	ldi	r22, 0x00	; 0
    1b5e:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
    1b62:	c5 01       	movw	r24, r10
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_PIN_WRITE>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b6a:	88 e8       	ldi	r24, 0x88	; 136
    1b6c:	93 e1       	ldi	r25, 0x13	; 19
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	f1 f7       	brne	.-4      	; 0x1b6e <LCD_4BIT_INIT+0x92>
		_delay_ms(20);
		ret=LCD_4BIT_SEND_CMD(LCD,LCD_8BIT_TWO_LINE);
    1b72:	ce 01       	movw	r24, r28
    1b74:	68 e3       	ldi	r22, 0x38	; 56
    1b76:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_4BIT_SEND_CMD>
    1b7a:	82 ee       	ldi	r24, 0xE2	; 226
    1b7c:	94 e0       	ldi	r25, 0x04	; 4
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <LCD_4BIT_INIT+0xa2>
		_delay_ms(5);
		ret=LCD_4BIT_SEND_CMD(LCD,LCD_8BIT_TWO_LINE);
    1b82:	ce 01       	movw	r24, r28
    1b84:	68 e3       	ldi	r22, 0x38	; 56
    1b86:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_4BIT_SEND_CMD>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b8a:	82 e3       	ldi	r24, 0x32	; 50
    1b8c:	8a 95       	dec	r24
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <LCD_4BIT_INIT+0xb0>
		_delay_us(150);
		ret=LCD_4BIT_SEND_CMD(LCD,LCD_8BIT_TWO_LINE);
    1b90:	ce 01       	movw	r24, r28
    1b92:	68 e3       	ldi	r22, 0x38	; 56
    1b94:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_4BIT_SEND_CMD>

		ret=LCD_4BIT_SEND_CMD(LCD,LCD_CLEAR_DISPLAY);
    1b98:	ce 01       	movw	r24, r28
    1b9a:	61 e0       	ldi	r22, 0x01	; 1
    1b9c:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_4BIT_SEND_CMD>
		ret=LCD_4BIT_SEND_CMD(LCD,LCD_RETURN_HOME);
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	62 e0       	ldi	r22, 0x02	; 2
    1ba4:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_4BIT_SEND_CMD>
		ret=LCD_4BIT_SEND_CMD(LCD,LCD_INCREMENT_SHIFT_OFF);
    1ba8:	ce 01       	movw	r24, r28
    1baa:	66 e0       	ldi	r22, 0x06	; 6
    1bac:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_4BIT_SEND_CMD>
		ret=LCD_4BIT_SEND_CMD(LCD,LCD_DISPLAY_ON_CURSOR_OFF);
    1bb0:	ce 01       	movw	r24, r28
    1bb2:	6c e0       	ldi	r22, 0x0C	; 12
    1bb4:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_4BIT_SEND_CMD>
		ret=LCD_4BIT_SEND_CMD(LCD,LCD_4BIT_TWO_LINE);
    1bb8:	ce 01       	movw	r24, r28
    1bba:	68 e2       	ldi	r22, 0x28	; 40
    1bbc:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_4BIT_SEND_CMD>
		ret=LCD_4BIT_SEND_CMD(LCD,LCD_SET_DDRAM_ADD);
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	60 e8       	ldi	r22, 0x80	; 128
    1bc4:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_4BIT_SEND_CMD>
	}
	return ret;
}
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	1f 91       	pop	r17
    1bce:	0f 91       	pop	r16
    1bd0:	ff 90       	pop	r15
    1bd2:	ef 90       	pop	r14
    1bd4:	df 90       	pop	r13
    1bd6:	cf 90       	pop	r12
    1bd8:	bf 90       	pop	r11
    1bda:	af 90       	pop	r10
    1bdc:	08 95       	ret

00001bde <LCD_PRINT_4BITS>:
		Counter++;
	}
}

Bool LCD_PRINT_4BITS(LCD_4BIT_t *LCD,uint8 row,uint8 col,uint8 *str,...)
{
    1bde:	2f 92       	push	r2
    1be0:	3f 92       	push	r3
    1be2:	4f 92       	push	r4
    1be4:	5f 92       	push	r5
    1be6:	6f 92       	push	r6
    1be8:	7f 92       	push	r7
    1bea:	8f 92       	push	r8
    1bec:	9f 92       	push	r9
    1bee:	af 92       	push	r10
    1bf0:	bf 92       	push	r11
    1bf2:	cf 92       	push	r12
    1bf4:	df 92       	push	r13
    1bf6:	ef 92       	push	r14
    1bf8:	ff 92       	push	r15
    1bfa:	0f 93       	push	r16
    1bfc:	1f 93       	push	r17
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	60 97       	sbiw	r28, 0x10	; 16
    1c08:	0f b6       	in	r0, 0x3f	; 63
    1c0a:	f8 94       	cli
    1c0c:	de bf       	out	0x3e, r29	; 62
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	cd bf       	out	0x3d, r28	; 61
    1c12:	bb e2       	ldi	r27, 0x2B	; 43
    1c14:	eb 2e       	mov	r14, r27
    1c16:	f1 2c       	mov	r15, r1
    1c18:	ec 0e       	add	r14, r28
    1c1a:	fd 1e       	adc	r15, r29
	Bool E_stat=E_OK;
	Bool flag=0;
	va_list valist;
	va_start(valist, str);
	uint8 Counter=0;
	E_stat=LCD_4BIT_SET_POS(LCD,row,col);
    1c1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c20:	6f a1       	ldd	r22, Y+39	; 0x27
    1c22:	48 a5       	ldd	r20, Y+40	; 0x28
    1c24:	0e 94 31 0c 	call	0x1862	; 0x1862 <LCD_4BIT_SET_POS>
    1c28:	8e 87       	std	Y+14, r24	; 0x0e
    1c2a:	66 24       	eor	r6, r6
		Int_part/=10;
		LEN++;
	}
	*(Str+Counter)='\0';
	Counter=0;
	while(Float_part!=0&&Counter<6)
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	07 96       	adiw	r24, 0x07	; 7
    1c30:	98 8b       	std	Y+16, r25	; 0x10
    1c32:	8f 87       	std	Y+15, r24	; 0x0f
    1c34:	f7 c0       	rjmp	.+494    	; 0x1e24 <LCD_PRINT_4BITS+0x246>
	va_start(valist, str);
	uint8 Counter=0;
	E_stat=LCD_4BIT_SET_POS(LCD,row,col);
	while((*(str+Counter))&&(Counter<=MAX_CHARS))
	{
		if(Counter==16)
    1c36:	90 e1       	ldi	r25, 0x10	; 16
    1c38:	69 16       	cp	r6, r25
    1c3a:	39 f4       	brne	.+14     	; 0x1c4a <LCD_PRINT_4BITS+0x6c>
			E_stat=LCD_4BIT_SET_POS(LCD,2,0);
    1c3c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c3e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c40:	62 e0       	ldi	r22, 0x02	; 2
    1c42:	40 e0       	ldi	r20, 0x00	; 0
    1c44:	0e 94 31 0c 	call	0x1862	; 0x1862 <LCD_4BIT_SET_POS>
    1c48:	8e 87       	std	Y+14, r24	; 0x0e
		if(*(str+Counter)!='%')
    1c4a:	d8 01       	movw	r26, r16
    1c4c:	6c 91       	ld	r22, X
    1c4e:	65 32       	cpi	r22, 0x25	; 37
    1c50:	31 f0       	breq	.+12     	; 0x1c5e <LCD_PRINT_4BITS+0x80>
			E_stat=LCD_4BIT_SEND(LCD,*(str+Counter));
    1c52:	8d a1       	ldd	r24, Y+37	; 0x25
    1c54:	9e a1       	ldd	r25, Y+38	; 0x26
    1c56:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_4BIT_SEND>
    1c5a:	8e 87       	std	Y+14, r24	; 0x0e
    1c5c:	e2 c0       	rjmp	.+452    	; 0x1e22 <LCD_PRINT_4BITS+0x244>
		else if(*(str+Counter)=='%')
		{
			Counter++;
    1c5e:	63 94       	inc	r6
			flag=1;
			uint8 Str[11];
			if(*(str+Counter)=='d')
    1c60:	e9 a5       	ldd	r30, Y+41	; 0x29
    1c62:	fa a5       	ldd	r31, Y+42	; 0x2a
    1c64:	e6 0d       	add	r30, r6
    1c66:	f1 1d       	adc	r31, r1
    1c68:	e0 81       	ld	r30, Z
    1c6a:	e4 36       	cpi	r30, 0x64	; 100
    1c6c:	61 f4       	brne	.+24     	; 0x1c86 <LCD_PRINT_4BITS+0xa8>
			{
				int16 Arg=va_arg(valist,int);
    1c6e:	87 01       	movw	r16, r14
    1c70:	0e 5f       	subi	r16, 0xFE	; 254
    1c72:	1f 4f       	sbci	r17, 0xFF	; 255
				convert_short_to_string(Arg,Str);
    1c74:	f7 01       	movw	r30, r14
    1c76:	80 81       	ld	r24, Z
    1c78:	91 81       	ldd	r25, Z+1	; 0x01
    1c7a:	be 01       	movw	r22, r28
    1c7c:	6f 5f       	subi	r22, 0xFF	; 255
    1c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c80:	0e 94 4f 0a 	call	0x149e	; 0x149e <convert_short_to_string>
    1c84:	1e c0       	rjmp	.+60     	; 0x1cc2 <LCD_PRINT_4BITS+0xe4>
				LCD_4BIT_SEND_STRING(LCD,Str);
			}
			else if(*(str+Counter)=='c')
    1c86:	e3 36       	cpi	r30, 0x63	; 99
    1c88:	59 f4       	brne	.+22     	; 0x1ca0 <LCD_PRINT_4BITS+0xc2>
			{
				int8 Arg = va_arg(valist, int);
    1c8a:	87 01       	movw	r16, r14
    1c8c:	0e 5f       	subi	r16, 0xFE	; 254
    1c8e:	1f 4f       	sbci	r17, 0xFF	; 255
				LCD_4BIT_SEND(LCD,Arg);
    1c90:	8d a1       	ldd	r24, Y+37	; 0x25
    1c92:	9e a1       	ldd	r25, Y+38	; 0x26
    1c94:	d7 01       	movw	r26, r14
    1c96:	6c 91       	ld	r22, X
    1c98:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_4BIT_SEND>
    1c9c:	78 01       	movw	r14, r16
    1c9e:	c1 c0       	rjmp	.+386    	; 0x1e22 <LCD_PRINT_4BITS+0x244>
			}
			else if(*(str+Counter)=='l')
    1ca0:	ec 36       	cpi	r30, 0x6C	; 108
    1ca2:	b9 f4       	brne	.+46     	; 0x1cd2 <LCD_PRINT_4BITS+0xf4>
			{
				int32 Arg = va_arg(valist, int);
    1ca4:	87 01       	movw	r16, r14
    1ca6:	0e 5f       	subi	r16, 0xFE	; 254
    1ca8:	1f 4f       	sbci	r17, 0xFF	; 255
				convert_int_to_string(Arg, Str);
    1caa:	f7 01       	movw	r30, r14
    1cac:	60 81       	ld	r22, Z
    1cae:	71 81       	ldd	r23, Z+1	; 0x01
    1cb0:	88 27       	eor	r24, r24
    1cb2:	77 fd       	sbrc	r23, 7
    1cb4:	80 95       	com	r24
    1cb6:	98 2f       	mov	r25, r24
    1cb8:	ae 01       	movw	r20, r28
    1cba:	4f 5f       	subi	r20, 0xFF	; 255
    1cbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1cbe:	0e 94 19 0a 	call	0x1432	; 0x1432 <convert_int_to_string>
				LCD_4BIT_SEND_STRING(LCD, Str);
    1cc2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cc4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cc6:	be 01       	movw	r22, r28
    1cc8:	6f 5f       	subi	r22, 0xFF	; 255
    1cca:	7f 4f       	sbci	r23, 0xFF	; 255
    1ccc:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_4BIT_SEND_STRING>
    1cd0:	e5 cf       	rjmp	.-54     	; 0x1c9c <LCD_PRINT_4BITS+0xbe>
			}
			else if(*(str+Counter)=='f')
    1cd2:	e6 36       	cpi	r30, 0x66	; 102
    1cd4:	09 f0       	breq	.+2      	; 0x1cd8 <LCD_PRINT_4BITS+0xfa>
    1cd6:	a5 c0       	rjmp	.+330    	; 0x1e22 <LCD_PRINT_4BITS+0x244>
			{
				Arg = va_arg(valist, double);
    1cd8:	c7 01       	movw	r24, r14
    1cda:	04 96       	adiw	r24, 0x04	; 4
    1cdc:	9d 87       	std	Y+13, r25	; 0x0d
    1cde:	8c 87       	std	Y+12, r24	; 0x0c
    1ce0:	d7 01       	movw	r26, r14
    1ce2:	8d 90       	ld	r8, X+
    1ce4:	9d 90       	ld	r9, X+
    1ce6:	ad 90       	ld	r10, X+
    1ce8:	bc 90       	ld	r11, X
    1cea:	80 92 ce 01 	sts	0x01CE, r8
    1cee:	90 92 cf 01 	sts	0x01CF, r9
    1cf2:	a0 92 d0 01 	sts	0x01D0, r10
    1cf6:	b0 92 d1 01 	sts	0x01D1, r11

static void float_string(float Num,int8 *Str)
{
	uint8 Counter=7;
	uint8 LEN=0;
	int32 Int_part=(int32)Num;
    1cfa:	c5 01       	movw	r24, r10
    1cfc:	b4 01       	movw	r22, r8
    1cfe:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
    1d02:	1b 01       	movw	r2, r22
    1d04:	2c 01       	movw	r4, r24
    1d06:	7b 01       	movw	r14, r22
    1d08:	8c 01       	movw	r16, r24
    1d0a:	77 24       	eor	r7, r7
    1d0c:	1e c0       	rjmp	.+60     	; 0x1d4a <LCD_PRINT_4BITS+0x16c>
	int32 Float_part=((float)(Num)-(int32)Num)*1000000;
	while(Int_part!=0)
	{
		*(Str+Counter++)=Int_part%10+'0';
    1d0e:	e1 e0       	ldi	r30, 0x01	; 1
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	ec 0f       	add	r30, r28
    1d14:	fd 1f       	adc	r31, r29
    1d16:	ce 0e       	add	r12, r30
    1d18:	df 1e       	adc	r13, r31
    1d1a:	c8 01       	movw	r24, r16
    1d1c:	b7 01       	movw	r22, r14
    1d1e:	2a e0       	ldi	r18, 0x0A	; 10
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	50 e0       	ldi	r21, 0x00	; 0
    1d26:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <__divmodsi4>
    1d2a:	60 5d       	subi	r22, 0xD0	; 208
    1d2c:	d6 01       	movw	r26, r12
    1d2e:	6c 93       	st	X, r22
		Int_part/=10;
    1d30:	c8 01       	movw	r24, r16
    1d32:	b7 01       	movw	r22, r14
    1d34:	2a e0       	ldi	r18, 0x0A	; 10
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	50 e0       	ldi	r21, 0x00	; 0
    1d3c:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <__divmodsi4>
    1d40:	c9 01       	movw	r24, r18
    1d42:	da 01       	movw	r26, r20
    1d44:	7c 01       	movw	r14, r24
    1d46:	8d 01       	movw	r16, r26
		LEN++;
    1d48:	73 94       	inc	r7
    1d4a:	b7 e0       	ldi	r27, 0x07	; 7
    1d4c:	7b 0e       	add	r7, r27
    1d4e:	c7 2c       	mov	r12, r7
    1d50:	dd 24       	eor	r13, r13
    1d52:	e9 ef       	ldi	r30, 0xF9	; 249
    1d54:	7e 0e       	add	r7, r30
{
	uint8 Counter=7;
	uint8 LEN=0;
	int32 Int_part=(int32)Num;
	int32 Float_part=((float)(Num)-(int32)Num)*1000000;
	while(Int_part!=0)
    1d56:	e1 14       	cp	r14, r1
    1d58:	f1 04       	cpc	r15, r1
    1d5a:	01 05       	cpc	r16, r1
    1d5c:	11 05       	cpc	r17, r1
    1d5e:	b9 f6       	brne	.-82     	; 0x1d0e <LCD_PRINT_4BITS+0x130>
static void float_string(float Num,int8 *Str)
{
	uint8 Counter=7;
	uint8 LEN=0;
	int32 Int_part=(int32)Num;
	int32 Float_part=((float)(Num)-(int32)Num)*1000000;
    1d60:	c2 01       	movw	r24, r4
    1d62:	b1 01       	movw	r22, r2
    1d64:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    1d68:	9b 01       	movw	r18, r22
    1d6a:	ac 01       	movw	r20, r24
    1d6c:	c5 01       	movw	r24, r10
    1d6e:	b4 01       	movw	r22, r8
    1d70:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	34 e2       	ldi	r19, 0x24	; 36
    1d78:	44 e7       	ldi	r20, 0x74	; 116
    1d7a:	59 e4       	ldi	r21, 0x49	; 73
    1d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d80:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
    1d84:	7b 01       	movw	r14, r22
    1d86:	8c 01       	movw	r16, r24
	{
		*(Str+Counter++)=Int_part%10+'0';
		Int_part/=10;
		LEN++;
	}
	*(Str+Counter)='\0';
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	8c 0f       	add	r24, r28
    1d8e:	9d 1f       	adc	r25, r29
    1d90:	c8 0e       	add	r12, r24
    1d92:	d9 1e       	adc	r13, r25
    1d94:	d6 01       	movw	r26, r12
    1d96:	1c 92       	st	X, r1
    1d98:	5c 01       	movw	r10, r24
    1d9a:	6c 01       	movw	r12, r24
    1d9c:	19 c0       	rjmp	.+50     	; 0x1dd0 <LCD_PRINT_4BITS+0x1f2>
	Counter=0;
	while(Float_part!=0&&Counter<6)
	{
		*(Str+Counter++)=Float_part%10+'0';
    1d9e:	c8 01       	movw	r24, r16
    1da0:	b7 01       	movw	r22, r14
    1da2:	2a e0       	ldi	r18, 0x0A	; 10
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e0       	ldi	r20, 0x00	; 0
    1da8:	50 e0       	ldi	r21, 0x00	; 0
    1daa:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <__divmodsi4>
    1dae:	60 5d       	subi	r22, 0xD0	; 208
    1db0:	f6 01       	movw	r30, r12
    1db2:	61 93       	st	Z+, r22
    1db4:	6f 01       	movw	r12, r30
		Float_part/=10;
    1db6:	c8 01       	movw	r24, r16
    1db8:	b7 01       	movw	r22, r14
    1dba:	2a e0       	ldi	r18, 0x0A	; 10
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e0       	ldi	r20, 0x00	; 0
    1dc0:	50 e0       	ldi	r21, 0x00	; 0
    1dc2:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <__divmodsi4>
    1dc6:	c9 01       	movw	r24, r18
    1dc8:	da 01       	movw	r26, r20
    1dca:	7c 01       	movw	r14, r24
    1dcc:	8d 01       	movw	r16, r26
		LEN++;
    1dce:	73 94       	inc	r7
		Int_part/=10;
		LEN++;
	}
	*(Str+Counter)='\0';
	Counter=0;
	while(Float_part!=0&&Counter<6)
    1dd0:	e1 14       	cp	r14, r1
    1dd2:	f1 04       	cpc	r15, r1
    1dd4:	01 05       	cpc	r16, r1
    1dd6:	11 05       	cpc	r17, r1
    1dd8:	29 f0       	breq	.+10     	; 0x1de4 <LCD_PRINT_4BITS+0x206>
    1dda:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ddc:	98 89       	ldd	r25, Y+16	; 0x10
    1dde:	c8 16       	cp	r12, r24
    1de0:	d9 06       	cpc	r13, r25
    1de2:	e9 f6       	brne	.-70     	; 0x1d9e <LCD_PRINT_4BITS+0x1c0>
	{
		*(Str+Counter++)=Float_part%10+'0';
		Float_part/=10;
		LEN++;
	}
	*(Str+6)='.';
    1de4:	9e e2       	ldi	r25, 0x2E	; 46
    1de6:	9f 83       	std	Y+7, r25	; 0x07
	Counter=0;
	while(Counter<LEN/2)
    1de8:	37 2d       	mov	r19, r7
    1dea:	36 95       	lsr	r19
    1dec:	e1 e0       	ldi	r30, 0x01	; 1
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	ec 0f       	add	r30, r28
    1df2:	fd 1f       	adc	r31, r29
    1df4:	e7 0d       	add	r30, r7
    1df6:	f1 1d       	adc	r31, r1
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	08 c0       	rjmp	.+16     	; 0x1e0c <LCD_PRINT_4BITS+0x22e>
	{
		uint8 Temp=*(Str+Counter);
    1dfc:	d5 01       	movw	r26, r10
    1dfe:	9c 91       	ld	r25, X
		*(Str+Counter)=*(Str+LEN-Counter);
    1e00:	80 81       	ld	r24, Z
    1e02:	8d 93       	st	X+, r24
    1e04:	5d 01       	movw	r10, r26
		*(Str+LEN-Counter)=Temp;
    1e06:	90 83       	st	Z, r25
		Counter++;
    1e08:	2f 5f       	subi	r18, 0xFF	; 255
    1e0a:	31 97       	sbiw	r30, 0x01	; 1
		Float_part/=10;
		LEN++;
	}
	*(Str+6)='.';
	Counter=0;
	while(Counter<LEN/2)
    1e0c:	23 17       	cp	r18, r19
    1e0e:	b0 f3       	brcs	.-20     	; 0x1dfc <LCD_PRINT_4BITS+0x21e>
			}
			else if(*(str+Counter)=='f')
			{
				Arg = va_arg(valist, double);
				float_string(Arg,Str);
				LCD_4BIT_SEND_STRING(LCD, Str);
    1e10:	8d a1       	ldd	r24, Y+37	; 0x25
    1e12:	9e a1       	ldd	r25, Y+38	; 0x26
    1e14:	be 01       	movw	r22, r28
    1e16:	6f 5f       	subi	r22, 0xFF	; 255
    1e18:	7f 4f       	sbci	r23, 0xFF	; 255
    1e1a:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_4BIT_SEND_STRING>
    1e1e:	ec 84       	ldd	r14, Y+12	; 0x0c
    1e20:	fd 84       	ldd	r15, Y+13	; 0x0d
			}
		}
		else
			LCD_4BIT_SEND(LCD,*(str+Counter));
		Counter++;
    1e22:	63 94       	inc	r6
	Bool flag=0;
	va_list valist;
	va_start(valist, str);
	uint8 Counter=0;
	E_stat=LCD_4BIT_SET_POS(LCD,row,col);
	while((*(str+Counter))&&(Counter<=MAX_CHARS))
    1e24:	09 a5       	ldd	r16, Y+41	; 0x29
    1e26:	1a a5       	ldd	r17, Y+42	; 0x2a
    1e28:	06 0d       	add	r16, r6
    1e2a:	11 1d       	adc	r17, r1
    1e2c:	f8 01       	movw	r30, r16
    1e2e:	80 81       	ld	r24, Z
    1e30:	88 23       	and	r24, r24
    1e32:	21 f0       	breq	.+8      	; 0x1e3c <LCD_PRINT_4BITS+0x25e>
    1e34:	ff e1       	ldi	r31, 0x1F	; 31
    1e36:	f6 15       	cp	r31, r6
    1e38:	08 f0       	brcs	.+2      	; 0x1e3c <LCD_PRINT_4BITS+0x25e>
    1e3a:	fd ce       	rjmp	.-518    	; 0x1c36 <LCD_PRINT_4BITS+0x58>
		else
			LCD_4BIT_SEND(LCD,*(str+Counter));
		Counter++;
	}
	return E_stat;
}
    1e3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e3e:	60 96       	adiw	r28, 0x10	; 16
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	cd bf       	out	0x3d, r28	; 61
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	1f 91       	pop	r17
    1e50:	0f 91       	pop	r16
    1e52:	ff 90       	pop	r15
    1e54:	ef 90       	pop	r14
    1e56:	df 90       	pop	r13
    1e58:	cf 90       	pop	r12
    1e5a:	bf 90       	pop	r11
    1e5c:	af 90       	pop	r10
    1e5e:	9f 90       	pop	r9
    1e60:	8f 90       	pop	r8
    1e62:	7f 90       	pop	r7
    1e64:	6f 90       	pop	r6
    1e66:	5f 90       	pop	r5
    1e68:	4f 90       	pop	r4
    1e6a:	3f 90       	pop	r3
    1e6c:	2f 90       	pop	r2
    1e6e:	08 95       	ret

00001e70 <TIMER2_OVF_INC>:
Bool flag=0;
volatile int32 OVF_COUNT=0;

void TIMER2_OVF_INC(void)
{
	OVF_COUNT++;
    1e70:	80 91 a9 01 	lds	r24, 0x01A9
    1e74:	90 91 aa 01 	lds	r25, 0x01AA
    1e78:	a0 91 ab 01 	lds	r26, 0x01AB
    1e7c:	b0 91 ac 01 	lds	r27, 0x01AC
    1e80:	01 96       	adiw	r24, 0x01	; 1
    1e82:	a1 1d       	adc	r26, r1
    1e84:	b1 1d       	adc	r27, r1
    1e86:	80 93 a9 01 	sts	0x01A9, r24
    1e8a:	90 93 aa 01 	sts	0x01AA, r25
    1e8e:	a0 93 ab 01 	sts	0x01AB, r26
    1e92:	b0 93 ac 01 	sts	0x01AC, r27
}
    1e96:	08 95       	ret

00001e98 <IR_Read>:
		ret=E_NOK;
	return ret;
}

Bool IR_Read(char *Protocol_Type,uint32 *Code)
{
    1e98:	cf 92       	push	r12
    1e9a:	df 92       	push	r13
    1e9c:	ef 92       	push	r14
    1e9e:	ff 92       	push	r15
    1ea0:	0f 93       	push	r16
    1ea2:	1f 93       	push	r17
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
    1eac:	c9 58       	subi	r28, 0x89	; 137
    1eae:	d0 40       	sbci	r29, 0x00	; 0
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	dc 01       	movw	r26, r24
    1ebc:	7b 01       	movw	r14, r22
static Bool IR_Analysis(uint16 *Buffer)
{
	//tsopvs17038 complements the decoded output
	Bool ret=E_OK;
	uint8_t i=0;
	if(BIT_IS_CLEAR(IR_PORT_IN,IR_PIN))
    1ebe:	c8 9b       	sbis	0x19, 0	; 25
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <IR_Read+0x2e>
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	39 c1       	rjmp	.+626    	; 0x2138 <IR_Read+0x2a0>
    1ec6:	8e 01       	movw	r16, r28
    1ec8:	0f 5f       	subi	r16, 0xFF	; 255
    1eca:	1f 4f       	sbci	r17, 0xFF	; 255
    1ecc:	f8 01       	movw	r30, r16
	{
			do
			{
			   TCNT1=3;//start Timer 1 with 3 in TCNT1 and keep waiting
    1ece:	23 e0       	ldi	r18, 0x03	; 3
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
				do {
					Buffer[i+1]=TCNT1;
				} while ((BIT_IS_SET(IR_PORT_IN, IR_PIN)) && (Buffer[i + 1] <= 20000));

			   i=i+2;
			}while((*(Buffer+i-2)<=20000)&&(*(Buffer+i-1)<=20000)&&i<=68);
    1ed2:	ae 01       	movw	r20, r28
    1ed4:	43 57       	subi	r20, 0x73	; 115
    1ed6:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t i=0;
	if(BIT_IS_CLEAR(IR_PORT_IN,IR_PIN))
	{
			do
			{
			   TCNT1=3;//start Timer 1 with 3 in TCNT1 and keep waiting
    1ed8:	3d bd       	out	0x2d, r19	; 45
    1eda:	2c bd       	out	0x2c, r18	; 44
				do {
					Buffer[i]=TCNT1;
    1edc:	8c b5       	in	r24, 0x2c	; 44
    1ede:	9d b5       	in	r25, 0x2d	; 45
				} while ((BIT_IS_CLEAR(IR_PORT_IN, IR_PIN) ) && (Buffer[i] <= 20000));
    1ee0:	c8 99       	sbic	0x19, 0	; 25
    1ee2:	04 c0       	rjmp	.+8      	; 0x1eec <IR_Read+0x54>
    1ee4:	6e e4       	ldi	r22, 0x4E	; 78
    1ee6:	81 32       	cpi	r24, 0x21	; 33
    1ee8:	96 07       	cpc	r25, r22
    1eea:	c0 f3       	brcs	.-16     	; 0x1edc <IR_Read+0x44>
    1eec:	91 83       	std	Z+1, r25	; 0x01
    1eee:	80 83       	st	Z, r24


				TCNT1=3;
    1ef0:	3d bd       	out	0x2d, r19	; 45
    1ef2:	2c bd       	out	0x2c, r18	; 44
				do {
					Buffer[i+1]=TCNT1;
    1ef4:	8c b5       	in	r24, 0x2c	; 44
    1ef6:	9d b5       	in	r25, 0x2d	; 45
				} while ((BIT_IS_SET(IR_PORT_IN, IR_PIN)) && (Buffer[i + 1] <= 20000));
    1ef8:	c8 9b       	sbis	0x19, 0	; 25
    1efa:	04 c0       	rjmp	.+8      	; 0x1f04 <IR_Read+0x6c>
    1efc:	6e e4       	ldi	r22, 0x4E	; 78
    1efe:	81 32       	cpi	r24, 0x21	; 33
    1f00:	96 07       	cpc	r25, r22
    1f02:	c0 f3       	brcs	.-16     	; 0x1ef4 <IR_Read+0x5c>
    1f04:	93 83       	std	Z+3, r25	; 0x03
    1f06:	82 83       	std	Z+2, r24	; 0x02

			   i=i+2;
			}while((*(Buffer+i-2)<=20000)&&(*(Buffer+i-1)<=20000)&&i<=68);
    1f08:	80 81       	ld	r24, Z
    1f0a:	91 81       	ldd	r25, Z+1	; 0x01
    1f0c:	81 52       	subi	r24, 0x21	; 33
    1f0e:	9e 44       	sbci	r25, 0x4E	; 78
    1f10:	08 f0       	brcs	.+2      	; 0x1f14 <IR_Read+0x7c>
    1f12:	22 c1       	rjmp	.+580    	; 0x2158 <IR_Read+0x2c0>
    1f14:	82 81       	ldd	r24, Z+2	; 0x02
    1f16:	93 81       	ldd	r25, Z+3	; 0x03
    1f18:	81 52       	subi	r24, 0x21	; 33
    1f1a:	9e 44       	sbci	r25, 0x4E	; 78
    1f1c:	08 f0       	brcs	.+2      	; 0x1f20 <IR_Read+0x88>
    1f1e:	1c c1       	rjmp	.+568    	; 0x2158 <IR_Read+0x2c0>
    1f20:	34 96       	adiw	r30, 0x04	; 4
    1f22:	e4 17       	cp	r30, r20
    1f24:	f5 07       	cpc	r31, r21
    1f26:	c1 f6       	brne	.-80     	; 0x1ed8 <IR_Read+0x40>
    1f28:	17 c1       	rjmp	.+558    	; 0x2158 <IR_Read+0x2c0>
	uint8 k=0;
	uint16 Decode_Array[68];
	Ret_flag=IR_Analysis(Decode_Array);//analyse the incoming waveform
	if(Ret_flag==E_OK)
	{
		if((Decode_Array[0]>=8400&&Decode_Array[0]<=10000)&&(Decode_Array[1]>=3800&&Decode_Array[1]<=4700))
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2e:	88 5d       	subi	r24, 0xD8	; 216
    1f30:	9e 40       	sbci	r25, 0x0E	; 14
    1f32:	85 58       	subi	r24, 0x85	; 133
    1f34:	93 40       	sbci	r25, 0x03	; 3
    1f36:	08 f0       	brcs	.+2      	; 0x1f3a <IR_Read+0xa2>
    1f38:	72 c0       	rjmp	.+228    	; 0x201e <IR_Read+0x186>
		{
			i=START_FRAME;
			Protocol_Type[0]='N';
    1f3a:	8e e4       	ldi	r24, 0x4E	; 78
    1f3c:	8c 93       	st	X, r24
			Protocol_Type[1]='E';
    1f3e:	85 e4       	ldi	r24, 0x45	; 69
    1f40:	11 96       	adiw	r26, 0x01	; 1
    1f42:	8c 93       	st	X, r24
    1f44:	11 97       	sbiw	r26, 0x01	; 1
			Protocol_Type[2]='C';
    1f46:	83 e4       	ldi	r24, 0x43	; 67
    1f48:	12 96       	adiw	r26, 0x02	; 2
    1f4a:	8c 93       	st	X, r24
    1f4c:	12 97       	sbiw	r26, 0x02	; 2
			Protocol_Type[3]='\0';
    1f4e:	13 96       	adiw	r26, 0x03	; 3
    1f50:	1c 92       	st	X, r1
    1f52:	f2 e0       	ldi	r31, 0x02	; 2
    1f54:	c7 57       	subi	r28, 0x77	; 119
    1f56:	df 4f       	sbci	r29, 0xFF	; 255
    1f58:	f8 83       	st	Y, r31
    1f5a:	c9 58       	subi	r28, 0x89	; 137
    1f5c:	d0 40       	sbci	r29, 0x00	; 0
    1f5e:	6f e1       	ldi	r22, 0x1F	; 31
    1f60:	70 e0       	ldi	r23, 0x00	; 0
			while(i<=64)
			{
				if((Decode_Array[i]>=100&&Decode_Array[i]<=700)&&(Decode_Array[i+1]>=100&&Decode_Array[i+1]<=700))
					CLEAR_BIT(*Code,(NEC_SIZE-k));
				else if((Decode_Array[i]>=100&&Decode_Array[i]<=700)&&(Decode_Array[i+1]>=1200&&Decode_Array[i+1]<=1800))//1560us
					SET_BIT(*Code,(NEC_SIZE-k));
    1f62:	91 e0       	ldi	r25, 0x01	; 1
    1f64:	c9 2e       	mov	r12, r25
    1f66:	d1 2c       	mov	r13, r1
			Protocol_Type[1]='E';
			Protocol_Type[2]='C';
			Protocol_Type[3]='\0';
			while(i<=64)
			{
				if((Decode_Array[i]>=100&&Decode_Array[i]<=700)&&(Decode_Array[i+1]>=100&&Decode_Array[i+1]<=700))
    1f68:	d8 01       	movw	r26, r16
    1f6a:	14 96       	adiw	r26, 0x04	; 4
    1f6c:	8d 91       	ld	r24, X+
    1f6e:	9c 91       	ld	r25, X
    1f70:	15 97       	sbiw	r26, 0x05	; 5
    1f72:	84 56       	subi	r24, 0x64	; 100
    1f74:	90 40       	sbci	r25, 0x00	; 0
    1f76:	89 55       	subi	r24, 0x59	; 89
    1f78:	92 40       	sbci	r25, 0x02	; 2
    1f7a:	08 f0       	brcs	.+2      	; 0x1f7e <IR_Read+0xe6>
    1f7c:	3d c0       	rjmp	.+122    	; 0x1ff8 <IR_Read+0x160>
    1f7e:	f8 01       	movw	r30, r16
    1f80:	26 81       	ldd	r18, Z+6	; 0x06
    1f82:	37 81       	ldd	r19, Z+7	; 0x07
    1f84:	c9 01       	movw	r24, r18
    1f86:	84 56       	subi	r24, 0x64	; 100
    1f88:	90 40       	sbci	r25, 0x00	; 0
    1f8a:	89 55       	subi	r24, 0x59	; 89
    1f8c:	92 40       	sbci	r25, 0x02	; 2
    1f8e:	b8 f4       	brcc	.+46     	; 0x1fbe <IR_Read+0x126>
					CLEAR_BIT(*Code,(NEC_SIZE-k));
    1f90:	96 01       	movw	r18, r12
    1f92:	06 2e       	mov	r0, r22
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <IR_Read+0x102>
    1f96:	22 0f       	add	r18, r18
    1f98:	33 1f       	adc	r19, r19
    1f9a:	0a 94       	dec	r0
    1f9c:	e2 f7       	brpl	.-8      	; 0x1f96 <IR_Read+0xfe>
    1f9e:	20 95       	com	r18
    1fa0:	30 95       	com	r19
    1fa2:	44 27       	eor	r20, r20
    1fa4:	37 fd       	sbrc	r19, 7
    1fa6:	40 95       	com	r20
    1fa8:	54 2f       	mov	r21, r20
    1faa:	f7 01       	movw	r30, r14
    1fac:	80 81       	ld	r24, Z
    1fae:	91 81       	ldd	r25, Z+1	; 0x01
    1fb0:	a2 81       	ldd	r26, Z+2	; 0x02
    1fb2:	b3 81       	ldd	r27, Z+3	; 0x03
    1fb4:	82 23       	and	r24, r18
    1fb6:	93 23       	and	r25, r19
    1fb8:	a4 23       	and	r26, r20
    1fba:	b5 23       	and	r27, r21
    1fbc:	19 c0       	rjmp	.+50     	; 0x1ff0 <IR_Read+0x158>
				else if((Decode_Array[i]>=100&&Decode_Array[i]<=700)&&(Decode_Array[i+1]>=1200&&Decode_Array[i+1]<=1800))//1560us
    1fbe:	20 5b       	subi	r18, 0xB0	; 176
    1fc0:	34 40       	sbci	r19, 0x04	; 4
    1fc2:	29 55       	subi	r18, 0x59	; 89
    1fc4:	32 40       	sbci	r19, 0x02	; 2
    1fc6:	c0 f4       	brcc	.+48     	; 0x1ff8 <IR_Read+0x160>
					SET_BIT(*Code,(NEC_SIZE-k));
    1fc8:	96 01       	movw	r18, r12
    1fca:	06 2e       	mov	r0, r22
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <IR_Read+0x13a>
    1fce:	22 0f       	add	r18, r18
    1fd0:	33 1f       	adc	r19, r19
    1fd2:	0a 94       	dec	r0
    1fd4:	e2 f7       	brpl	.-8      	; 0x1fce <IR_Read+0x136>
    1fd6:	44 27       	eor	r20, r20
    1fd8:	37 fd       	sbrc	r19, 7
    1fda:	40 95       	com	r20
    1fdc:	54 2f       	mov	r21, r20
    1fde:	f7 01       	movw	r30, r14
    1fe0:	80 81       	ld	r24, Z
    1fe2:	91 81       	ldd	r25, Z+1	; 0x01
    1fe4:	a2 81       	ldd	r26, Z+2	; 0x02
    1fe6:	b3 81       	ldd	r27, Z+3	; 0x03
    1fe8:	82 2b       	or	r24, r18
    1fea:	93 2b       	or	r25, r19
    1fec:	a4 2b       	or	r26, r20
    1fee:	b5 2b       	or	r27, r21
    1ff0:	80 83       	st	Z, r24
    1ff2:	91 83       	std	Z+1, r25	; 0x01
    1ff4:	a2 83       	std	Z+2, r26	; 0x02
    1ff6:	b3 83       	std	Z+3, r27	; 0x03
				k++;
				i+=2;
    1ff8:	c7 57       	subi	r28, 0x77	; 119
    1ffa:	df 4f       	sbci	r29, 0xFF	; 255
    1ffc:	f8 81       	ld	r31, Y
    1ffe:	c9 58       	subi	r28, 0x89	; 137
    2000:	d0 40       	sbci	r29, 0x00	; 0
    2002:	fe 5f       	subi	r31, 0xFE	; 254
    2004:	c7 57       	subi	r28, 0x77	; 119
    2006:	df 4f       	sbci	r29, 0xFF	; 255
    2008:	f8 83       	st	Y, r31
    200a:	c9 58       	subi	r28, 0x89	; 137
    200c:	d0 40       	sbci	r29, 0x00	; 0
    200e:	0c 5f       	subi	r16, 0xFC	; 252
    2010:	1f 4f       	sbci	r17, 0xFF	; 255
    2012:	61 50       	subi	r22, 0x01	; 1
    2014:	70 40       	sbci	r23, 0x00	; 0
			i=START_FRAME;
			Protocol_Type[0]='N';
			Protocol_Type[1]='E';
			Protocol_Type[2]='C';
			Protocol_Type[3]='\0';
			while(i<=64)
    2016:	f2 34       	cpi	r31, 0x42	; 66
    2018:	09 f0       	breq	.+2      	; 0x201c <IR_Read+0x184>
    201a:	a6 cf       	rjmp	.-180    	; 0x1f68 <IR_Read+0xd0>
    201c:	8c c0       	rjmp	.+280    	; 0x2136 <IR_Read+0x29e>
					SET_BIT(*Code,(NEC_SIZE-k));
				k++;
				i+=2;
			}
		}
		else if((Decode_Array[0]>=2000&&Decode_Array[0]<=2800)&&(Decode_Array[1]>=100&&Decode_Array[1]<=800))
    201e:	20 5d       	subi	r18, 0xD0	; 208
    2020:	37 40       	sbci	r19, 0x07	; 7
    2022:	21 52       	subi	r18, 0x21	; 33
    2024:	33 40       	sbci	r19, 0x03	; 3
    2026:	08 f0       	brcs	.+2      	; 0x202a <IR_Read+0x192>
    2028:	86 c0       	rjmp	.+268    	; 0x2136 <IR_Read+0x29e>
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	9c 81       	ldd	r25, Y+4	; 0x04
    202e:	84 56       	subi	r24, 0x64	; 100
    2030:	90 40       	sbci	r25, 0x00	; 0
    2032:	8d 5b       	subi	r24, 0xBD	; 189
    2034:	92 40       	sbci	r25, 0x02	; 2
    2036:	08 f0       	brcs	.+2      	; 0x203a <IR_Read+0x1a2>
    2038:	7e c0       	rjmp	.+252    	; 0x2136 <IR_Read+0x29e>
		{
			i=START_FRAME;
			Protocol_Type[0]='S';
    203a:	83 e5       	ldi	r24, 0x53	; 83
    203c:	8c 93       	st	X, r24
			Protocol_Type[1]='O';
    203e:	8f e4       	ldi	r24, 0x4F	; 79
    2040:	11 96       	adiw	r26, 0x01	; 1
    2042:	8c 93       	st	X, r24
    2044:	11 97       	sbiw	r26, 0x01	; 1
			Protocol_Type[2]='N';
    2046:	8e e4       	ldi	r24, 0x4E	; 78
    2048:	12 96       	adiw	r26, 0x02	; 2
    204a:	8c 93       	st	X, r24
    204c:	12 97       	sbiw	r26, 0x02	; 2
			Protocol_Type[3]='Y';
    204e:	89 e5       	ldi	r24, 0x59	; 89
    2050:	13 96       	adiw	r26, 0x03	; 3
    2052:	8c 93       	st	X, r24
    2054:	13 97       	sbiw	r26, 0x03	; 3
			Protocol_Type[4]='\0';
    2056:	14 96       	adiw	r26, 0x04	; 4
    2058:	1c 92       	st	X, r1
    205a:	82 e0       	ldi	r24, 0x02	; 2
    205c:	c7 57       	subi	r28, 0x77	; 119
    205e:	df 4f       	sbci	r29, 0xFF	; 255
    2060:	88 83       	st	Y, r24
    2062:	c9 58       	subi	r28, 0x89	; 137
    2064:	d0 40       	sbci	r29, 0x00	; 0
    2066:	6b e0       	ldi	r22, 0x0B	; 11
    2068:	70 e0       	ldi	r23, 0x00	; 0
			while (i <=24) {//12bits 12*2=24
				if ((Decode_Array[i] >= 100 && Decode_Array[i] <= 750)&&(Decode_Array[i+1]>=100&&Decode_Array[i+1]<=750))
					CLEAR_BIT(*Code,(SONY_SIZE-k));
				else if ((Decode_Array[i] >= 950 && Decode_Array[i] <= 1400)&&(Decode_Array[i+1]>=100&&Decode_Array[i+1]<=750))
					SET_BIT(*Code,(SONY_SIZE-k));
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	c8 2e       	mov	r12, r24
    206e:	d1 2c       	mov	r13, r1
			Protocol_Type[1]='O';
			Protocol_Type[2]='N';
			Protocol_Type[3]='Y';
			Protocol_Type[4]='\0';
			while (i <=24) {//12bits 12*2=24
				if ((Decode_Array[i] >= 100 && Decode_Array[i] <= 750)&&(Decode_Array[i+1]>=100&&Decode_Array[i+1]<=750))
    2070:	d8 01       	movw	r26, r16
    2072:	14 96       	adiw	r26, 0x04	; 4
    2074:	2d 91       	ld	r18, X+
    2076:	3c 91       	ld	r19, X
    2078:	15 97       	sbiw	r26, 0x05	; 5
    207a:	c9 01       	movw	r24, r18
    207c:	84 56       	subi	r24, 0x64	; 100
    207e:	90 40       	sbci	r25, 0x00	; 0
    2080:	8b 58       	subi	r24, 0x8B	; 139
    2082:	92 40       	sbci	r25, 0x02	; 2
    2084:	f8 f4       	brcc	.+62     	; 0x20c4 <IR_Read+0x22c>
    2086:	f8 01       	movw	r30, r16
    2088:	86 81       	ldd	r24, Z+6	; 0x06
    208a:	97 81       	ldd	r25, Z+7	; 0x07
    208c:	84 56       	subi	r24, 0x64	; 100
    208e:	90 40       	sbci	r25, 0x00	; 0
    2090:	8b 58       	subi	r24, 0x8B	; 139
    2092:	92 40       	sbci	r25, 0x02	; 2
    2094:	b8 f4       	brcc	.+46     	; 0x20c4 <IR_Read+0x22c>
					CLEAR_BIT(*Code,(SONY_SIZE-k));
    2096:	96 01       	movw	r18, r12
    2098:	06 2e       	mov	r0, r22
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <IR_Read+0x208>
    209c:	22 0f       	add	r18, r18
    209e:	33 1f       	adc	r19, r19
    20a0:	0a 94       	dec	r0
    20a2:	e2 f7       	brpl	.-8      	; 0x209c <IR_Read+0x204>
    20a4:	20 95       	com	r18
    20a6:	30 95       	com	r19
    20a8:	44 27       	eor	r20, r20
    20aa:	37 fd       	sbrc	r19, 7
    20ac:	40 95       	com	r20
    20ae:	54 2f       	mov	r21, r20
    20b0:	f7 01       	movw	r30, r14
    20b2:	80 81       	ld	r24, Z
    20b4:	91 81       	ldd	r25, Z+1	; 0x01
    20b6:	a2 81       	ldd	r26, Z+2	; 0x02
    20b8:	b3 81       	ldd	r27, Z+3	; 0x03
    20ba:	82 23       	and	r24, r18
    20bc:	93 23       	and	r25, r19
    20be:	a4 23       	and	r26, r20
    20c0:	b5 23       	and	r27, r21
    20c2:	23 c0       	rjmp	.+70     	; 0x210a <IR_Read+0x272>
				else if ((Decode_Array[i] >= 950 && Decode_Array[i] <= 1400)&&(Decode_Array[i+1]>=100&&Decode_Array[i+1]<=750))
    20c4:	26 5b       	subi	r18, 0xB6	; 182
    20c6:	33 40       	sbci	r19, 0x03	; 3
    20c8:	23 5c       	subi	r18, 0xC3	; 195
    20ca:	31 40       	sbci	r19, 0x01	; 1
    20cc:	10 f5       	brcc	.+68     	; 0x2112 <IR_Read+0x27a>
    20ce:	d8 01       	movw	r26, r16
    20d0:	16 96       	adiw	r26, 0x06	; 6
    20d2:	8d 91       	ld	r24, X+
    20d4:	9c 91       	ld	r25, X
    20d6:	17 97       	sbiw	r26, 0x07	; 7
    20d8:	84 56       	subi	r24, 0x64	; 100
    20da:	90 40       	sbci	r25, 0x00	; 0
    20dc:	8b 58       	subi	r24, 0x8B	; 139
    20de:	92 40       	sbci	r25, 0x02	; 2
    20e0:	c0 f4       	brcc	.+48     	; 0x2112 <IR_Read+0x27a>
					SET_BIT(*Code,(SONY_SIZE-k));
    20e2:	96 01       	movw	r18, r12
    20e4:	06 2e       	mov	r0, r22
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <IR_Read+0x254>
    20e8:	22 0f       	add	r18, r18
    20ea:	33 1f       	adc	r19, r19
    20ec:	0a 94       	dec	r0
    20ee:	e2 f7       	brpl	.-8      	; 0x20e8 <IR_Read+0x250>
    20f0:	44 27       	eor	r20, r20
    20f2:	37 fd       	sbrc	r19, 7
    20f4:	40 95       	com	r20
    20f6:	54 2f       	mov	r21, r20
    20f8:	f7 01       	movw	r30, r14
    20fa:	80 81       	ld	r24, Z
    20fc:	91 81       	ldd	r25, Z+1	; 0x01
    20fe:	a2 81       	ldd	r26, Z+2	; 0x02
    2100:	b3 81       	ldd	r27, Z+3	; 0x03
    2102:	82 2b       	or	r24, r18
    2104:	93 2b       	or	r25, r19
    2106:	a4 2b       	or	r26, r20
    2108:	b5 2b       	or	r27, r21
    210a:	80 83       	st	Z, r24
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	a2 83       	std	Z+2, r26	; 0x02
    2110:	b3 83       	std	Z+3, r27	; 0x03
				k++;
				i += 2;
    2112:	c7 57       	subi	r28, 0x77	; 119
    2114:	df 4f       	sbci	r29, 0xFF	; 255
    2116:	f8 81       	ld	r31, Y
    2118:	c9 58       	subi	r28, 0x89	; 137
    211a:	d0 40       	sbci	r29, 0x00	; 0
    211c:	fe 5f       	subi	r31, 0xFE	; 254
    211e:	c7 57       	subi	r28, 0x77	; 119
    2120:	df 4f       	sbci	r29, 0xFF	; 255
    2122:	f8 83       	st	Y, r31
    2124:	c9 58       	subi	r28, 0x89	; 137
    2126:	d0 40       	sbci	r29, 0x00	; 0
    2128:	0c 5f       	subi	r16, 0xFC	; 252
    212a:	1f 4f       	sbci	r17, 0xFF	; 255
    212c:	61 50       	subi	r22, 0x01	; 1
    212e:	70 40       	sbci	r23, 0x00	; 0
			Protocol_Type[0]='S';
			Protocol_Type[1]='O';
			Protocol_Type[2]='N';
			Protocol_Type[3]='Y';
			Protocol_Type[4]='\0';
			while (i <=24) {//12bits 12*2=24
    2130:	fa 31       	cpi	r31, 0x1A	; 26
    2132:	09 f0       	breq	.+2      	; 0x2136 <IR_Read+0x29e>
    2134:	9d cf       	rjmp	.-198    	; 0x2070 <IR_Read+0x1d8>
    2136:	81 e0       	ldi	r24, 0x01	; 1
//			else
//				Ret_flag=E_NOK;
		}
	}
	return Ret_flag;
}
    2138:	c7 57       	subi	r28, 0x77	; 119
    213a:	df 4f       	sbci	r29, 0xFF	; 255
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	de bf       	out	0x3e, r29	; 62
    2142:	0f be       	out	0x3f, r0	; 63
    2144:	cd bf       	out	0x3d, r28	; 61
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	1f 91       	pop	r17
    214c:	0f 91       	pop	r16
    214e:	ff 90       	pop	r15
    2150:	ef 90       	pop	r14
    2152:	df 90       	pop	r13
    2154:	cf 90       	pop	r12
    2156:	08 95       	ret
	uint8 k=0;
	uint16 Decode_Array[68];
	Ret_flag=IR_Analysis(Decode_Array);//analyse the incoming waveform
	if(Ret_flag==E_OK)
	{
		if((Decode_Array[0]>=8400&&Decode_Array[0]<=10000)&&(Decode_Array[1]>=3800&&Decode_Array[1]<=4700))
    2158:	29 81       	ldd	r18, Y+1	; 0x01
    215a:	3a 81       	ldd	r19, Y+2	; 0x02
    215c:	c9 01       	movw	r24, r18
    215e:	80 5d       	subi	r24, 0xD0	; 208
    2160:	90 42       	sbci	r25, 0x20	; 32
    2162:	81 54       	subi	r24, 0x41	; 65
    2164:	96 40       	sbci	r25, 0x06	; 6
    2166:	08 f0       	brcs	.+2      	; 0x216a <IR_Read+0x2d2>
    2168:	5a cf       	rjmp	.-332    	; 0x201e <IR_Read+0x186>
    216a:	df ce       	rjmp	.-578    	; 0x1f2a <IR_Read+0x92>

0000216c <IR_INIT>:
	OVF_COUNT++;
}


Bool IR_INIT(IR_CONFIG Config_t)
{
    216c:	1f 93       	push	r17
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	2d 97       	sbiw	r28, 0x0d	; 13
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
	OVF_COUNT=0;
    2182:	10 92 a9 01 	sts	0x01A9, r1
    2186:	10 92 aa 01 	sts	0x01AA, r1
    218a:	10 92 ab 01 	sts	0x01AB, r1
    218e:	10 92 ac 01 	sts	0x01AC, r1
	Bool E_stat=E_OK;
	switch(Config_t)
    2192:	88 23       	and	r24, r24
    2194:	21 f0       	breq	.+8      	; 0x219e <IR_INIT+0x32>
    2196:	81 30       	cpi	r24, 0x01	; 1
    2198:	21 f0       	breq	.+8      	; 0x21a2 <IR_INIT+0x36>
    219a:	10 e0       	ldi	r17, 0x00	; 0
    219c:	05 c0       	rjmp	.+10     	; 0x21a8 <IR_INIT+0x3c>
	{
		case IR_RECIEVER:
			IR_PIN_INPUT();
    219e:	d0 98       	cbi	0x1a, 0	; 26
    21a0:	02 c0       	rjmp	.+4      	; 0x21a6 <IR_INIT+0x3a>
			break;
		case IR_TRANSMITTER:
			IR_PIN_OUTPUT();
    21a2:	d0 9a       	sbi	0x1a, 0	; 26
    21a4:	d8 98       	cbi	0x1b, 0	; 27
    21a6:	11 e0       	ldi	r17, 0x01	; 1
	TIMER1_CONFIG_t Timer1={
				.TIMER1_mode=TIMER1_Normal_non_pwm_mode,
				.WVFM_GEN=TIMER1_Normal_T1,
				.Prescaler=TIMER_FOSC_1,
				.Preload_val=0,
	};
    21a8:	fe 01       	movw	r30, r28
    21aa:	31 96       	adiw	r30, 0x01	; 1
    21ac:	8d e0       	ldi	r24, 0x0D	; 13
    21ae:	df 01       	movw	r26, r30
    21b0:	1d 92       	st	X+, r1
    21b2:	8a 95       	dec	r24
    21b4:	e9 f7       	brne	.-6      	; 0x21b0 <IR_INIT+0x44>
	TIMER1_INIT(&Timer1);//init Timer 1 as 1us Counter to construct code sent by remote
    21b6:	cf 01       	movw	r24, r30
    21b8:	0e 94 b9 13 	call	0x2772	; 0x2772 <TIMER1_INIT>
	return E_stat;
}
    21bc:	81 2f       	mov	r24, r17
    21be:	2d 96       	adiw	r28, 0x0d	; 13
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	1f 91       	pop	r17
    21d0:	08 95       	ret

000021d2 <Timer0_init>:
static Bool Timer0_CTC_Normal_mode(Timer0_config_t *Timer0);
static Bool Timer0_CTC_FastPwm_mode(Timer0_config_t *Timer0);
static Bool Timer0_clk_prescaler(Timer0_config_t *Timer0);

Bool Timer0_init(Timer0_config_t *Timer0)
{
    21d2:	fc 01       	movw	r30, r24
	Bool ret=E_OK;
	if(NULL==Timer0)
    21d4:	00 97       	sbiw	r24, 0x00	; 0
    21d6:	09 f4       	brne	.+2      	; 0x21da <Timer0_init+0x8>
    21d8:	96 c0       	rjmp	.+300    	; 0x2306 <Timer0_init+0x134>
		ret=E_NOK;
	else
	{
		TIMER0_STOP();
    21da:	83 b7       	in	r24, 0x33	; 51
    21dc:	88 7f       	andi	r24, 0xF8	; 248
    21de:	83 bf       	out	0x33, r24	; 51
}

static Bool Timer0_mode_set(Timer0_config_t *Timer0)
{
	Bool ret=E_OK;
	switch(Timer0->Mode)
    21e0:	80 81       	ld	r24, Z
    21e2:	81 30       	cpi	r24, 0x01	; 1
    21e4:	a1 f0       	breq	.+40     	; 0x220e <Timer0_init+0x3c>
    21e6:	81 30       	cpi	r24, 0x01	; 1
    21e8:	30 f0       	brcs	.+12     	; 0x21f6 <Timer0_init+0x24>
    21ea:	82 30       	cpi	r24, 0x02	; 2
    21ec:	d1 f0       	breq	.+52     	; 0x2222 <Timer0_init+0x50>
    21ee:	83 30       	cpi	r24, 0x03	; 3
    21f0:	09 f0       	breq	.+2      	; 0x21f4 <Timer0_init+0x22>
    21f2:	4f c0       	rjmp	.+158    	; 0x2292 <Timer0_init+0xc0>
    21f4:	2f c0       	rjmp	.+94     	; 0x2254 <Timer0_init+0x82>
	{
		case TIMER0_NORMAL:
			TIMER0_FOCO_ENABLE();
    21f6:	83 b7       	in	r24, 0x33	; 51
    21f8:	80 68       	ori	r24, 0x80	; 128
    21fa:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0,WGM00);
    21fc:	83 b7       	in	r24, 0x33	; 51
    21fe:	8f 7b       	andi	r24, 0xBF	; 191
    2200:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0,WGM01);
    2202:	83 b7       	in	r24, 0x33	; 51
    2204:	87 7f       	andi	r24, 0xF7	; 247
    2206:	83 bf       	out	0x33, r24	; 51
			TCNT0=Timer0->Preload_val;
    2208:	84 81       	ldd	r24, Z+4	; 0x04
    220a:	82 bf       	out	0x32, r24	; 50
    220c:	42 c0       	rjmp	.+132    	; 0x2292 <Timer0_init+0xc0>
			break;
		case TIMER0_PWM_PHASE_CORRECT:
			TIMER0_FOCO_DISABLE();
    220e:	83 b7       	in	r24, 0x33	; 51
    2210:	8f 77       	andi	r24, 0x7F	; 127
    2212:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,WGM00);
    2214:	83 b7       	in	r24, 0x33	; 51
    2216:	80 64       	ori	r24, 0x40	; 64
    2218:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0,WGM01);
    221a:	83 b7       	in	r24, 0x33	; 51
    221c:	87 7f       	andi	r24, 0xF7	; 247
    221e:	83 bf       	out	0x33, r24	; 51
    2220:	38 c0       	rjmp	.+112    	; 0x2292 <Timer0_init+0xc0>
			break;
		case TIMER0_CTC:
			TIMER0_FOCO_ENABLE();
    2222:	83 b7       	in	r24, 0x33	; 51
    2224:	80 68       	ori	r24, 0x80	; 128
    2226:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0,WGM00);
    2228:	83 b7       	in	r24, 0x33	; 51
    222a:	8f 7b       	andi	r24, 0xBF	; 191
    222c:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,WGM01);
    222e:	83 b7       	in	r24, 0x33	; 51
    2230:	88 60       	ori	r24, 0x08	; 8
    2232:	83 bf       	out	0x33, r24	; 51
}

static Bool Timer0_CTC_Normal_mode(Timer0_config_t *Timer0)
{
	Bool ret=E_OK;
	switch(Timer0->CTC_NON_PWM_mode)
    2234:	81 81       	ldd	r24, Z+1	; 0x01
    2236:	81 30       	cpi	r24, 0x01	; 1
    2238:	39 f0       	breq	.+14     	; 0x2248 <Timer0_init+0x76>
    223a:	81 30       	cpi	r24, 0x01	; 1
    223c:	e0 f0       	brcs	.+56     	; 0x2276 <Timer0_init+0xa4>
    223e:	82 30       	cpi	r24, 0x02	; 2
    2240:	e9 f0       	breq	.+58     	; 0x227c <Timer0_init+0xaa>
    2242:	83 30       	cpi	r24, 0x03	; 3
    2244:	21 f5       	brne	.+72     	; 0x228e <Timer0_init+0xbc>
    2246:	1d c0       	rjmp	.+58     	; 0x2282 <Timer0_init+0xb0>
		case TIMER0_CTC_NORMAL_nonPwm:
			CLEAR_BIT(TCCR0,COM00);
			CLEAR_BIT(TCCR0,COM01);
			break;
		case TIMER0_CTC_SET_TC0_nonPwm:
			SET_BIT(TCCR0,COM00);
    2248:	83 b7       	in	r24, 0x33	; 51
    224a:	80 61       	ori	r24, 0x10	; 16
    224c:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0,COM01);
    224e:	83 b7       	in	r24, 0x33	; 51
    2250:	8f 7d       	andi	r24, 0xDF	; 223
    2252:	1c c0       	rjmp	.+56     	; 0x228c <Timer0_init+0xba>
			SET_BIT(TCCR0,WGM01);
			Timer0_CTC_Normal_mode(Timer0);
			OCR0=Timer0->Preload_val;
			break;
		case TIMER0_FAST_PWM:
			TIMER0_FOCO_DISABLE();
    2254:	83 b7       	in	r24, 0x33	; 51
    2256:	8f 77       	andi	r24, 0x7F	; 127
    2258:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,WGM00);
    225a:	83 b7       	in	r24, 0x33	; 51
    225c:	80 64       	ori	r24, 0x40	; 64
    225e:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,WGM01);
    2260:	83 b7       	in	r24, 0x33	; 51
    2262:	88 60       	ori	r24, 0x08	; 8
    2264:	83 bf       	out	0x33, r24	; 51
			SET_BIT(DDRB,PB3);
    2266:	bb 9a       	sbi	0x17, 3	; 23
}

static Bool Timer0_CTC_FastPwm_mode(Timer0_config_t *Timer0)
{
	Bool ret=E_OK;
	switch(Timer0->CTC_FAST_PWM_Mode)
    2268:	82 81       	ldd	r24, Z+2	; 0x02
    226a:	82 30       	cpi	r24, 0x02	; 2
    226c:	39 f0       	breq	.+14     	; 0x227c <Timer0_init+0xaa>
    226e:	83 30       	cpi	r24, 0x03	; 3
    2270:	41 f0       	breq	.+16     	; 0x2282 <Timer0_init+0xb0>
    2272:	88 23       	and	r24, r24
    2274:	61 f4       	brne	.+24     	; 0x228e <Timer0_init+0xbc>
	{
		case TIMER0_CTC_NORMAL:
			CLEAR_BIT(TCCR0,COM00);
    2276:	83 b7       	in	r24, 0x33	; 51
    2278:	8f 7e       	andi	r24, 0xEF	; 239
    227a:	e8 cf       	rjmp	.-48     	; 0x224c <Timer0_init+0x7a>
			break;
		case TIMER0_CTC_RESERVED:
			ret=E_OK;
			break;
		case TIMER0_CTC_CLEAR_TC0:
			CLEAR_BIT(TCCR0,COM00);
    227c:	83 b7       	in	r24, 0x33	; 51
    227e:	8f 7e       	andi	r24, 0xEF	; 239
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <Timer0_init+0xb4>
			SET_BIT(TCCR0,COM01);
			break;
		case TIMER0_CTC_SET_TC0:
			SET_BIT(TCCR0,COM00);
    2282:	83 b7       	in	r24, 0x33	; 51
    2284:	80 61       	ori	r24, 0x10	; 16
    2286:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,COM01);
    2288:	83 b7       	in	r24, 0x33	; 51
    228a:	80 62       	ori	r24, 0x20	; 32
    228c:	83 bf       	out	0x33, r24	; 51
			TIMER0_FOCO_DISABLE();
			SET_BIT(TCCR0,WGM00);
			SET_BIT(TCCR0,WGM01);
			SET_BIT(DDRB,PB3);
			Timer0_CTC_FastPwm_mode(Timer0);
			OCR0=Timer0->Preload_val;
    228e:	84 81       	ldd	r24, Z+4	; 0x04
    2290:	8c bf       	out	0x3c, r24	; 60
}

static Bool Timer0_clk_prescaler(Timer0_config_t *Timer0)
{
	Bool ret=E_OK;
	switch(Timer0->Prescaler)
    2292:	83 81       	ldd	r24, Z+3	; 0x03
    2294:	83 30       	cpi	r24, 0x03	; 3
    2296:	01 f1       	breq	.+64     	; 0x22d8 <Timer0_init+0x106>
    2298:	84 30       	cpi	r24, 0x04	; 4
    229a:	28 f4       	brcc	.+10     	; 0x22a6 <Timer0_init+0xd4>
    229c:	81 30       	cpi	r24, 0x01	; 1
    229e:	81 f0       	breq	.+32     	; 0x22c0 <Timer0_init+0xee>
    22a0:	82 30       	cpi	r24, 0x02	; 2
    22a2:	b8 f4       	brcc	.+46     	; 0x22d2 <Timer0_init+0x100>
    22a4:	07 c0       	rjmp	.+14     	; 0x22b4 <Timer0_init+0xe2>
    22a6:	85 30       	cpi	r24, 0x05	; 5
    22a8:	01 f1       	breq	.+64     	; 0x22ea <Timer0_init+0x118>
    22aa:	85 30       	cpi	r24, 0x05	; 5
    22ac:	c0 f0       	brcs	.+48     	; 0x22de <Timer0_init+0x10c>
    22ae:	86 30       	cpi	r24, 0x06	; 6
    22b0:	51 f5       	brne	.+84     	; 0x2306 <Timer0_init+0x134>
    22b2:	1e c0       	rjmp	.+60     	; 0x22f0 <Timer0_init+0x11e>
	{
		case TIMER0_FOSC_:
			SET_BIT(TCCR0,CS00);
    22b4:	83 b7       	in	r24, 0x33	; 51
    22b6:	81 60       	ori	r24, 0x01	; 1
    22b8:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0,CS01);
    22ba:	83 b7       	in	r24, 0x33	; 51
    22bc:	8d 7f       	andi	r24, 0xFD	; 253
    22be:	05 c0       	rjmp	.+10     	; 0x22ca <Timer0_init+0xf8>
			CLEAR_BIT(TCCR0,CS02);
			break;
		case TIMER0_FOSC_8:
			CLEAR_BIT(TCCR0,CS00);
    22c0:	83 b7       	in	r24, 0x33	; 51
    22c2:	8e 7f       	andi	r24, 0xFE	; 254
    22c4:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,CS01);
    22c6:	83 b7       	in	r24, 0x33	; 51
    22c8:	82 60       	ori	r24, 0x02	; 2
    22ca:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0,CS02);
    22cc:	83 b7       	in	r24, 0x33	; 51
    22ce:	8b 7f       	andi	r24, 0xFB	; 251
    22d0:	17 c0       	rjmp	.+46     	; 0x2300 <Timer0_init+0x12e>
			break;
		case TIMER0_FOSC_64:
			SET_BIT(TCCR0,CS00);
    22d2:	83 b7       	in	r24, 0x33	; 51
    22d4:	81 60       	ori	r24, 0x01	; 1
    22d6:	f6 cf       	rjmp	.-20     	; 0x22c4 <Timer0_init+0xf2>
			SET_BIT(TCCR0,CS01);
			CLEAR_BIT(TCCR0,CS02);
			break;
		case TIMER0_FOSC_256:
			CLEAR_BIT(TCCR0,CS00);
    22d8:	83 b7       	in	r24, 0x33	; 51
    22da:	8e 7f       	andi	r24, 0xFE	; 254
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <Timer0_init+0x110>
			CLEAR_BIT(TCCR0,CS01);
			SET_BIT(TCCR0,CS02);
			break;
		case TIMER0_FOSC_1024:
			SET_BIT(TCCR0,CS00);
    22de:	83 b7       	in	r24, 0x33	; 51
    22e0:	81 60       	ori	r24, 0x01	; 1
    22e2:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0,CS01);
    22e4:	83 b7       	in	r24, 0x33	; 51
    22e6:	8d 7f       	andi	r24, 0xFD	; 253
    22e8:	08 c0       	rjmp	.+16     	; 0x22fa <Timer0_init+0x128>
			SET_BIT(TCCR0,CS02);
			break;
		case TIMER0_T0_COUNTER_MODE_FEDG:
			CLEAR_BIT(TCCR0,CS00);
    22ea:	83 b7       	in	r24, 0x33	; 51
    22ec:	8e 7f       	andi	r24, 0xFE	; 254
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <Timer0_init+0x122>
			SET_BIT(TCCR0,CS01);
			SET_BIT(TCCR0,CS02);
			break;
		case TIMER0_T0_COUNTER_MODE_REDG:
			SET_BIT(TCCR0,CS00);
    22f0:	83 b7       	in	r24, 0x33	; 51
    22f2:	81 60       	ori	r24, 0x01	; 1
    22f4:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,CS01);
    22f6:	83 b7       	in	r24, 0x33	; 51
    22f8:	82 60       	ori	r24, 0x02	; 2
    22fa:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,CS02);
    22fc:	83 b7       	in	r24, 0x33	; 51
    22fe:	84 60       	ori	r24, 0x04	; 4
    2300:	83 bf       	out	0x33, r24	; 51
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	08 95       	ret
    2306:	80 e0       	ldi	r24, 0x00	; 0
#if TIMER0_INTERRUPT_ENABLE==FEATURE_ENABLE
#endif
		ret=Timer0_clk_prescaler(Timer0);
	}
	return ret;
}
    2308:	08 95       	ret

0000230a <Timer0_Setduty>:
}

Bool Timer0_Setduty(uint8 Duty)
{
	Bool ret=E_OK;
	OCR0=(uint8)((Duty/(float)100)*256);
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	aa 27       	eor	r26, r26
    230e:	97 fd       	sbrc	r25, 7
    2310:	a0 95       	com	r26
    2312:	ba 2f       	mov	r27, r26
    2314:	bc 01       	movw	r22, r24
    2316:	cd 01       	movw	r24, r26
    2318:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	48 ec       	ldi	r20, 0xC8	; 200
    2322:	52 e4       	ldi	r21, 0x42	; 66
    2324:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e8       	ldi	r20, 0x80	; 128
    232e:	53 e4       	ldi	r21, 0x43	; 67
    2330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2338:	6c bf       	out	0x3c, r22	; 60
	return ret;
}
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	08 95       	ret

0000233e <TIMER1_SET_DUTY>:
	}
	return ret;
}

Bool TIMER1_SET_DUTY(TIMER1_CONFIG_t *Timer1,uint8 duty,uint8 duty_1)
{
    233e:	9f 92       	push	r9
    2340:	af 92       	push	r10
    2342:	bf 92       	push	r11
    2344:	cf 92       	push	r12
    2346:	df 92       	push	r13
    2348:	ef 92       	push	r14
    234a:	ff 92       	push	r15
    234c:	0f 93       	push	r16
    234e:	1f 93       	push	r17
    2350:	fc 01       	movw	r30, r24
    2352:	94 2e       	mov	r9, r20
	Bool ret = E_OK;
	if (NULL == Timer1)
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	09 f4       	brne	.+2      	; 0x235a <TIMER1_SET_DUTY+0x1c>
    2358:	55 c1       	rjmp	.+682    	; 0x2604 <TIMER1_SET_DUTY+0x2c6>
		ret = E_NOK;
	else {
		switch (Timer1->WVFM_GEN)
    235a:	82 81       	ldd	r24, Z+2	; 0x02
    235c:	87 30       	cpi	r24, 0x07	; 7
    235e:	09 f4       	brne	.+2      	; 0x2362 <TIMER1_SET_DUTY+0x24>
    2360:	06 c1       	rjmp	.+524    	; 0x256e <TIMER1_SET_DUTY+0x230>
    2362:	88 30       	cpi	r24, 0x08	; 8
    2364:	38 f4       	brcc	.+14     	; 0x2374 <TIMER1_SET_DUTY+0x36>
    2366:	85 30       	cpi	r24, 0x05	; 5
    2368:	09 f4       	brne	.+2      	; 0x236c <TIMER1_SET_DUTY+0x2e>
    236a:	71 c0       	rjmp	.+226    	; 0x244e <TIMER1_SET_DUTY+0x110>
    236c:	86 30       	cpi	r24, 0x06	; 6
    236e:	09 f0       	breq	.+2      	; 0x2372 <TIMER1_SET_DUTY+0x34>
    2370:	49 c1       	rjmp	.+658    	; 0x2604 <TIMER1_SET_DUTY+0x2c6>
    2372:	b8 c0       	rjmp	.+368    	; 0x24e4 <TIMER1_SET_DUTY+0x1a6>
    2374:	8d 30       	cpi	r24, 0x0D	; 13
    2376:	21 f0       	breq	.+8      	; 0x2380 <TIMER1_SET_DUTY+0x42>
    2378:	8e 30       	cpi	r24, 0x0E	; 14
    237a:	09 f0       	breq	.+2      	; 0x237e <TIMER1_SET_DUTY+0x40>
    237c:	43 c1       	rjmp	.+646    	; 0x2604 <TIMER1_SET_DUTY+0x2c6>
    237e:	4b c0       	rjmp	.+150    	; 0x2416 <TIMER1_SET_DUTY+0xd8>
		{
			case TIMER1_PWM_FAST_ICR1:
				switch(Timer1->REG_active)
    2380:	80 81       	ld	r24, Z
    2382:	81 30       	cpi	r24, 0x01	; 1
    2384:	09 f4       	brne	.+2      	; 0x2388 <TIMER1_SET_DUTY+0x4a>
    2386:	43 c0       	rjmp	.+134    	; 0x240e <TIMER1_SET_DUTY+0xd0>
    2388:	81 30       	cpi	r24, 0x01	; 1
    238a:	20 f0       	brcs	.+8      	; 0x2394 <TIMER1_SET_DUTY+0x56>
    238c:	82 30       	cpi	r24, 0x02	; 2
    238e:	09 f0       	breq	.+2      	; 0x2392 <TIMER1_SET_DUTY+0x54>
    2390:	3b c1       	rjmp	.+630    	; 0x2608 <TIMER1_SET_DUTY+0x2ca>
    2392:	1c c0       	rjmp	.+56     	; 0x23cc <TIMER1_SET_DUTY+0x8e>
				{
					case TIMER1_COMPA_ACTIVE:
						OCR1A=(duty/(float)100)*ICR1;
    2394:	e6 b4       	in	r14, 0x26	; 38
    2396:	f7 b4       	in	r15, 0x27	; 39
    2398:	70 e0       	ldi	r23, 0x00	; 0
    239a:	88 27       	eor	r24, r24
    239c:	77 fd       	sbrc	r23, 7
    239e:	80 95       	com	r24
    23a0:	98 2f       	mov	r25, r24
    23a2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	48 ec       	ldi	r20, 0xC8	; 200
    23ac:	52 e4       	ldi	r21, 0x42	; 66
    23ae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23b2:	5b 01       	movw	r10, r22
    23b4:	6c 01       	movw	r12, r24
    23b6:	00 e0       	ldi	r16, 0x00	; 0
    23b8:	10 e0       	ldi	r17, 0x00	; 0
    23ba:	c8 01       	movw	r24, r16
    23bc:	b7 01       	movw	r22, r14
    23be:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    23c2:	9b 01       	movw	r18, r22
    23c4:	ac 01       	movw	r20, r24
    23c6:	c6 01       	movw	r24, r12
    23c8:	b5 01       	movw	r22, r10
    23ca:	5b c0       	rjmp	.+182    	; 0x2482 <TIMER1_SET_DUTY+0x144>
						break;
					case TIMER1_COMPB_ACTIVE:
						OCR1B=(duty_1/(float)100)*ICR1;
						break;
					case TIMER1_COMPA_COMPB_ACTIVE:
						OCR1A=(duty/(float)100)*ICR1;
    23cc:	e6 b4       	in	r14, 0x26	; 38
    23ce:	f7 b4       	in	r15, 0x27	; 39
    23d0:	70 e0       	ldi	r23, 0x00	; 0
    23d2:	88 27       	eor	r24, r24
    23d4:	77 fd       	sbrc	r23, 7
    23d6:	80 95       	com	r24
    23d8:	98 2f       	mov	r25, r24
    23da:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	48 ec       	ldi	r20, 0xC8	; 200
    23e4:	52 e4       	ldi	r21, 0x42	; 66
    23e6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23ea:	5b 01       	movw	r10, r22
    23ec:	6c 01       	movw	r12, r24
    23ee:	00 e0       	ldi	r16, 0x00	; 0
    23f0:	10 e0       	ldi	r17, 0x00	; 0
    23f2:	c8 01       	movw	r24, r16
    23f4:	b7 01       	movw	r22, r14
    23f6:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    23fa:	9b 01       	movw	r18, r22
    23fc:	ac 01       	movw	r20, r24
    23fe:	c6 01       	movw	r24, r12
    2400:	b5 01       	movw	r22, r10
    2402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240a:	7b bd       	out	0x2b, r23	; 43
    240c:	6a bd       	out	0x2a, r22	; 42
						OCR1B=(duty_1/(float)100)*ICR1;
    240e:	e6 b4       	in	r14, 0x26	; 38
    2410:	f7 b4       	in	r15, 0x27	; 39
    2412:	69 2d       	mov	r22, r9
    2414:	02 c0       	rjmp	.+4      	; 0x241a <TIMER1_SET_DUTY+0xdc>
						break;
				}
				break;
			case TIMER1_PWM_FAST_OCR1:
				OCR1B=(duty/(float)100)*OCR1A;
    2416:	ea b4       	in	r14, 0x2a	; 42
    2418:	fb b4       	in	r15, 0x2b	; 43
    241a:	70 e0       	ldi	r23, 0x00	; 0
    241c:	88 27       	eor	r24, r24
    241e:	77 fd       	sbrc	r23, 7
    2420:	80 95       	com	r24
    2422:	98 2f       	mov	r25, r24
    2424:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	48 ec       	ldi	r20, 0xC8	; 200
    242e:	52 e4       	ldi	r21, 0x42	; 66
    2430:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2434:	5b 01       	movw	r10, r22
    2436:	6c 01       	movw	r12, r24
    2438:	00 e0       	ldi	r16, 0x00	; 0
    243a:	10 e0       	ldi	r17, 0x00	; 0
    243c:	c8 01       	movw	r24, r16
    243e:	b7 01       	movw	r22, r14
    2440:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    2444:	9b 01       	movw	r18, r22
    2446:	ac 01       	movw	r20, r24
    2448:	c6 01       	movw	r24, r12
    244a:	b5 01       	movw	r22, r10
    244c:	d4 c0       	rjmp	.+424    	; 0x25f6 <TIMER1_SET_DUTY+0x2b8>
				break;
			case TIMER1_PWM_Fast_8_bit:
				switch (Timer1->REG_active)
    244e:	80 81       	ld	r24, Z
    2450:	81 30       	cpi	r24, 0x01	; 1
    2452:	a9 f1       	breq	.+106    	; 0x24be <TIMER1_SET_DUTY+0x180>
    2454:	81 30       	cpi	r24, 0x01	; 1
    2456:	20 f0       	brcs	.+8      	; 0x2460 <TIMER1_SET_DUTY+0x122>
    2458:	82 30       	cpi	r24, 0x02	; 2
    245a:	09 f0       	breq	.+2      	; 0x245e <TIMER1_SET_DUTY+0x120>
    245c:	d5 c0       	rjmp	.+426    	; 0x2608 <TIMER1_SET_DUTY+0x2ca>
    245e:	18 c0       	rjmp	.+48     	; 0x2490 <TIMER1_SET_DUTY+0x152>
				{
					case TIMER1_COMPA_ACTIVE:
						OCR1A = (duty / (float) 100) * PWM_8BITS_MAX;
    2460:	70 e0       	ldi	r23, 0x00	; 0
    2462:	88 27       	eor	r24, r24
    2464:	77 fd       	sbrc	r23, 7
    2466:	80 95       	com	r24
    2468:	98 2f       	mov	r25, r24
    246a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	48 ec       	ldi	r20, 0xC8	; 200
    2474:	52 e4       	ldi	r21, 0x42	; 66
    2476:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e8       	ldi	r20, 0x80	; 128
    2480:	53 e4       	ldi	r21, 0x43	; 67
    2482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248a:	7b bd       	out	0x2b, r23	; 43
    248c:	6a bd       	out	0x2a, r22	; 42
    248e:	bc c0       	rjmp	.+376    	; 0x2608 <TIMER1_SET_DUTY+0x2ca>
						break;
					case TIMER1_COMPB_ACTIVE:
						OCR1B = (duty_1 / (float) 100) * PWM_8BITS_MAX;
						break;
					case TIMER1_COMPA_COMPB_ACTIVE:
						OCR1A = (duty / (float) 100) * PWM_8BITS_MAX;
    2490:	70 e0       	ldi	r23, 0x00	; 0
    2492:	88 27       	eor	r24, r24
    2494:	77 fd       	sbrc	r23, 7
    2496:	80 95       	com	r24
    2498:	98 2f       	mov	r25, r24
    249a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	48 ec       	ldi	r20, 0xC8	; 200
    24a4:	52 e4       	ldi	r21, 0x42	; 66
    24a6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	40 e8       	ldi	r20, 0x80	; 128
    24b0:	53 e4       	ldi	r21, 0x43	; 67
    24b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ba:	7b bd       	out	0x2b, r23	; 43
    24bc:	6a bd       	out	0x2a, r22	; 42
						OCR1B = (duty_1 / (float) 100) * PWM_8BITS_MAX;
    24be:	69 2d       	mov	r22, r9
    24c0:	70 e0       	ldi	r23, 0x00	; 0
    24c2:	88 27       	eor	r24, r24
    24c4:	77 fd       	sbrc	r23, 7
    24c6:	80 95       	com	r24
    24c8:	98 2f       	mov	r25, r24
    24ca:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	48 ec       	ldi	r20, 0xC8	; 200
    24d4:	52 e4       	ldi	r21, 0x42	; 66
    24d6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e8       	ldi	r20, 0x80	; 128
    24e0:	53 e4       	ldi	r21, 0x43	; 67
    24e2:	89 c0       	rjmp	.+274    	; 0x25f6 <TIMER1_SET_DUTY+0x2b8>
						break;
				}
				break;
			case TIMER1_PWM_Fast_9_bit:
				switch (Timer1->REG_active)
    24e4:	80 81       	ld	r24, Z
    24e6:	81 30       	cpi	r24, 0x01	; 1
    24e8:	79 f1       	breq	.+94     	; 0x2548 <TIMER1_SET_DUTY+0x20a>
    24ea:	81 30       	cpi	r24, 0x01	; 1
    24ec:	20 f0       	brcs	.+8      	; 0x24f6 <TIMER1_SET_DUTY+0x1b8>
    24ee:	82 30       	cpi	r24, 0x02	; 2
    24f0:	09 f0       	breq	.+2      	; 0x24f4 <TIMER1_SET_DUTY+0x1b6>
    24f2:	8a c0       	rjmp	.+276    	; 0x2608 <TIMER1_SET_DUTY+0x2ca>
    24f4:	12 c0       	rjmp	.+36     	; 0x251a <TIMER1_SET_DUTY+0x1dc>
				{
					case TIMER1_COMPA_ACTIVE:
						OCR1A = (duty / (float) 100) * PWM_9BITS_MAX;
    24f6:	70 e0       	ldi	r23, 0x00	; 0
    24f8:	88 27       	eor	r24, r24
    24fa:	77 fd       	sbrc	r23, 7
    24fc:	80 95       	com	r24
    24fe:	98 2f       	mov	r25, r24
    2500:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	48 ec       	ldi	r20, 0xC8	; 200
    250a:	52 e4       	ldi	r21, 0x42	; 66
    250c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e0       	ldi	r20, 0x00	; 0
    2516:	54 e4       	ldi	r21, 0x44	; 68
    2518:	b4 cf       	rjmp	.-152    	; 0x2482 <TIMER1_SET_DUTY+0x144>
						break;
					case TIMER1_COMPB_ACTIVE:
						OCR1B = (duty_1 / (float) 100) * PWM_9BITS_MAX;
						break;
					case TIMER1_COMPA_COMPB_ACTIVE:
						OCR1A = (duty / (float) 100) * PWM_9BITS_MAX;
    251a:	70 e0       	ldi	r23, 0x00	; 0
    251c:	88 27       	eor	r24, r24
    251e:	77 fd       	sbrc	r23, 7
    2520:	80 95       	com	r24
    2522:	98 2f       	mov	r25, r24
    2524:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	48 ec       	ldi	r20, 0xC8	; 200
    252e:	52 e4       	ldi	r21, 0x42	; 66
    2530:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	40 e0       	ldi	r20, 0x00	; 0
    253a:	54 e4       	ldi	r21, 0x44	; 68
    253c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2544:	7b bd       	out	0x2b, r23	; 43
    2546:	6a bd       	out	0x2a, r22	; 42
						OCR1B = (duty_1 / (float) 100) * PWM_9BITS_MAX;
    2548:	69 2d       	mov	r22, r9
    254a:	70 e0       	ldi	r23, 0x00	; 0
    254c:	88 27       	eor	r24, r24
    254e:	77 fd       	sbrc	r23, 7
    2550:	80 95       	com	r24
    2552:	98 2f       	mov	r25, r24
    2554:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	48 ec       	ldi	r20, 0xC8	; 200
    255e:	52 e4       	ldi	r21, 0x42	; 66
    2560:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e0       	ldi	r20, 0x00	; 0
    256a:	54 e4       	ldi	r21, 0x44	; 68
    256c:	44 c0       	rjmp	.+136    	; 0x25f6 <TIMER1_SET_DUTY+0x2b8>
						break;
				}
				break;
			case TIMER1_PWM_Fast_10_bit:
				switch (Timer1->REG_active)
    256e:	80 81       	ld	r24, Z
    2570:	81 30       	cpi	r24, 0x01	; 1
    2572:	79 f1       	breq	.+94     	; 0x25d2 <TIMER1_SET_DUTY+0x294>
    2574:	81 30       	cpi	r24, 0x01	; 1
    2576:	20 f0       	brcs	.+8      	; 0x2580 <TIMER1_SET_DUTY+0x242>
    2578:	82 30       	cpi	r24, 0x02	; 2
    257a:	09 f0       	breq	.+2      	; 0x257e <TIMER1_SET_DUTY+0x240>
    257c:	45 c0       	rjmp	.+138    	; 0x2608 <TIMER1_SET_DUTY+0x2ca>
    257e:	12 c0       	rjmp	.+36     	; 0x25a4 <TIMER1_SET_DUTY+0x266>
				{
					case TIMER1_COMPA_ACTIVE:
						OCR1A = (duty / (float) 100) * PWM_10BITS_MAX;
    2580:	70 e0       	ldi	r23, 0x00	; 0
    2582:	88 27       	eor	r24, r24
    2584:	77 fd       	sbrc	r23, 7
    2586:	80 95       	com	r24
    2588:	98 2f       	mov	r25, r24
    258a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	48 ec       	ldi	r20, 0xC8	; 200
    2594:	52 e4       	ldi	r21, 0x42	; 66
    2596:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e8       	ldi	r20, 0x80	; 128
    25a0:	54 e4       	ldi	r21, 0x44	; 68
    25a2:	6f cf       	rjmp	.-290    	; 0x2482 <TIMER1_SET_DUTY+0x144>
						break;
					case TIMER1_COMPB_ACTIVE:
						OCR1B = (duty_1 / (float) 100) * PWM_10BITS_MAX;
						break;
					case TIMER1_COMPA_COMPB_ACTIVE:
						OCR1A = (duty / (float) 100) * PWM_10BITS_MAX;
    25a4:	70 e0       	ldi	r23, 0x00	; 0
    25a6:	88 27       	eor	r24, r24
    25a8:	77 fd       	sbrc	r23, 7
    25aa:	80 95       	com	r24
    25ac:	98 2f       	mov	r25, r24
    25ae:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	48 ec       	ldi	r20, 0xC8	; 200
    25b8:	52 e4       	ldi	r21, 0x42	; 66
    25ba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e8       	ldi	r20, 0x80	; 128
    25c4:	54 e4       	ldi	r21, 0x44	; 68
    25c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ce:	7b bd       	out	0x2b, r23	; 43
    25d0:	6a bd       	out	0x2a, r22	; 42
						OCR1B = (duty_1 / (float) 100) * PWM_10BITS_MAX;
    25d2:	69 2d       	mov	r22, r9
    25d4:	70 e0       	ldi	r23, 0x00	; 0
    25d6:	88 27       	eor	r24, r24
    25d8:	77 fd       	sbrc	r23, 7
    25da:	80 95       	com	r24
    25dc:	98 2f       	mov	r25, r24
    25de:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	48 ec       	ldi	r20, 0xC8	; 200
    25e8:	52 e4       	ldi	r21, 0x42	; 66
    25ea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e8       	ldi	r20, 0x80	; 128
    25f4:	54 e4       	ldi	r21, 0x44	; 68
    25f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fe:	79 bd       	out	0x29, r23	; 41
    2600:	68 bd       	out	0x28, r22	; 40
    2602:	02 c0       	rjmp	.+4      	; 0x2608 <TIMER1_SET_DUTY+0x2ca>
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	01 c0       	rjmp	.+2      	; 0x260a <TIMER1_SET_DUTY+0x2cc>
    2608:	81 e0       	ldi	r24, 0x01	; 1
			default:
				ret = E_NOK;
		}
	}
	return ret;
}
    260a:	1f 91       	pop	r17
    260c:	0f 91       	pop	r16
    260e:	ff 90       	pop	r15
    2610:	ef 90       	pop	r14
    2612:	df 90       	pop	r13
    2614:	cf 90       	pop	r12
    2616:	bf 90       	pop	r11
    2618:	af 90       	pop	r10
    261a:	9f 90       	pop	r9
    261c:	08 95       	ret

0000261e <TIMER1_SET_Freq>:

Bool TIMER1_SET_Freq(TIMER1_CONFIG_t *Timer1,uint32 Freq)
{
    261e:	fc 01       	movw	r30, r24
	Bool ret = E_OK;
	uint16 TOP;
	if (NULL == Timer1)
    2620:	00 97       	sbiw	r24, 0x00	; 0
    2622:	09 f4       	brne	.+2      	; 0x2626 <TIMER1_SET_Freq+0x8>
    2624:	a4 c0       	rjmp	.+328    	; 0x276e <TIMER1_SET_Freq+0x150>
		ret = E_NOK;
	else {
		switch(Timer1->WVFM_GEN)
    2626:	82 81       	ldd	r24, Z+2	; 0x02
    2628:	8d 30       	cpi	r24, 0x0D	; 13
    262a:	21 f0       	breq	.+8      	; 0x2634 <TIMER1_SET_Freq+0x16>
    262c:	8e 30       	cpi	r24, 0x0E	; 14
    262e:	09 f0       	breq	.+2      	; 0x2632 <TIMER1_SET_Freq+0x14>
    2630:	9e c0       	rjmp	.+316    	; 0x276e <TIMER1_SET_Freq+0x150>
    2632:	4e c0       	rjmp	.+156    	; 0x26d0 <TIMER1_SET_Freq+0xb2>
			case TIMER1_PWM_FAST_ICR1:
				/*
				 * Frequency=Fosc/(N.(1+TOP))
				 * TOP=(Fosc/Frequency.N)-1
				 */
				 switch(Timer1->Prescaler)
    2634:	83 81       	ldd	r24, Z+3	; 0x03
    2636:	82 30       	cpi	r24, 0x02	; 2
    2638:	e1 f0       	breq	.+56     	; 0x2672 <TIMER1_SET_Freq+0x54>
    263a:	83 30       	cpi	r24, 0x03	; 3
    263c:	30 f4       	brcc	.+12     	; 0x264a <TIMER1_SET_Freq+0x2c>
    263e:	88 23       	and	r24, r24
    2640:	51 f0       	breq	.+20     	; 0x2656 <TIMER1_SET_Freq+0x38>
    2642:	81 30       	cpi	r24, 0x01	; 1
    2644:	09 f0       	breq	.+2      	; 0x2648 <TIMER1_SET_Freq+0x2a>
    2646:	93 c0       	rjmp	.+294    	; 0x276e <TIMER1_SET_Freq+0x150>
    2648:	0b c0       	rjmp	.+22     	; 0x2660 <TIMER1_SET_Freq+0x42>
    264a:	83 30       	cpi	r24, 0x03	; 3
    264c:	d9 f0       	breq	.+54     	; 0x2684 <TIMER1_SET_Freq+0x66>
    264e:	84 30       	cpi	r24, 0x04	; 4
    2650:	09 f0       	breq	.+2      	; 0x2654 <TIMER1_SET_Freq+0x36>
    2652:	8d c0       	rjmp	.+282    	; 0x276e <TIMER1_SET_Freq+0x150>
    2654:	20 c0       	rjmp	.+64     	; 0x2696 <TIMER1_SET_Freq+0x78>
				 {
					case TIMER_FOSC_1:
						TOP=(F_CPU/(float)Freq)-1;
    2656:	cb 01       	movw	r24, r22
    2658:	ba 01       	movw	r22, r20
    265a:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    265e:	25 c0       	rjmp	.+74     	; 0x26aa <TIMER1_SET_Freq+0x8c>
						ICR1 =TOP;
						break;
					case TIMER_FOSC_8:
						TOP=(F_CPU/((float)Freq*8))-1;
    2660:	cb 01       	movw	r24, r22
    2662:	ba 01       	movw	r22, r20
    2664:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	40 e0       	ldi	r20, 0x00	; 0
    266e:	51 e4       	ldi	r21, 0x41	; 65
    2670:	1a c0       	rjmp	.+52     	; 0x26a6 <TIMER1_SET_Freq+0x88>
						ICR1 =TOP;
						break;
					case TIMER_FOSC_64:
						TOP=(F_CPU/((float)Freq*64))-1;
    2672:	cb 01       	movw	r24, r22
    2674:	ba 01       	movw	r22, r20
    2676:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	40 e8       	ldi	r20, 0x80	; 128
    2680:	52 e4       	ldi	r21, 0x42	; 66
    2682:	11 c0       	rjmp	.+34     	; 0x26a6 <TIMER1_SET_Freq+0x88>
						ICR1 =TOP;
						break;
					case TIMER_FOSC_256:
						TOP=(F_CPU/((float)Freq*256))-1;
    2684:	cb 01       	movw	r24, r22
    2686:	ba 01       	movw	r22, r20
    2688:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	40 e8       	ldi	r20, 0x80	; 128
    2692:	53 e4       	ldi	r21, 0x43	; 67
    2694:	08 c0       	rjmp	.+16     	; 0x26a6 <TIMER1_SET_Freq+0x88>
						ICR1 =TOP;
						break;
					case TIMER_FOSC_1024:
						TOP=(F_CPU/((float)Freq*1024))-1;
    2696:	cb 01       	movw	r24, r22
    2698:	ba 01       	movw	r22, r20
    269a:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e8       	ldi	r20, 0x80	; 128
    26a4:	54 e4       	ldi	r21, 0x44	; 68
    26a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26aa:	9b 01       	movw	r18, r22
    26ac:	ac 01       	movw	r20, r24
    26ae:	60 e0       	ldi	r22, 0x00	; 0
    26b0:	74 e2       	ldi	r23, 0x24	; 36
    26b2:	84 e7       	ldi	r24, 0x74	; 116
    26b4:	99 e4       	ldi	r25, 0x49	; 73
    26b6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	40 e8       	ldi	r20, 0x80	; 128
    26c0:	5f e3       	ldi	r21, 0x3F	; 63
    26c2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    26c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
						ICR1 =TOP;
    26ca:	77 bd       	out	0x27, r23	; 39
    26cc:	66 bd       	out	0x26, r22	; 38
    26ce:	4d c0       	rjmp	.+154    	; 0x276a <TIMER1_SET_Freq+0x14c>
					default:
						ret=E_NOK;
				 }
				break;
			case TIMER1_PWM_FAST_OCR1:
			switch (Timer1->Prescaler)
    26d0:	83 81       	ldd	r24, Z+3	; 0x03
    26d2:	82 30       	cpi	r24, 0x02	; 2
    26d4:	e1 f0       	breq	.+56     	; 0x270e <TIMER1_SET_Freq+0xf0>
    26d6:	83 30       	cpi	r24, 0x03	; 3
    26d8:	30 f4       	brcc	.+12     	; 0x26e6 <TIMER1_SET_Freq+0xc8>
    26da:	88 23       	and	r24, r24
    26dc:	51 f0       	breq	.+20     	; 0x26f2 <TIMER1_SET_Freq+0xd4>
    26de:	81 30       	cpi	r24, 0x01	; 1
    26e0:	09 f0       	breq	.+2      	; 0x26e4 <TIMER1_SET_Freq+0xc6>
    26e2:	45 c0       	rjmp	.+138    	; 0x276e <TIMER1_SET_Freq+0x150>
    26e4:	0b c0       	rjmp	.+22     	; 0x26fc <TIMER1_SET_Freq+0xde>
    26e6:	83 30       	cpi	r24, 0x03	; 3
    26e8:	d9 f0       	breq	.+54     	; 0x2720 <TIMER1_SET_Freq+0x102>
    26ea:	84 30       	cpi	r24, 0x04	; 4
    26ec:	09 f0       	breq	.+2      	; 0x26f0 <TIMER1_SET_Freq+0xd2>
    26ee:	3f c0       	rjmp	.+126    	; 0x276e <TIMER1_SET_Freq+0x150>
    26f0:	20 c0       	rjmp	.+64     	; 0x2732 <TIMER1_SET_Freq+0x114>
			{
				case TIMER_FOSC_1:
					TOP = (F_CPU /(float) Freq) - 1;
    26f2:	cb 01       	movw	r24, r22
    26f4:	ba 01       	movw	r22, r20
    26f6:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    26fa:	25 c0       	rjmp	.+74     	; 0x2746 <TIMER1_SET_Freq+0x128>
					OCR1A  = TOP;
					break;
				case TIMER_FOSC_8:
					TOP = (F_CPU / ((float)Freq * 8)) - 1;
    26fc:	cb 01       	movw	r24, r22
    26fe:	ba 01       	movw	r22, r20
    2700:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	40 e0       	ldi	r20, 0x00	; 0
    270a:	51 e4       	ldi	r21, 0x41	; 65
    270c:	1a c0       	rjmp	.+52     	; 0x2742 <TIMER1_SET_Freq+0x124>
					OCR1A  = TOP;
					break;
				case TIMER_FOSC_64:
					TOP = (F_CPU / ((float)Freq* 64)) - 1;
    270e:	cb 01       	movw	r24, r22
    2710:	ba 01       	movw	r22, r20
    2712:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	40 e8       	ldi	r20, 0x80	; 128
    271c:	52 e4       	ldi	r21, 0x42	; 66
    271e:	11 c0       	rjmp	.+34     	; 0x2742 <TIMER1_SET_Freq+0x124>
					OCR1A  = TOP;
					break;
				case TIMER_FOSC_256:
					TOP = (F_CPU / ((float)Freq * 256)) - 1;
    2720:	cb 01       	movw	r24, r22
    2722:	ba 01       	movw	r22, r20
    2724:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	40 e8       	ldi	r20, 0x80	; 128
    272e:	53 e4       	ldi	r21, 0x43	; 67
    2730:	08 c0       	rjmp	.+16     	; 0x2742 <TIMER1_SET_Freq+0x124>
					OCR1A  = TOP;
					break;
				case TIMER_FOSC_1024:
					TOP = (F_CPU / ((float)Freq * 1024)) - 1;
    2732:	cb 01       	movw	r24, r22
    2734:	ba 01       	movw	r22, r20
    2736:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e8       	ldi	r20, 0x80	; 128
    2740:	54 e4       	ldi	r21, 0x44	; 68
    2742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2746:	9b 01       	movw	r18, r22
    2748:	ac 01       	movw	r20, r24
    274a:	60 e0       	ldi	r22, 0x00	; 0
    274c:	74 e2       	ldi	r23, 0x24	; 36
    274e:	84 e7       	ldi	r24, 0x74	; 116
    2750:	99 e4       	ldi	r25, 0x49	; 73
    2752:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e8       	ldi	r20, 0x80	; 128
    275c:	5f e3       	ldi	r21, 0x3F	; 63
    275e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
					OCR1A  = TOP;
    2766:	7b bd       	out	0x2b, r23	; 43
    2768:	6a bd       	out	0x2a, r22	; 42
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	08 95       	ret
					break;
    276e:	80 e0       	ldi	r24, 0x00	; 0
			default:
				ret=E_NOK;
		}
	}
	return ret;
}
    2770:	08 95       	ret

00002772 <TIMER1_INIT>:
	}
	return ret;
}

Bool TIMER1_INIT(TIMER1_CONFIG_t *Timer1)
{
    2772:	1f 93       	push	r17
    2774:	cf 93       	push	r28
    2776:	df 93       	push	r29
    2778:	ec 01       	movw	r28, r24
	Bool ret=E_OK;
	if(NULL==Timer1)
    277a:	00 97       	sbiw	r24, 0x00	; 0
    277c:	11 f4       	brne	.+4      	; 0x2782 <TIMER1_INIT+0x10>
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	dd c1       	rjmp	.+954    	; 0x2b3c <TIMER1_INIT+0x3ca>
		ret=E_NOK;
	else
	{
		Glob=Timer1->Preload_val;
    2782:	9d 81       	ldd	r25, Y+5	; 0x05
    2784:	2e 81       	ldd	r18, Y+6	; 0x06
    2786:	90 93 d2 01 	sts	0x01D2, r25
    278a:	20 93 d3 01 	sts	0x01D3, r18
		TIMER1_STOP();
    278e:	8e b5       	in	r24, 0x2e	; 46
    2790:	88 7f       	andi	r24, 0xF8	; 248
    2792:	8e bd       	out	0x2e, r24	; 46
}

static Bool TIMER1_wfmg_init(TIMER1_CONFIG_t* Timer1)
{
	Bool ret=E_OK;
	switch(Timer1->WVFM_GEN)
    2794:	8a 81       	ldd	r24, Y+2	; 0x02
    2796:	87 30       	cpi	r24, 0x07	; 7
    2798:	09 f4       	brne	.+2      	; 0x279c <TIMER1_INIT+0x2a>
    279a:	74 c0       	rjmp	.+232    	; 0x2884 <TIMER1_INIT+0x112>
    279c:	88 30       	cpi	r24, 0x08	; 8
    279e:	88 f4       	brcc	.+34     	; 0x27c2 <TIMER1_INIT+0x50>
    27a0:	83 30       	cpi	r24, 0x03	; 3
    27a2:	09 f4       	brne	.+2      	; 0x27a6 <TIMER1_INIT+0x34>
    27a4:	4e c0       	rjmp	.+156    	; 0x2842 <TIMER1_INIT+0xd0>
    27a6:	84 30       	cpi	r24, 0x04	; 4
    27a8:	28 f4       	brcc	.+10     	; 0x27b4 <TIMER1_INIT+0x42>
    27aa:	81 30       	cpi	r24, 0x01	; 1
    27ac:	79 f1       	breq	.+94     	; 0x280c <TIMER1_INIT+0x9a>
    27ae:	82 30       	cpi	r24, 0x02	; 2
    27b0:	c8 f5       	brcc	.+114    	; 0x2824 <TIMER1_INIT+0xb2>
    27b2:	1d c0       	rjmp	.+58     	; 0x27ee <TIMER1_INIT+0x7c>
    27b4:	85 30       	cpi	r24, 0x05	; 5
    27b6:	09 f4       	brne	.+2      	; 0x27ba <TIMER1_INIT+0x48>
    27b8:	50 c0       	rjmp	.+160    	; 0x285a <TIMER1_INIT+0xe8>
    27ba:	86 30       	cpi	r24, 0x06	; 6
    27bc:	08 f0       	brcs	.+2      	; 0x27c0 <TIMER1_INIT+0x4e>
    27be:	59 c0       	rjmp	.+178    	; 0x2872 <TIMER1_INIT+0x100>
    27c0:	49 c0       	rjmp	.+146    	; 0x2854 <TIMER1_INIT+0xe2>
    27c2:	8b 30       	cpi	r24, 0x0B	; 11
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <TIMER1_INIT+0x56>
    27c6:	8e c0       	rjmp	.+284    	; 0x28e4 <TIMER1_INIT+0x172>
    27c8:	8c 30       	cpi	r24, 0x0C	; 12
    27ca:	38 f4       	brcc	.+14     	; 0x27da <TIMER1_INIT+0x68>
    27cc:	89 30       	cpi	r24, 0x09	; 9
    27ce:	09 f4       	brne	.+2      	; 0x27d2 <TIMER1_INIT+0x60>
    27d0:	74 c0       	rjmp	.+232    	; 0x28ba <TIMER1_INIT+0x148>
    27d2:	8a 30       	cpi	r24, 0x0A	; 10
    27d4:	08 f0       	brcs	.+2      	; 0x27d8 <TIMER1_INIT+0x66>
    27d6:	7d c0       	rjmp	.+250    	; 0x28d2 <TIMER1_INIT+0x160>
    27d8:	67 c0       	rjmp	.+206    	; 0x28a8 <TIMER1_INIT+0x136>
    27da:	8d 30       	cpi	r24, 0x0D	; 13
    27dc:	09 f4       	brne	.+2      	; 0x27e0 <TIMER1_INIT+0x6e>
    27de:	97 c0       	rjmp	.+302    	; 0x290e <TIMER1_INIT+0x19c>
    27e0:	8d 30       	cpi	r24, 0x0D	; 13
    27e2:	08 f4       	brcc	.+2      	; 0x27e6 <TIMER1_INIT+0x74>
    27e4:	8e c0       	rjmp	.+284    	; 0x2902 <TIMER1_INIT+0x190>
    27e6:	8e 30       	cpi	r24, 0x0E	; 14
    27e8:	09 f0       	breq	.+2      	; 0x27ec <TIMER1_INIT+0x7a>
    27ea:	ac c0       	rjmp	.+344    	; 0x2944 <TIMER1_INIT+0x1d2>
    27ec:	99 c0       	rjmp	.+306    	; 0x2920 <TIMER1_INIT+0x1ae>
	{
		case TIMER1_Normal_T1:
			CLEAR_BIT(TCCR1A,WGM10);
    27ee:	8f b5       	in	r24, 0x2f	; 47
    27f0:	8e 7f       	andi	r24, 0xFE	; 254
    27f2:	8f bd       	out	0x2f, r24	; 47
			CLEAR_BIT(TCCR1A,WGM11);
    27f4:	8f b5       	in	r24, 0x2f	; 47
    27f6:	8d 7f       	andi	r24, 0xFD	; 253
    27f8:	8f bd       	out	0x2f, r24	; 47
			CLEAR_BIT(TCCR1B,WGM12);
    27fa:	8e b5       	in	r24, 0x2e	; 46
    27fc:	87 7f       	andi	r24, 0xF7	; 247
    27fe:	8e bd       	out	0x2e, r24	; 46
			CLEAR_BIT(TCCR1B,WGM13);
    2800:	8e b5       	in	r24, 0x2e	; 46
    2802:	8f 7e       	andi	r24, 0xEF	; 239
    2804:	8e bd       	out	0x2e, r24	; 46
{
	Bool ret = E_OK;
	if (NULL == Timer1)
		ret = E_NOK;
	else {
		TCNT1L=(uint8)VAL;
    2806:	9c bd       	out	0x2c, r25	; 44
		TCNT1H=(uint8)(VAL>>8);
    2808:	2d bd       	out	0x2d, r18	; 45
    280a:	9c c0       	rjmp	.+312    	; 0x2944 <TIMER1_INIT+0x1d2>
			CLEAR_BIT(TCCR1B,WGM12);
			CLEAR_BIT(TCCR1B,WGM13);
			TIMER1_SET_VAL(Timer1,Timer1->Preload_val);
			break;
		case TIMER1_PWM_Phase_Correct_8_bit:
			TIMER1_PWM_MODE();
    280c:	8f b5       	in	r24, 0x2f	; 47
    280e:	87 7f       	andi	r24, 0xF7	; 247
    2810:	8f bd       	out	0x2f, r24	; 47
    2812:	8f b5       	in	r24, 0x2f	; 47
    2814:	8b 7f       	andi	r24, 0xFB	; 251
    2816:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1A,WGM10);
    2818:	8f b5       	in	r24, 0x2f	; 47
    281a:	81 60       	ori	r24, 0x01	; 1
    281c:	8f bd       	out	0x2f, r24	; 47
			CLEAR_BIT(TCCR1A,WGM11);
    281e:	8f b5       	in	r24, 0x2f	; 47
    2820:	8d 7f       	andi	r24, 0xFD	; 253
    2822:	0b c0       	rjmp	.+22     	; 0x283a <TIMER1_INIT+0xc8>
			CLEAR_BIT(TCCR1B,WGM12);
			CLEAR_BIT(TCCR1B,WGM13);
			break;
		case TIMER1_PWM_Phase_Correct_9_bit:
			TIMER1_PWM_MODE();
    2824:	8f b5       	in	r24, 0x2f	; 47
    2826:	87 7f       	andi	r24, 0xF7	; 247
    2828:	8f bd       	out	0x2f, r24	; 47
    282a:	8f b5       	in	r24, 0x2f	; 47
    282c:	8b 7f       	andi	r24, 0xFB	; 251
    282e:	8f bd       	out	0x2f, r24	; 47
			CLEAR_BIT(TCCR1A,WGM10);
    2830:	8f b5       	in	r24, 0x2f	; 47
    2832:	8e 7f       	andi	r24, 0xFE	; 254
    2834:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1A,WGM11);
    2836:	8f b5       	in	r24, 0x2f	; 47
    2838:	82 60       	ori	r24, 0x02	; 2
    283a:	8f bd       	out	0x2f, r24	; 47
			CLEAR_BIT(TCCR1B,WGM12);
    283c:	8e b5       	in	r24, 0x2e	; 46
    283e:	87 7f       	andi	r24, 0xF7	; 247
    2840:	2f c0       	rjmp	.+94     	; 0x28a0 <TIMER1_INIT+0x12e>
			CLEAR_BIT(TCCR1B,WGM13);
			break;
		case TIMER1_PWM_Phase_Correct_10_bit:
			TIMER1_PWM_MODE();
    2842:	8f b5       	in	r24, 0x2f	; 47
    2844:	87 7f       	andi	r24, 0xF7	; 247
    2846:	8f bd       	out	0x2f, r24	; 47
    2848:	8f b5       	in	r24, 0x2f	; 47
    284a:	8b 7f       	andi	r24, 0xFB	; 251
    284c:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1A,WGM10);
    284e:	8f b5       	in	r24, 0x2f	; 47
    2850:	81 60       	ori	r24, 0x01	; 1
    2852:	f0 cf       	rjmp	.-32     	; 0x2834 <TIMER1_INIT+0xc2>
			SET_BIT(TCCR1A,WGM11);
			CLEAR_BIT(TCCR1B,WGM12);
			CLEAR_BIT(TCCR1B,WGM13);
			break;
		case TIMER1_CTC_OCR1:
			CLEAR_BIT(TCCR1A,WGM10);
    2854:	8f b5       	in	r24, 0x2f	; 47
    2856:	8e 7f       	andi	r24, 0xFE	; 254
    2858:	08 c0       	rjmp	.+16     	; 0x286a <TIMER1_INIT+0xf8>
			CLEAR_BIT(TCCR1A,WGM11);
			SET_BIT(TCCR1B,WGM12);
			CLEAR_BIT(TCCR1B,WGM13);
			break;
		case TIMER1_PWM_Fast_8_bit:
			TIMER1_PWM_MODE();
    285a:	8f b5       	in	r24, 0x2f	; 47
    285c:	87 7f       	andi	r24, 0xF7	; 247
    285e:	8f bd       	out	0x2f, r24	; 47
    2860:	8f b5       	in	r24, 0x2f	; 47
    2862:	8b 7f       	andi	r24, 0xFB	; 251
    2864:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1A,WGM10);
    2866:	8f b5       	in	r24, 0x2f	; 47
    2868:	81 60       	ori	r24, 0x01	; 1
    286a:	8f bd       	out	0x2f, r24	; 47
			CLEAR_BIT(TCCR1A,WGM11);
    286c:	8f b5       	in	r24, 0x2f	; 47
    286e:	8d 7f       	andi	r24, 0xFD	; 253
    2870:	14 c0       	rjmp	.+40     	; 0x289a <TIMER1_INIT+0x128>
			SET_BIT(TCCR1B,WGM12);
			CLEAR_BIT(TCCR1B,WGM13);
			break;
		case TIMER1_PWM_Fast_9_bit:
			TIMER1_PWM_MODE();
    2872:	8f b5       	in	r24, 0x2f	; 47
    2874:	87 7f       	andi	r24, 0xF7	; 247
    2876:	8f bd       	out	0x2f, r24	; 47
    2878:	8f b5       	in	r24, 0x2f	; 47
    287a:	8b 7f       	andi	r24, 0xFB	; 251
    287c:	8f bd       	out	0x2f, r24	; 47
			CLEAR_BIT(TCCR1A,WGM10);
    287e:	8f b5       	in	r24, 0x2f	; 47
    2880:	8e 7f       	andi	r24, 0xFE	; 254
    2882:	08 c0       	rjmp	.+16     	; 0x2894 <TIMER1_INIT+0x122>
			SET_BIT(TCCR1A,WGM11);
			SET_BIT(TCCR1B,WGM12);
			CLEAR_BIT(TCCR1B,WGM13);
			break;
		case TIMER1_PWM_Fast_10_bit:
			TIMER1_PWM_MODE();
    2884:	8f b5       	in	r24, 0x2f	; 47
    2886:	87 7f       	andi	r24, 0xF7	; 247
    2888:	8f bd       	out	0x2f, r24	; 47
    288a:	8f b5       	in	r24, 0x2f	; 47
    288c:	8b 7f       	andi	r24, 0xFB	; 251
    288e:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1A,WGM10);
    2890:	8f b5       	in	r24, 0x2f	; 47
    2892:	81 60       	ori	r24, 0x01	; 1
    2894:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1A,WGM11);
    2896:	8f b5       	in	r24, 0x2f	; 47
    2898:	82 60       	ori	r24, 0x02	; 2
    289a:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1B,WGM12);
    289c:	8e b5       	in	r24, 0x2e	; 46
    289e:	88 60       	ori	r24, 0x08	; 8
    28a0:	8e bd       	out	0x2e, r24	; 46
			CLEAR_BIT(TCCR1B,WGM13);
    28a2:	8e b5       	in	r24, 0x2e	; 46
    28a4:	8f 7e       	andi	r24, 0xEF	; 239
    28a6:	4d c0       	rjmp	.+154    	; 0x2942 <TIMER1_INIT+0x1d0>
			break;
		case TIMER1_PWM_Phase_and_Frequency_Correct_ICR1:
			TIMER1_PWM_MODE();
    28a8:	8f b5       	in	r24, 0x2f	; 47
    28aa:	87 7f       	andi	r24, 0xF7	; 247
    28ac:	8f bd       	out	0x2f, r24	; 47
    28ae:	8f b5       	in	r24, 0x2f	; 47
    28b0:	8b 7f       	andi	r24, 0xFB	; 251
    28b2:	8f bd       	out	0x2f, r24	; 47
			CLEAR_BIT(TCCR1A,WGM10);
    28b4:	8f b5       	in	r24, 0x2f	; 47
    28b6:	8e 7f       	andi	r24, 0xFE	; 254
    28b8:	08 c0       	rjmp	.+16     	; 0x28ca <TIMER1_INIT+0x158>
			CLEAR_BIT(TCCR1A,WGM11);
			CLEAR_BIT(TCCR1B,WGM12);
			SET_BIT(TCCR1B,WGM13);
			break;
		case TIMER1_PWM_Phase_and_Frequency_Correct_OCR1:
			TIMER1_PWM_MODE();
    28ba:	8f b5       	in	r24, 0x2f	; 47
    28bc:	87 7f       	andi	r24, 0xF7	; 247
    28be:	8f bd       	out	0x2f, r24	; 47
    28c0:	8f b5       	in	r24, 0x2f	; 47
    28c2:	8b 7f       	andi	r24, 0xFB	; 251
    28c4:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1A,WGM10);
    28c6:	8f b5       	in	r24, 0x2f	; 47
    28c8:	81 60       	ori	r24, 0x01	; 1
    28ca:	8f bd       	out	0x2f, r24	; 47
			CLEAR_BIT(TCCR1A,WGM11);
    28cc:	8f b5       	in	r24, 0x2f	; 47
    28ce:	8d 7f       	andi	r24, 0xFD	; 253
    28d0:	14 c0       	rjmp	.+40     	; 0x28fa <TIMER1_INIT+0x188>
			CLEAR_BIT(TCCR1B,WGM12);
			SET_BIT(TCCR1B,WGM13);
			break;
		case TIMER1_PWM_Phase_Correct_ICR1:
			TIMER1_PWM_MODE();
    28d2:	8f b5       	in	r24, 0x2f	; 47
    28d4:	87 7f       	andi	r24, 0xF7	; 247
    28d6:	8f bd       	out	0x2f, r24	; 47
    28d8:	8f b5       	in	r24, 0x2f	; 47
    28da:	8b 7f       	andi	r24, 0xFB	; 251
    28dc:	8f bd       	out	0x2f, r24	; 47
			CLEAR_BIT(TCCR1A,WGM10);
    28de:	8f b5       	in	r24, 0x2f	; 47
    28e0:	8e 7f       	andi	r24, 0xFE	; 254
    28e2:	08 c0       	rjmp	.+16     	; 0x28f4 <TIMER1_INIT+0x182>
			SET_BIT(TCCR1A,WGM11);
			CLEAR_BIT(TCCR1B,WGM12);
			SET_BIT(TCCR1B,WGM13);
			break;
		case TIMER1_PWM_Phase_Correct_OCR1:
			TIMER1_PWM_MODE();
    28e4:	8f b5       	in	r24, 0x2f	; 47
    28e6:	87 7f       	andi	r24, 0xF7	; 247
    28e8:	8f bd       	out	0x2f, r24	; 47
    28ea:	8f b5       	in	r24, 0x2f	; 47
    28ec:	8b 7f       	andi	r24, 0xFB	; 251
    28ee:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1A,WGM10);
    28f0:	8f b5       	in	r24, 0x2f	; 47
    28f2:	81 60       	ori	r24, 0x01	; 1
    28f4:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1A,WGM11);
    28f6:	8f b5       	in	r24, 0x2f	; 47
    28f8:	82 60       	ori	r24, 0x02	; 2
    28fa:	8f bd       	out	0x2f, r24	; 47
			CLEAR_BIT(TCCR1B,WGM12);
    28fc:	8e b5       	in	r24, 0x2e	; 46
    28fe:	87 7f       	andi	r24, 0xF7	; 247
    2900:	1d c0       	rjmp	.+58     	; 0x293c <TIMER1_INIT+0x1ca>
			SET_BIT(TCCR1B,WGM13);
			break;
		case TIMER1_CTC_ICR1:
			CLEAR_BIT(TCCR1A, WGM10);
    2902:	8f b5       	in	r24, 0x2f	; 47
    2904:	8e 7f       	andi	r24, 0xFE	; 254
    2906:	8f bd       	out	0x2f, r24	; 47
			CLEAR_BIT(TCCR1A, WGM11);
    2908:	8f b5       	in	r24, 0x2f	; 47
    290a:	8d 7f       	andi	r24, 0xFD	; 253
    290c:	14 c0       	rjmp	.+40     	; 0x2936 <TIMER1_INIT+0x1c4>
			SET_BIT(TCCR1B, WGM12);
			SET_BIT(TCCR1B, WGM13);
			break;
		case TIMER1_PWM_FAST_ICR1:
			TIMER1_PWM_MODE();
    290e:	8f b5       	in	r24, 0x2f	; 47
    2910:	87 7f       	andi	r24, 0xF7	; 247
    2912:	8f bd       	out	0x2f, r24	; 47
    2914:	8f b5       	in	r24, 0x2f	; 47
    2916:	8b 7f       	andi	r24, 0xFB	; 251
    2918:	8f bd       	out	0x2f, r24	; 47
			CLEAR_BIT(TCCR1A,WGM10);
    291a:	8f b5       	in	r24, 0x2f	; 47
    291c:	8e 7f       	andi	r24, 0xFE	; 254
    291e:	08 c0       	rjmp	.+16     	; 0x2930 <TIMER1_INIT+0x1be>
			SET_BIT(TCCR1A,WGM11);
			SET_BIT(TCCR1B,WGM12);
			SET_BIT(TCCR1B,WGM13);
			break;
		case TIMER1_PWM_FAST_OCR1:
			TIMER1_PWM_MODE();
    2920:	8f b5       	in	r24, 0x2f	; 47
    2922:	87 7f       	andi	r24, 0xF7	; 247
    2924:	8f bd       	out	0x2f, r24	; 47
    2926:	8f b5       	in	r24, 0x2f	; 47
    2928:	8b 7f       	andi	r24, 0xFB	; 251
    292a:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1A,WGM10);
    292c:	8f b5       	in	r24, 0x2f	; 47
    292e:	81 60       	ori	r24, 0x01	; 1
    2930:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1A,WGM11);
    2932:	8f b5       	in	r24, 0x2f	; 47
    2934:	82 60       	ori	r24, 0x02	; 2
    2936:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1B,WGM12);
    2938:	8e b5       	in	r24, 0x2e	; 46
    293a:	88 60       	ori	r24, 0x08	; 8
    293c:	8e bd       	out	0x2e, r24	; 46
			SET_BIT(TCCR1B,WGM13);
    293e:	8e b5       	in	r24, 0x2e	; 46
    2940:	80 61       	ori	r24, 0x10	; 16
    2942:	8e bd       	out	0x2e, r24	; 46
}

static Bool TIMER1_COMP_reg_init(TIMER1_CONFIG_t* Timer1)
{
	Bool ret=E_OK;
	switch(Timer1->TIMER1_mode)
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	85 30       	cpi	r24, 0x05	; 5
    2948:	09 f4       	brne	.+2      	; 0x294c <TIMER1_INIT+0x1da>
    294a:	43 c0       	rjmp	.+134    	; 0x29d2 <TIMER1_INIT+0x260>
    294c:	86 30       	cpi	r24, 0x06	; 6
    294e:	90 f4       	brcc	.+36     	; 0x2974 <TIMER1_INIT+0x202>
    2950:	82 30       	cpi	r24, 0x02	; 2
    2952:	09 f4       	brne	.+2      	; 0x2956 <TIMER1_INIT+0x1e4>
    2954:	56 c0       	rjmp	.+172    	; 0x2a02 <TIMER1_INIT+0x290>
    2956:	83 30       	cpi	r24, 0x03	; 3
    2958:	30 f4       	brcc	.+12     	; 0x2966 <TIMER1_INIT+0x1f4>
    295a:	88 23       	and	r24, r24
    295c:	f1 f0       	breq	.+60     	; 0x299a <TIMER1_INIT+0x228>
    295e:	81 30       	cpi	r24, 0x01	; 1
    2960:	09 f0       	breq	.+2      	; 0x2964 <TIMER1_INIT+0x1f2>
    2962:	94 c0       	rjmp	.+296    	; 0x2a8c <TIMER1_INIT+0x31a>
    2964:	36 c0       	rjmp	.+108    	; 0x29d2 <TIMER1_INIT+0x260>
    2966:	83 30       	cpi	r24, 0x03	; 3
    2968:	09 f4       	brne	.+2      	; 0x296c <TIMER1_INIT+0x1fa>
    296a:	6b c0       	rjmp	.+214    	; 0x2a42 <TIMER1_INIT+0x2d0>
    296c:	84 30       	cpi	r24, 0x04	; 4
    296e:	09 f0       	breq	.+2      	; 0x2972 <TIMER1_INIT+0x200>
    2970:	8d c0       	rjmp	.+282    	; 0x2a8c <TIMER1_INIT+0x31a>
    2972:	13 c0       	rjmp	.+38     	; 0x299a <TIMER1_INIT+0x228>
    2974:	88 30       	cpi	r24, 0x08	; 8
    2976:	89 f0       	breq	.+34     	; 0x299a <TIMER1_INIT+0x228>
    2978:	89 30       	cpi	r24, 0x09	; 9
    297a:	38 f4       	brcc	.+14     	; 0x298a <TIMER1_INIT+0x218>
    297c:	86 30       	cpi	r24, 0x06	; 6
    297e:	09 f4       	brne	.+2      	; 0x2982 <TIMER1_INIT+0x210>
    2980:	40 c0       	rjmp	.+128    	; 0x2a02 <TIMER1_INIT+0x290>
    2982:	87 30       	cpi	r24, 0x07	; 7
    2984:	09 f0       	breq	.+2      	; 0x2988 <TIMER1_INIT+0x216>
    2986:	82 c0       	rjmp	.+260    	; 0x2a8c <TIMER1_INIT+0x31a>
    2988:	5c c0       	rjmp	.+184    	; 0x2a42 <TIMER1_INIT+0x2d0>
    298a:	8a 30       	cpi	r24, 0x0A	; 10
    298c:	d1 f1       	breq	.+116    	; 0x2a02 <TIMER1_INIT+0x290>
    298e:	8a 30       	cpi	r24, 0x0A	; 10
    2990:	00 f1       	brcs	.+64     	; 0x29d2 <TIMER1_INIT+0x260>
    2992:	8b 30       	cpi	r24, 0x0B	; 11
    2994:	09 f0       	breq	.+2      	; 0x2998 <TIMER1_INIT+0x226>
    2996:	7a c0       	rjmp	.+244    	; 0x2a8c <TIMER1_INIT+0x31a>
    2998:	54 c0       	rjmp	.+168    	; 0x2a42 <TIMER1_INIT+0x2d0>
	{
		case TIMER1_Normal_non_pwm_mode:
		case TIMER1_Normal_Fast_PWM_Mode:
		case TIMER1_Normal_Phase_Correct_PWM:
			switch(Timer1->REG_active)
    299a:	88 81       	ld	r24, Y
    299c:	81 30       	cpi	r24, 0x01	; 1
    299e:	91 f0       	breq	.+36     	; 0x29c4 <TIMER1_INIT+0x252>
    29a0:	81 30       	cpi	r24, 0x01	; 1
    29a2:	20 f0       	brcs	.+8      	; 0x29ac <TIMER1_INIT+0x23a>
    29a4:	82 30       	cpi	r24, 0x02	; 2
    29a6:	09 f0       	breq	.+2      	; 0x29aa <TIMER1_INIT+0x238>
    29a8:	71 c0       	rjmp	.+226    	; 0x2a8c <TIMER1_INIT+0x31a>
    29aa:	06 c0       	rjmp	.+12     	; 0x29b8 <TIMER1_INIT+0x246>
			{
				case TIMER1_COMPA_ACTIVE:
					CLEAR_BIT(TCCR1A, COM1A1);
    29ac:	8f b5       	in	r24, 0x2f	; 47
    29ae:	8f 77       	andi	r24, 0x7F	; 127
    29b0:	8f bd       	out	0x2f, r24	; 47
					CLEAR_BIT(TCCR1A, COM1A0);
    29b2:	8f b5       	in	r24, 0x2f	; 47
    29b4:	8f 7b       	andi	r24, 0xBF	; 191
    29b6:	0b c0       	rjmp	.+22     	; 0x29ce <TIMER1_INIT+0x25c>
				case TIMER1_COMPB_ACTIVE:
					CLEAR_BIT(TCCR1A, COM1B1);
					CLEAR_BIT(TCCR1A, COM1B0);
					break;
				case TIMER1_COMPA_COMPB_ACTIVE:
					CLEAR_BIT(TCCR1A, COM1A1);
    29b8:	8f b5       	in	r24, 0x2f	; 47
    29ba:	8f 77       	andi	r24, 0x7F	; 127
    29bc:	8f bd       	out	0x2f, r24	; 47
					CLEAR_BIT(TCCR1A, COM1A0);
    29be:	8f b5       	in	r24, 0x2f	; 47
    29c0:	8f 7b       	andi	r24, 0xBF	; 191
    29c2:	8f bd       	out	0x2f, r24	; 47
					CLEAR_BIT(TCCR1A, COM1B1);
    29c4:	8f b5       	in	r24, 0x2f	; 47
    29c6:	8f 7d       	andi	r24, 0xDF	; 223
    29c8:	8f bd       	out	0x2f, r24	; 47
					CLEAR_BIT(TCCR1A, COM1B0);
    29ca:	8f b5       	in	r24, 0x2f	; 47
    29cc:	8f 7e       	andi	r24, 0xEF	; 239
    29ce:	8f bd       	out	0x2f, r24	; 47
    29d0:	5d c0       	rjmp	.+186    	; 0x2a8c <TIMER1_INIT+0x31a>
			}
			break;
		case TIMER1_ToggleOC_non_pwm_mode:
		case TIMER1_Normal_ReservedToggle_Fast_PWM_Mode:
		case TIMER1_Toggle_Phase_Correct_PWM:
			switch (Timer1->REG_active)
    29d2:	88 81       	ld	r24, Y
    29d4:	81 30       	cpi	r24, 0x01	; 1
    29d6:	49 f0       	breq	.+18     	; 0x29ea <TIMER1_INIT+0x278>
    29d8:	81 30       	cpi	r24, 0x01	; 1
    29da:	20 f0       	brcs	.+8      	; 0x29e4 <TIMER1_INIT+0x272>
    29dc:	82 30       	cpi	r24, 0x02	; 2
    29de:	09 f0       	breq	.+2      	; 0x29e2 <TIMER1_INIT+0x270>
    29e0:	55 c0       	rjmp	.+170    	; 0x2a8c <TIMER1_INIT+0x31a>
    29e2:	06 c0       	rjmp	.+12     	; 0x29f0 <TIMER1_INIT+0x27e>
			{
				case TIMER1_COMPA_ACTIVE:
					CLEAR_BIT(TCCR1A, COM1A1);
    29e4:	8f b5       	in	r24, 0x2f	; 47
    29e6:	8f 77       	andi	r24, 0x7F	; 127
    29e8:	36 c0       	rjmp	.+108    	; 0x2a56 <TIMER1_INIT+0x2e4>
					SET_BIT(TCCR1A, COM1A0);
					SET_BIT(TIMER1_PORT_DIR, OC1A);
					break;
				case TIMER1_COMPB_ACTIVE:
					CLEAR_BIT(TCCR1A, COM1B1);
    29ea:	8f b5       	in	r24, 0x2f	; 47
    29ec:	8f 7d       	andi	r24, 0xDF	; 223
    29ee:	3b c0       	rjmp	.+118    	; 0x2a66 <TIMER1_INIT+0x2f4>
					SET_BIT(TCCR1A, COM1B0);
					SET_BIT(TIMER1_PORT_DIR, OC1B);
					break;
				case TIMER1_COMPA_COMPB_ACTIVE:
					CLEAR_BIT(TCCR1A, COM1A1);
    29f0:	8f b5       	in	r24, 0x2f	; 47
    29f2:	8f 77       	andi	r24, 0x7F	; 127
    29f4:	8f bd       	out	0x2f, r24	; 47
					SET_BIT(TCCR1A, COM1A0);
    29f6:	8f b5       	in	r24, 0x2f	; 47
    29f8:	80 64       	ori	r24, 0x40	; 64
    29fa:	8f bd       	out	0x2f, r24	; 47
					CLEAR_BIT(TCCR1A, COM1B1);
    29fc:	8f b5       	in	r24, 0x2f	; 47
    29fe:	8f 7d       	andi	r24, 0xDF	; 223
    2a00:	3f c0       	rjmp	.+126    	; 0x2a80 <TIMER1_INIT+0x30e>
			}
			break;
		case TIMER1_ClearOC_non_pwm_mode:
		case TIMER1_ClearOC_Fast_PWM_Mode:
		case TIMER1_ClearOC_Phase_Correct_PWM:
			switch (Timer1->REG_active)
    2a02:	88 81       	ld	r24, Y
    2a04:	81 30       	cpi	r24, 0x01	; 1
    2a06:	59 f0       	breq	.+22     	; 0x2a1e <TIMER1_INIT+0x2ac>
    2a08:	81 30       	cpi	r24, 0x01	; 1
    2a0a:	18 f0       	brcs	.+6      	; 0x2a12 <TIMER1_INIT+0x2a0>
    2a0c:	82 30       	cpi	r24, 0x02	; 2
    2a0e:	f1 f5       	brne	.+124    	; 0x2a8c <TIMER1_INIT+0x31a>
    2a10:	0c c0       	rjmp	.+24     	; 0x2a2a <TIMER1_INIT+0x2b8>
			{
				case TIMER1_COMPA_ACTIVE:
					SET_BIT(TCCR1A, COM1A1);
    2a12:	8f b5       	in	r24, 0x2f	; 47
    2a14:	80 68       	ori	r24, 0x80	; 128
    2a16:	8f bd       	out	0x2f, r24	; 47
					CLEAR_BIT(TCCR1A, COM1A0);
    2a18:	8f b5       	in	r24, 0x2f	; 47
    2a1a:	8f 7b       	andi	r24, 0xBF	; 191
    2a1c:	1f c0       	rjmp	.+62     	; 0x2a5c <TIMER1_INIT+0x2ea>
					SET_BIT(TIMER1_PORT_DIR, OC1A);
					break;
				case TIMER1_COMPB_ACTIVE:
					SET_BIT(TCCR1A, COM1B1);
    2a1e:	8f b5       	in	r24, 0x2f	; 47
    2a20:	80 62       	ori	r24, 0x20	; 32
    2a22:	8f bd       	out	0x2f, r24	; 47
					CLEAR_BIT(TCCR1A, COM1B0);
    2a24:	8f b5       	in	r24, 0x2f	; 47
    2a26:	8f 7e       	andi	r24, 0xEF	; 239
    2a28:	21 c0       	rjmp	.+66     	; 0x2a6c <TIMER1_INIT+0x2fa>
					SET_BIT(TIMER1_PORT_DIR, OC1B);
					break;
				case TIMER1_COMPA_COMPB_ACTIVE:
					SET_BIT(TCCR1A, COM1A1);
    2a2a:	8f b5       	in	r24, 0x2f	; 47
    2a2c:	80 68       	ori	r24, 0x80	; 128
    2a2e:	8f bd       	out	0x2f, r24	; 47
					CLEAR_BIT(TCCR1A, COM1A0);
    2a30:	8f b5       	in	r24, 0x2f	; 47
    2a32:	8f 7b       	andi	r24, 0xBF	; 191
    2a34:	8f bd       	out	0x2f, r24	; 47
					SET_BIT(TCCR1A, COM1B1);
    2a36:	8f b5       	in	r24, 0x2f	; 47
    2a38:	80 62       	ori	r24, 0x20	; 32
    2a3a:	8f bd       	out	0x2f, r24	; 47
					CLEAR_BIT(TCCR1A, COM1B0);
    2a3c:	8f b5       	in	r24, 0x2f	; 47
    2a3e:	8f 7e       	andi	r24, 0xEF	; 239
    2a40:	22 c0       	rjmp	.+68     	; 0x2a86 <TIMER1_INIT+0x314>
			}
			break;
		case TIMER1_setOC_Fast_PWM_Mode:
		case TIMER1_SetOC_non_pwm_mode:
		case TIMER1_setOC_Phase_Correct_PWM:
			switch (Timer1->REG_active)
    2a42:	88 81       	ld	r24, Y
    2a44:	81 30       	cpi	r24, 0x01	; 1
    2a46:	69 f0       	breq	.+26     	; 0x2a62 <TIMER1_INIT+0x2f0>
    2a48:	81 30       	cpi	r24, 0x01	; 1
    2a4a:	18 f0       	brcs	.+6      	; 0x2a52 <TIMER1_INIT+0x2e0>
    2a4c:	82 30       	cpi	r24, 0x02	; 2
    2a4e:	f1 f4       	brne	.+60     	; 0x2a8c <TIMER1_INIT+0x31a>
    2a50:	0f c0       	rjmp	.+30     	; 0x2a70 <TIMER1_INIT+0x2fe>
			{
				case TIMER1_COMPA_ACTIVE:
					SET_BIT(TCCR1A, COM1A1);
    2a52:	8f b5       	in	r24, 0x2f	; 47
    2a54:	80 68       	ori	r24, 0x80	; 128
    2a56:	8f bd       	out	0x2f, r24	; 47
					SET_BIT(TCCR1A, COM1A0);
    2a58:	8f b5       	in	r24, 0x2f	; 47
    2a5a:	80 64       	ori	r24, 0x40	; 64
    2a5c:	8f bd       	out	0x2f, r24	; 47
					SET_BIT(TIMER1_PORT_DIR, OC1A);
    2a5e:	8d 9a       	sbi	0x11, 5	; 17
    2a60:	15 c0       	rjmp	.+42     	; 0x2a8c <TIMER1_INIT+0x31a>
					break;
				case TIMER1_COMPB_ACTIVE:
					SET_BIT(TCCR1A, COM1B1);
    2a62:	8f b5       	in	r24, 0x2f	; 47
    2a64:	80 62       	ori	r24, 0x20	; 32
    2a66:	8f bd       	out	0x2f, r24	; 47
					SET_BIT(TCCR1A, COM1B0);
    2a68:	8f b5       	in	r24, 0x2f	; 47
    2a6a:	80 61       	ori	r24, 0x10	; 16
    2a6c:	8f bd       	out	0x2f, r24	; 47
    2a6e:	0d c0       	rjmp	.+26     	; 0x2a8a <TIMER1_INIT+0x318>
					SET_BIT(TIMER1_PORT_DIR, OC1B);
					break;
				case TIMER1_COMPA_COMPB_ACTIVE:
					SET_BIT(TCCR1A, COM1A1);
    2a70:	8f b5       	in	r24, 0x2f	; 47
    2a72:	80 68       	ori	r24, 0x80	; 128
    2a74:	8f bd       	out	0x2f, r24	; 47
					SET_BIT(TCCR1A, COM1A0);
    2a76:	8f b5       	in	r24, 0x2f	; 47
    2a78:	80 64       	ori	r24, 0x40	; 64
    2a7a:	8f bd       	out	0x2f, r24	; 47
					SET_BIT(TCCR1A, COM1B1);
    2a7c:	8f b5       	in	r24, 0x2f	; 47
    2a7e:	80 62       	ori	r24, 0x20	; 32
    2a80:	8f bd       	out	0x2f, r24	; 47
					SET_BIT(TCCR1A, COM1B0);
    2a82:	8f b5       	in	r24, 0x2f	; 47
    2a84:	80 61       	ori	r24, 0x10	; 16
    2a86:	8f bd       	out	0x2f, r24	; 47
					SET_BIT(TIMER1_PORT_DIR, OC1A);
    2a88:	8d 9a       	sbi	0x11, 5	; 17
					SET_BIT(TIMER1_PORT_DIR, OC1B);
    2a8a:	8c 9a       	sbi	0x11, 4	; 17
		Glob=Timer1->Preload_val;
		TIMER1_STOP();
		ret|=TIMER1_wfmg_init(Timer1);
		ret|=TIMER1_COMP_reg_init(Timer1);
		ret|=TIMER1_int_enable(Timer1);
		ret|=TIMER1_SET_Freq(Timer1,Timer1->PWM_freq);
    2a8c:	4f 81       	ldd	r20, Y+7	; 0x07
    2a8e:	58 85       	ldd	r21, Y+8	; 0x08
    2a90:	69 85       	ldd	r22, Y+9	; 0x09
    2a92:	7a 85       	ldd	r23, Y+10	; 0x0a
    2a94:	ce 01       	movw	r24, r28
    2a96:	0e 94 0f 13 	call	0x261e	; 0x261e <TIMER1_SET_Freq>
    2a9a:	18 2f       	mov	r17, r24
		ret|=TIMER1_SET_DUTY(Timer1,Timer1->Duty_Cycle_1,Timer1->Duty_Cycle_2);
    2a9c:	ce 01       	movw	r24, r28
    2a9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa0:	4c 85       	ldd	r20, Y+12	; 0x0c
    2aa2:	0e 94 9f 11 	call	0x233e	; 0x233e <TIMER1_SET_DUTY>
    2aa6:	28 2f       	mov	r18, r24
		switch(Timer1->Input_capture_edg)
    2aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aaa:	81 70       	andi	r24, 0x01	; 1
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	00 97       	sbiw	r24, 0x00	; 0
    2ab0:	19 f0       	breq	.+6      	; 0x2ab8 <TIMER1_INIT+0x346>
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	39 f4       	brne	.+14     	; 0x2ac4 <TIMER1_INIT+0x352>
    2ab6:	03 c0       	rjmp	.+6      	; 0x2abe <TIMER1_INIT+0x34c>
		{
			case TIMER_ICP1_REDG:
				TIMER1_INPUT_CAPTURE_RISING_EDG();
    2ab8:	8e b5       	in	r24, 0x2e	; 46
    2aba:	80 64       	ori	r24, 0x40	; 64
    2abc:	02 c0       	rjmp	.+4      	; 0x2ac2 <TIMER1_INIT+0x350>
				break;
			case TIMER_ICP1_FEDG:
				TIMER1_INPUT_CAPTURE_FALLING_EDG();
    2abe:	8e b5       	in	r24, 0x2e	; 46
    2ac0:	8f 7b       	andi	r24, 0xBF	; 191
    2ac2:	8e bd       	out	0x2e, r24	; 46
}

static Bool TIMER1_CS_set(TIMER1_CONFIG_t* Timer1)
{
	Bool ret=E_OK;
	switch(Timer1->Prescaler)
    2ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac6:	83 30       	cpi	r24, 0x03	; 3
    2ac8:	21 f1       	breq	.+72     	; 0x2b12 <TIMER1_INIT+0x3a0>
    2aca:	84 30       	cpi	r24, 0x04	; 4
    2acc:	28 f4       	brcc	.+10     	; 0x2ad8 <TIMER1_INIT+0x366>
    2ace:	81 30       	cpi	r24, 0x01	; 1
    2ad0:	81 f0       	breq	.+32     	; 0x2af2 <TIMER1_INIT+0x380>
    2ad2:	82 30       	cpi	r24, 0x02	; 2
    2ad4:	c0 f4       	brcc	.+48     	; 0x2b06 <TIMER1_INIT+0x394>
    2ad6:	07 c0       	rjmp	.+14     	; 0x2ae6 <TIMER1_INIT+0x374>
    2ad8:	85 30       	cpi	r24, 0x05	; 5
    2ada:	39 f1       	breq	.+78     	; 0x2b2a <TIMER1_INIT+0x3b8>
    2adc:	85 30       	cpi	r24, 0x05	; 5
    2ade:	f8 f0       	brcs	.+62     	; 0x2b1e <TIMER1_INIT+0x3ac>
    2ae0:	86 30       	cpi	r24, 0x06	; 6
    2ae2:	49 f5       	brne	.+82     	; 0x2b36 <TIMER1_INIT+0x3c4>
    2ae4:	25 c0       	rjmp	.+74     	; 0x2b30 <TIMER1_INIT+0x3be>
	{
		  case TIMER_FOSC_1:
			TCCR1B|=(1<<CS10);
    2ae6:	8e b5       	in	r24, 0x2e	; 46
    2ae8:	81 60       	ori	r24, 0x01	; 1
    2aea:	8e bd       	out	0x2e, r24	; 46
			Prescaler=1;
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	05 c0       	rjmp	.+10     	; 0x2afc <TIMER1_INIT+0x38a>
			break;
		  case TIMER_FOSC_8:
			TCCR1B|=(1<<CS11);
    2af2:	8e b5       	in	r24, 0x2e	; 46
    2af4:	82 60       	ori	r24, 0x02	; 2
    2af6:	8e bd       	out	0x2e, r24	; 46
			Prescaler=8;
    2af8:	88 e0       	ldi	r24, 0x08	; 8
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	90 93 d5 01 	sts	0x01D5, r25
    2b00:	80 93 d4 01 	sts	0x01D4, r24
    2b04:	18 c0       	rjmp	.+48     	; 0x2b36 <TIMER1_INIT+0x3c4>
			break;
		 case TIMER_FOSC_64:
			TCCR1B|=(1<<CS11|1<<CS10);
    2b06:	8e b5       	in	r24, 0x2e	; 46
    2b08:	83 60       	ori	r24, 0x03	; 3
    2b0a:	8e bd       	out	0x2e, r24	; 46
			Prescaler=64;
    2b0c:	80 e4       	ldi	r24, 0x40	; 64
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	f5 cf       	rjmp	.-22     	; 0x2afc <TIMER1_INIT+0x38a>
			break;
		 case TIMER_FOSC_256:
			TCCR1B|=(1<<CS12);
    2b12:	8e b5       	in	r24, 0x2e	; 46
    2b14:	84 60       	ori	r24, 0x04	; 4
    2b16:	8e bd       	out	0x2e, r24	; 46
			Prescaler=256;
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	91 e0       	ldi	r25, 0x01	; 1
    2b1c:	ef cf       	rjmp	.-34     	; 0x2afc <TIMER1_INIT+0x38a>
			break;
		 case TIMER_FOSC_1024:
			TCCR1B|=(1<<CS12|1<<CS10);
    2b1e:	8e b5       	in	r24, 0x2e	; 46
    2b20:	85 60       	ori	r24, 0x05	; 5
    2b22:	8e bd       	out	0x2e, r24	; 46
			Prescaler=1024;
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	94 e0       	ldi	r25, 0x04	; 4
    2b28:	e9 cf       	rjmp	.-46     	; 0x2afc <TIMER1_INIT+0x38a>
			break;
		 case EXTERNAL_SOURCE_COUNTER_T1_FALLING_EDG:
			TCCR1B|=(1<<CS12|1<<CS11);
    2b2a:	8e b5       	in	r24, 0x2e	; 46
    2b2c:	86 60       	ori	r24, 0x06	; 6
    2b2e:	02 c0       	rjmp	.+4      	; 0x2b34 <TIMER1_INIT+0x3c2>
			break;
		 case EXTERNAL_SOURCE_COUNTER_T1_RISING_EDG:
			TCCR1B|=(1<<CS12|1<<CS11|1<<CS10);
    2b30:	8e b5       	in	r24, 0x2e	; 46
    2b32:	87 60       	ori	r24, 0x07	; 7
    2b34:	8e bd       	out	0x2e, r24	; 46
		Glob=Timer1->Preload_val;
		TIMER1_STOP();
		ret|=TIMER1_wfmg_init(Timer1);
		ret|=TIMER1_COMP_reg_init(Timer1);
		ret|=TIMER1_int_enable(Timer1);
		ret|=TIMER1_SET_Freq(Timer1,Timer1->PWM_freq);
    2b36:	81 2f       	mov	r24, r17
    2b38:	82 2b       	or	r24, r18
				break;
			case TIMER_ICP1_FEDG:
				TIMER1_INPUT_CAPTURE_FALLING_EDG();
				break;
		}
		ret|=TIMER1_CS_set(Timer1);
    2b3a:	81 60       	ori	r24, 0x01	; 1
	}
	return ret;
}
    2b3c:	df 91       	pop	r29
    2b3e:	cf 91       	pop	r28
    2b40:	1f 91       	pop	r17
    2b42:	08 95       	ret

00002b44 <TIMER1_SET_VAL>:
}

Bool TIMER1_SET_VAL(TIMER1_CONFIG_t *Timer1,uint16 VAL)
{
	Bool ret = E_OK;
	if (NULL == Timer1)
    2b44:	89 2b       	or	r24, r25
    2b46:	11 f4       	brne	.+4      	; 0x2b4c <TIMER1_SET_VAL+0x8>
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	08 95       	ret
		ret = E_NOK;
	else {
		TCNT1L=(uint8)VAL;
    2b4c:	6c bd       	out	0x2c, r22	; 44
		TCNT1H=(uint8)(VAL>>8);
    2b4e:	7d bd       	out	0x2d, r23	; 45
    2b50:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ret;
}
    2b52:	08 95       	ret

00002b54 <TIMER1_GET_VAL>:

Bool TIMER1_GET_VAL(TIMER1_CONFIG_t *Timer1,uint16 *VAL)
{
    2b54:	fb 01       	movw	r30, r22
	Bool ret = E_OK;
	if (NULL == Timer1||NULL==VAL)
    2b56:	89 2b       	or	r24, r25
    2b58:	69 f0       	breq	.+26     	; 0x2b74 <TIMER1_GET_VAL+0x20>
    2b5a:	61 15       	cp	r22, r1
    2b5c:	71 05       	cpc	r23, r1
    2b5e:	51 f0       	breq	.+20     	; 0x2b74 <TIMER1_GET_VAL+0x20>
		ret = E_NOK;
	else {
		*VAL= (uint16)(TCNT1L+ TCNT1H*256);
    2b60:	3c b5       	in	r19, 0x2c	; 44
    2b62:	2d b5       	in	r18, 0x2d	; 45
    2b64:	92 2f       	mov	r25, r18
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	83 0f       	add	r24, r19
    2b6a:	91 1d       	adc	r25, r1
    2b6c:	91 83       	std	Z+1, r25	; 0x01
    2b6e:	80 83       	st	Z, r24
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	08 95       	ret
    2b74:	80 e0       	ldi	r24, 0x00	; 0
	}
	return ret;
}
    2b76:	08 95       	ret

00002b78 <TIMER1_delay_polling>:

Bool TIMER1_delay_polling(TIMER1_CONFIG_t *Timer1,uint16 VAL)
{
	Bool ret = E_OK;
	if (NULL == Timer1 )
    2b78:	89 2b       	or	r24, r25
    2b7a:	11 f4       	brne	.+4      	; 0x2b80 <TIMER1_delay_polling+0x8>
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	08 95       	ret
		ret = E_NOK;
	else {
		uint8 Prescaler_Temp=TCCR1B;
    2b80:	9e b5       	in	r25, 0x2e	; 46
		TIMER1_STOP();
    2b82:	8e b5       	in	r24, 0x2e	; 46
    2b84:	88 7f       	andi	r24, 0xF8	; 248
    2b86:	8e bd       	out	0x2e, r24	; 46
{
	Bool ret = E_OK;
	if (NULL == Timer1)
		ret = E_NOK;
	else {
		TCNT1L=(uint8)VAL;
    2b88:	6c bd       	out	0x2c, r22	; 44
		TCNT1H=(uint8)(VAL>>8);
    2b8a:	7d bd       	out	0x2d, r23	; 45
		ret = E_NOK;
	else {
		uint8 Prescaler_Temp=TCCR1B;
		TIMER1_STOP();
		TIMER1_SET_VAL(Timer1,VAL);
		TCCR1B=Prescaler_Temp;
    2b8c:	9e bd       	out	0x2e, r25	; 46
		while(BIT_IS_CLEAR(TIFR,TOV1));
    2b8e:	08 b6       	in	r0, 0x38	; 56
    2b90:	02 fe       	sbrs	r0, 2
    2b92:	fd cf       	rjmp	.-6      	; 0x2b8e <TIMER1_delay_polling+0x16>
		TIMER1_OVERFLOW_FLAG_CLEAR();
    2b94:	88 b7       	in	r24, 0x38	; 56
    2b96:	84 60       	ori	r24, 0x04	; 4
    2b98:	88 bf       	out	0x38, r24	; 56
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ret;
}
    2b9c:	08 95       	ret

00002b9e <Timer1_ovf_ISR>:
	if (TIMER1_OVF_callback)
		TIMER1_OVF_callback();
	else {
	}
#endif
}
    2b9e:	08 95       	ret

00002ba0 <Timer1_capt_ISR>:
	if (TIMER1_ICP_callback)
		TIMER1_ICP_callback();
	else {
	}
#endif
}
    2ba0:	08 95       	ret

00002ba2 <Timer2_Setduty>:
}

Bool Timer2_Setduty(uint8 Duty)
{
	Bool ret=E_OK;
	OCR2=(uint8)((Duty/(float)100)*256);
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	aa 27       	eor	r26, r26
    2ba6:	97 fd       	sbrc	r25, 7
    2ba8:	a0 95       	com	r26
    2baa:	ba 2f       	mov	r27, r26
    2bac:	bc 01       	movw	r22, r24
    2bae:	cd 01       	movw	r24, r26
    2bb0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	48 ec       	ldi	r20, 0xC8	; 200
    2bba:	52 e4       	ldi	r21, 0x42	; 66
    2bbc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	40 e8       	ldi	r20, 0x80	; 128
    2bc6:	53 e4       	ldi	r21, 0x43	; 67
    2bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd0:	63 bd       	out	0x23, r22	; 35
	return ret;
}
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	08 95       	ret

00002bd6 <Timer2_init>:
static Bool Timer2_CTC_FastPwm_mode(Timer2_config_t *Timer2);
static Bool Timer2_clk_prescaler(Timer2_config_t *Timer2);
static Bool Timer2_Interrupt_set(Timer2_config_t *Timer2);

Bool Timer2_init(Timer2_config_t *Timer2)
{
    2bd6:	cf 93       	push	r28
    2bd8:	df 93       	push	r29
    2bda:	ec 01       	movw	r28, r24
	Bool ret=E_OK;
	if(NULL==Timer2)
    2bdc:	00 97       	sbiw	r24, 0x00	; 0
    2bde:	09 f4       	brne	.+2      	; 0x2be2 <Timer2_init+0xc>
    2be0:	ba c0       	rjmp	.+372    	; 0x2d56 <Timer2_init+0x180>
		ret=E_NOK;
	else
	{
		GLOB_val=Timer2->Preload_val;
    2be2:	9c 81       	ldd	r25, Y+4	; 0x04
    2be4:	90 93 d6 01 	sts	0x01D6, r25
		TIMER2_STOP();
    2be8:	85 b5       	in	r24, 0x25	; 37
    2bea:	88 7f       	andi	r24, 0xF8	; 248
    2bec:	85 bd       	out	0x25, r24	; 37
}

static Bool Timer2_mode_set(Timer2_config_t *Timer2)
{
	Bool ret=E_OK;
	switch(Timer2->Mode)
    2bee:	88 81       	ld	r24, Y
    2bf0:	81 30       	cpi	r24, 0x01	; 1
    2bf2:	99 f0       	breq	.+38     	; 0x2c1a <Timer2_init+0x44>
    2bf4:	81 30       	cpi	r24, 0x01	; 1
    2bf6:	30 f0       	brcs	.+12     	; 0x2c04 <Timer2_init+0x2e>
    2bf8:	82 30       	cpi	r24, 0x02	; 2
    2bfa:	c9 f0       	breq	.+50     	; 0x2c2e <Timer2_init+0x58>
    2bfc:	83 30       	cpi	r24, 0x03	; 3
    2bfe:	09 f0       	breq	.+2      	; 0x2c02 <Timer2_init+0x2c>
    2c00:	61 c0       	rjmp	.+194    	; 0x2cc4 <Timer2_init+0xee>
    2c02:	3d c0       	rjmp	.+122    	; 0x2c7e <Timer2_init+0xa8>
	{
		case TIMER2_NORMAL:
			TIMER2_FOCO_ENABLE();
    2c04:	85 b5       	in	r24, 0x25	; 37
    2c06:	80 68       	ori	r24, 0x80	; 128
    2c08:	85 bd       	out	0x25, r24	; 37
			CLEAR_BIT(TCCR2,WGM20);
    2c0a:	85 b5       	in	r24, 0x25	; 37
    2c0c:	8f 7b       	andi	r24, 0xBF	; 191
    2c0e:	85 bd       	out	0x25, r24	; 37
			CLEAR_BIT(TCCR2,WGM21);
    2c10:	85 b5       	in	r24, 0x25	; 37
    2c12:	87 7f       	andi	r24, 0xF7	; 247
    2c14:	85 bd       	out	0x25, r24	; 37
			TCNT2=Timer2->Preload_val;
    2c16:	94 bd       	out	0x24, r25	; 36
    2c18:	55 c0       	rjmp	.+170    	; 0x2cc4 <Timer2_init+0xee>
			break;
		case TIMER2_PWM_PHASE_CORRECT:
			TIMER2_FOCO_DISABLE();
    2c1a:	85 b5       	in	r24, 0x25	; 37
    2c1c:	8f 77       	andi	r24, 0x7F	; 127
    2c1e:	85 bd       	out	0x25, r24	; 37
			SET_BIT(TCCR2,WGM20);
    2c20:	85 b5       	in	r24, 0x25	; 37
    2c22:	80 64       	ori	r24, 0x40	; 64
    2c24:	85 bd       	out	0x25, r24	; 37
			CLEAR_BIT(TCCR2,WGM21);
    2c26:	85 b5       	in	r24, 0x25	; 37
    2c28:	87 7f       	andi	r24, 0xF7	; 247
    2c2a:	85 bd       	out	0x25, r24	; 37
    2c2c:	4b c0       	rjmp	.+150    	; 0x2cc4 <Timer2_init+0xee>
			break;
		case TIMER2_CTC:
			TIMER2_FOCO_ENABLE();
    2c2e:	85 b5       	in	r24, 0x25	; 37
    2c30:	80 68       	ori	r24, 0x80	; 128
    2c32:	85 bd       	out	0x25, r24	; 37
			CLEAR_BIT(TCCR2,WGM20);
    2c34:	85 b5       	in	r24, 0x25	; 37
    2c36:	8f 7b       	andi	r24, 0xBF	; 191
    2c38:	85 bd       	out	0x25, r24	; 37
			SET_BIT(TCCR2,WGM21);
    2c3a:	85 b5       	in	r24, 0x25	; 37
    2c3c:	88 60       	ori	r24, 0x08	; 8
    2c3e:	85 bd       	out	0x25, r24	; 37
			SET_BIT(TIMER2_DIR,OC2);
    2c40:	8f 9a       	sbi	0x11, 7	; 17
}

static Bool Timer2_CTC_Normal_mode(Timer2_config_t *Timer0)
{
	Bool ret=E_OK;
	switch(Timer0->CTC_NON_PWM_mode)
    2c42:	89 81       	ldd	r24, Y+1	; 0x01
    2c44:	81 30       	cpi	r24, 0x01	; 1
    2c46:	51 f0       	breq	.+20     	; 0x2c5c <Timer2_init+0x86>
    2c48:	81 30       	cpi	r24, 0x01	; 1
    2c4a:	28 f0       	brcs	.+10     	; 0x2c56 <Timer2_init+0x80>
    2c4c:	82 30       	cpi	r24, 0x02	; 2
    2c4e:	61 f0       	breq	.+24     	; 0x2c68 <Timer2_init+0x92>
    2c50:	83 30       	cpi	r24, 0x03	; 3
    2c52:	99 f4       	brne	.+38     	; 0x2c7a <Timer2_init+0xa4>
    2c54:	0c c0       	rjmp	.+24     	; 0x2c6e <Timer2_init+0x98>
	{
		case TIMER2_CTC_NORMAL_nonPwm:
			CLEAR_BIT(TCCR2,COM20);
    2c56:	85 b5       	in	r24, 0x25	; 37
    2c58:	8f 7e       	andi	r24, 0xEF	; 239
    2c5a:	02 c0       	rjmp	.+4      	; 0x2c60 <Timer2_init+0x8a>
			CLEAR_BIT(TCCR2,COM21);
			break;
		case TIMER2_CTC_SET_TC2_nonPwm:
			SET_BIT(TCCR2,COM20);
    2c5c:	85 b5       	in	r24, 0x25	; 37
    2c5e:	80 61       	ori	r24, 0x10	; 16
    2c60:	85 bd       	out	0x25, r24	; 37
			CLEAR_BIT(TCCR2,COM21);
    2c62:	85 b5       	in	r24, 0x25	; 37
    2c64:	8f 7d       	andi	r24, 0xDF	; 223
    2c66:	08 c0       	rjmp	.+16     	; 0x2c78 <Timer2_init+0xa2>
			break;
		case TIMER2_CTC_TOGGLE_TC2_nonPwm:
			CLEAR_BIT(TCCR2,COM20);
    2c68:	85 b5       	in	r24, 0x25	; 37
    2c6a:	8f 7e       	andi	r24, 0xEF	; 239
    2c6c:	02 c0       	rjmp	.+4      	; 0x2c72 <Timer2_init+0x9c>
			SET_BIT(TCCR2,COM21);
			break;
		case TIMER2_CTC_CLEAR_TC2_nonPwm:
			SET_BIT(TCCR2,COM20);
    2c6e:	85 b5       	in	r24, 0x25	; 37
    2c70:	80 61       	ori	r24, 0x10	; 16
    2c72:	85 bd       	out	0x25, r24	; 37
			SET_BIT(TCCR2,COM21);
    2c74:	85 b5       	in	r24, 0x25	; 37
    2c76:	80 62       	ori	r24, 0x20	; 32
    2c78:	85 bd       	out	0x25, r24	; 37
			TIMER2_FOCO_ENABLE();
			CLEAR_BIT(TCCR2,WGM20);
			SET_BIT(TCCR2,WGM21);
			SET_BIT(TIMER2_DIR,OC2);
			Timer2_CTC_Normal_mode(Timer2);
			OCR2=Timer2->Preload_val;
    2c7a:	93 bd       	out	0x23, r25	; 35
    2c7c:	23 c0       	rjmp	.+70     	; 0x2cc4 <Timer2_init+0xee>
			break;
		case TIMER2_FAST_PWM:
			TIMER2_FOCO_DISABLE();
    2c7e:	85 b5       	in	r24, 0x25	; 37
    2c80:	8f 77       	andi	r24, 0x7F	; 127
    2c82:	85 bd       	out	0x25, r24	; 37
			SET_BIT(TCCR2,WGM20);
    2c84:	85 b5       	in	r24, 0x25	; 37
    2c86:	80 64       	ori	r24, 0x40	; 64
    2c88:	85 bd       	out	0x25, r24	; 37
			SET_BIT(TCCR2,WGM21);
    2c8a:	85 b5       	in	r24, 0x25	; 37
    2c8c:	88 60       	ori	r24, 0x08	; 8
    2c8e:	85 bd       	out	0x25, r24	; 37
			SET_BIT(TIMER2_DIR,OC2);
    2c90:	8f 9a       	sbi	0x11, 7	; 17
}

static Bool Timer2_CTC_FastPwm_mode(Timer2_config_t *Timer2)
{
	Bool ret=E_OK;
	switch(Timer2->CTC_FAST_PWM_Mode)
    2c92:	8a 81       	ldd	r24, Y+2	; 0x02
    2c94:	82 30       	cpi	r24, 0x02	; 2
    2c96:	51 f0       	breq	.+20     	; 0x2cac <Timer2_init+0xd6>
    2c98:	83 30       	cpi	r24, 0x03	; 3
    2c9a:	59 f0       	breq	.+22     	; 0x2cb2 <Timer2_init+0xdc>
    2c9c:	88 23       	and	r24, r24
    2c9e:	79 f4       	brne	.+30     	; 0x2cbe <Timer2_init+0xe8>
	{
		case TIMER2_CTC_NORMAL:
			CLEAR_BIT(TCCR2,COM20);
    2ca0:	85 b5       	in	r24, 0x25	; 37
    2ca2:	8f 7e       	andi	r24, 0xEF	; 239
    2ca4:	85 bd       	out	0x25, r24	; 37
			CLEAR_BIT(TCCR2,COM21);
    2ca6:	85 b5       	in	r24, 0x25	; 37
    2ca8:	8f 7d       	andi	r24, 0xDF	; 223
    2caa:	08 c0       	rjmp	.+16     	; 0x2cbc <Timer2_init+0xe6>
			break;
		case TIMER2_CTC_RESERVED:
			ret=E_OK;
			break;
		case TIMER2_CTC_CLEAR_TC2:
			CLEAR_BIT(TCCR2,COM20);
    2cac:	85 b5       	in	r24, 0x25	; 37
    2cae:	8f 7e       	andi	r24, 0xEF	; 239
    2cb0:	02 c0       	rjmp	.+4      	; 0x2cb6 <Timer2_init+0xe0>
			SET_BIT(TCCR2,COM21);
			break;
		case TIMER2_CTC_SET_TC2:
			SET_BIT(TCCR2,COM20);
    2cb2:	85 b5       	in	r24, 0x25	; 37
    2cb4:	80 61       	ori	r24, 0x10	; 16
    2cb6:	85 bd       	out	0x25, r24	; 37
			SET_BIT(TCCR2,COM21);
    2cb8:	85 b5       	in	r24, 0x25	; 37
    2cba:	80 62       	ori	r24, 0x20	; 32
    2cbc:	85 bd       	out	0x25, r24	; 37
			TIMER2_FOCO_DISABLE();
			SET_BIT(TCCR2,WGM20);
			SET_BIT(TCCR2,WGM21);
			SET_BIT(TIMER2_DIR,OC2);
			Timer2_CTC_FastPwm_mode(Timer2);
			Timer2_Setduty(Timer2->Preload_val);
    2cbe:	89 2f       	mov	r24, r25
    2cc0:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <Timer2_Setduty>
		#if TIMER2_INTERRUPT_COMP_ENABLE==FEATURE_ENABLE
			TIMER2_TOIF_CLEAR();
			INT_comp_Callback=Timer2->INT_COMP_Callback;
		#endif
		#if TIMER2_INTERRUPT_OVF_ENABLE==FEATURE_ENABLE
			GLOBAL_INT_ENABLE();
    2cc4:	8f b7       	in	r24, 0x3f	; 63
    2cc6:	80 68       	ori	r24, 0x80	; 128
    2cc8:	8f bf       	out	0x3f, r24	; 63
			TIMER2_TOEI_ENABLE();
    2cca:	89 b7       	in	r24, 0x39	; 57
    2ccc:	80 64       	ori	r24, 0x40	; 64
    2cce:	89 bf       	out	0x39, r24	; 57
			TIMER2_OVIF_CLEAR();
    2cd0:	88 b7       	in	r24, 0x38	; 56
    2cd2:	80 68       	ori	r24, 0x80	; 128
    2cd4:	88 bf       	out	0x38, r24	; 56
			INT_ovf_Callback=Timer2->INT_OVF_Callback;
    2cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cda:	90 93 ae 01 	sts	0x01AE, r25
    2cde:	80 93 ad 01 	sts	0x01AD, r24
}

static Bool Timer2_clk_prescaler(Timer2_config_t *Timer2)
{
	Bool ret=E_OK;
	switch(Timer2->Prescaler)
    2ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce4:	83 30       	cpi	r24, 0x03	; 3
    2ce6:	01 f1       	breq	.+64     	; 0x2d28 <Timer2_init+0x152>
    2ce8:	84 30       	cpi	r24, 0x04	; 4
    2cea:	28 f4       	brcc	.+10     	; 0x2cf6 <Timer2_init+0x120>
    2cec:	81 30       	cpi	r24, 0x01	; 1
    2cee:	81 f0       	breq	.+32     	; 0x2d10 <Timer2_init+0x13a>
    2cf0:	82 30       	cpi	r24, 0x02	; 2
    2cf2:	88 f4       	brcc	.+34     	; 0x2d16 <Timer2_init+0x140>
    2cf4:	07 c0       	rjmp	.+14     	; 0x2d04 <Timer2_init+0x12e>
    2cf6:	85 30       	cpi	r24, 0x05	; 5
    2cf8:	01 f1       	breq	.+64     	; 0x2d3a <Timer2_init+0x164>
    2cfa:	85 30       	cpi	r24, 0x05	; 5
    2cfc:	c0 f0       	brcs	.+48     	; 0x2d2e <Timer2_init+0x158>
    2cfe:	86 30       	cpi	r24, 0x06	; 6
    2d00:	51 f5       	brne	.+84     	; 0x2d56 <Timer2_init+0x180>
    2d02:	1e c0       	rjmp	.+60     	; 0x2d40 <Timer2_init+0x16a>
	{
		case TIMER2_FOSC_:
			SET_BIT(TCCR2,CS20);
    2d04:	85 b5       	in	r24, 0x25	; 37
    2d06:	81 60       	ori	r24, 0x01	; 1
    2d08:	85 bd       	out	0x25, r24	; 37
			CLEAR_BIT(TCCR2,CS21);
    2d0a:	85 b5       	in	r24, 0x25	; 37
    2d0c:	8d 7f       	andi	r24, 0xFD	; 253
    2d0e:	08 c0       	rjmp	.+16     	; 0x2d20 <Timer2_init+0x14a>
			CLEAR_BIT(TCCR2,CS22);
			break;
		case TIMER2_FOSC_8:
			CLEAR_BIT(TCCR2,CS00);
    2d10:	85 b5       	in	r24, 0x25	; 37
    2d12:	8e 7f       	andi	r24, 0xFE	; 254
    2d14:	02 c0       	rjmp	.+4      	; 0x2d1a <Timer2_init+0x144>
			SET_BIT(TCCR2,CS21);
			CLEAR_BIT(TCCR2,CS22);
			break;
		case TIMER2_FOSC_64:
			SET_BIT(TCCR2,CS20);
    2d16:	85 b5       	in	r24, 0x25	; 37
    2d18:	81 60       	ori	r24, 0x01	; 1
    2d1a:	85 bd       	out	0x25, r24	; 37
			SET_BIT(TCCR2,CS21);
    2d1c:	85 b5       	in	r24, 0x25	; 37
    2d1e:	82 60       	ori	r24, 0x02	; 2
    2d20:	85 bd       	out	0x25, r24	; 37
			CLEAR_BIT(TCCR2,CS22);
    2d22:	85 b5       	in	r24, 0x25	; 37
    2d24:	8b 7f       	andi	r24, 0xFB	; 251
    2d26:	14 c0       	rjmp	.+40     	; 0x2d50 <Timer2_init+0x17a>
			break;
		case TIMER2_FOSC_256:
			CLEAR_BIT(TCCR2,CS20);
    2d28:	85 b5       	in	r24, 0x25	; 37
    2d2a:	8e 7f       	andi	r24, 0xFE	; 254
    2d2c:	02 c0       	rjmp	.+4      	; 0x2d32 <Timer2_init+0x15c>
			CLEAR_BIT(TCCR2,CS21);
			SET_BIT(TCCR2,CS22);
			break;
		case TIMER2_FOSC_1024:
			SET_BIT(TCCR2,CS20);
    2d2e:	85 b5       	in	r24, 0x25	; 37
    2d30:	81 60       	ori	r24, 0x01	; 1
    2d32:	85 bd       	out	0x25, r24	; 37
			CLEAR_BIT(TCCR2,CS21);
    2d34:	85 b5       	in	r24, 0x25	; 37
    2d36:	8d 7f       	andi	r24, 0xFD	; 253
    2d38:	08 c0       	rjmp	.+16     	; 0x2d4a <Timer2_init+0x174>
			SET_BIT(TCCR2,CS22);
			break;
		case TIMER2_T2_COUNTER_MODE_FEDG:
			CLEAR_BIT(TCCR2,CS20);
    2d3a:	85 b5       	in	r24, 0x25	; 37
    2d3c:	8e 7f       	andi	r24, 0xFE	; 254
    2d3e:	02 c0       	rjmp	.+4      	; 0x2d44 <Timer2_init+0x16e>
			SET_BIT(TCCR2,CS21);
			SET_BIT(TCCR2,CS22);
			break;
		case TIMER2_T2_COUNTER_MODE_REDG:
			SET_BIT(TCCR2,CS20);
    2d40:	85 b5       	in	r24, 0x25	; 37
    2d42:	81 60       	ori	r24, 0x01	; 1
    2d44:	85 bd       	out	0x25, r24	; 37
			SET_BIT(TCCR2,CS21);
    2d46:	85 b5       	in	r24, 0x25	; 37
    2d48:	82 60       	ori	r24, 0x02	; 2
    2d4a:	85 bd       	out	0x25, r24	; 37
			SET_BIT(TCCR2,CS22);
    2d4c:	85 b5       	in	r24, 0x25	; 37
    2d4e:	84 60       	ori	r24, 0x04	; 4
    2d50:	85 bd       	out	0x25, r24	; 37
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	01 c0       	rjmp	.+2      	; 0x2d58 <Timer2_init+0x182>
    2d56:	80 e0       	ldi	r24, 0x00	; 0
		ret=Timer2_mode_set(Timer2);
		ret=Timer2_Interrupt_set(Timer2);
		ret=Timer2_clk_prescaler(Timer2);
	}
	return ret;
}
    2d58:	df 91       	pop	r29
    2d5a:	cf 91       	pop	r28
    2d5c:	08 95       	ret

00002d5e <Timer2_set_Val>:
}

Bool Timer2_set_Val(uint8 Val)
{
	Bool ret=E_OK;
	TCNT2=Val;
    2d5e:	84 bd       	out	0x24, r24	; 36
	return ret;
}
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	08 95       	ret

00002d64 <Timer2_get_Val>:

Bool Timer2_get_Val(uint8* Val)
{
    2d64:	fc 01       	movw	r30, r24
	Bool ret = E_OK;
	if (NULL==Val)
    2d66:	00 97       	sbiw	r24, 0x00	; 0
    2d68:	11 f4       	brne	.+4      	; 0x2d6e <Timer2_get_Val+0xa>
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	08 95       	ret
		ret = E_NOK;
	else
	{
		*Val=TCNT2;
    2d6e:	84 b5       	in	r24, 0x24	; 36
    2d70:	80 83       	st	Z, r24
    2d72:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ret;
}
    2d74:	08 95       	ret

00002d76 <Timer2_delay_polling>:

Bool Timer2_delay_polling(Timer2_config_t *Timer2)
{
    2d76:	fc 01       	movw	r30, r24
	Bool ret=E_OK;
	if (NULL==Timer2)
    2d78:	00 97       	sbiw	r24, 0x00	; 0
    2d7a:	11 f4       	brne	.+4      	; 0x2d80 <Timer2_delay_polling+0xa>
    2d7c:	80 e0       	ldi	r24, 0x00	; 0
    2d7e:	08 95       	ret
			ret = E_NOK;
	else
	{
		uint8 Prescaler=TCCR2&=0x07;
    2d80:	85 b5       	in	r24, 0x25	; 37
    2d82:	87 70       	andi	r24, 0x07	; 7
    2d84:	85 bd       	out	0x25, r24	; 37
    2d86:	95 b5       	in	r25, 0x25	; 37
		TIMER2_STOP();
    2d88:	85 b5       	in	r24, 0x25	; 37
    2d8a:	88 7f       	andi	r24, 0xF8	; 248
    2d8c:	85 bd       	out	0x25, r24	; 37
		Timer2_set_Val(Timer2->Preload_val);
    2d8e:	84 81       	ldd	r24, Z+4	; 0x04
}

Bool Timer2_set_Val(uint8 Val)
{
	Bool ret=E_OK;
	TCNT2=Val;
    2d90:	84 bd       	out	0x24, r24	; 36
	else
	{
		uint8 Prescaler=TCCR2&=0x07;
		TIMER2_STOP();
		Timer2_set_Val(Timer2->Preload_val);
		TCCR2|=Prescaler;
    2d92:	85 b5       	in	r24, 0x25	; 37
    2d94:	89 2b       	or	r24, r25
    2d96:	85 bd       	out	0x25, r24	; 37
		while(!(READ_BIT(TIFR,TOV2)));
    2d98:	08 b6       	in	r0, 0x38	; 56
    2d9a:	06 fe       	sbrs	r0, 6
    2d9c:	fd cf       	rjmp	.-6      	; 0x2d98 <Timer2_delay_polling+0x22>
		TIMER2_OVIF_CLEAR();
    2d9e:	88 b7       	in	r24, 0x38	; 56
    2da0:	80 68       	ori	r24, 0x80	; 128
    2da2:	88 bf       	out	0x38, r24	; 56
    2da4:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ret;
}
    2da6:	08 95       	ret

00002da8 <Timer2_ovf_ISR>:

void Timer2_ovf_ISR()
{
#if TIMER2_INTERRUPT_OVF_ENABLE==FEATURE_ENABLE
	TIMER2_OVIF_CLEAR();
    2da8:	88 b7       	in	r24, 0x38	; 56
    2daa:	80 68       	ori	r24, 0x80	; 128
    2dac:	88 bf       	out	0x38, r24	; 56
	TCNT2=GLOB_val;
    2dae:	80 91 d6 01 	lds	r24, 0x01D6
    2db2:	84 bd       	out	0x24, r24	; 36
	if (INT_ovf_Callback)
    2db4:	e0 91 ad 01 	lds	r30, 0x01AD
    2db8:	f0 91 ae 01 	lds	r31, 0x01AE
    2dbc:	30 97       	sbiw	r30, 0x00	; 0
    2dbe:	09 f0       	breq	.+2      	; 0x2dc2 <Timer2_ovf_ISR+0x1a>
		INT_ovf_Callback();
    2dc0:	09 95       	icall
    2dc2:	08 95       	ret

00002dc4 <main>:
		.LCD_Data[3].GPIO_LOGIC_LEVEL=GPIO_LOW,
};


int main()
{
    2dc4:	1f 93       	push	r17
	DDRA|=(1<<2);
    2dc6:	d2 9a       	sbi	0x1a, 2	; 26
	Ret=LCD_4BIT_INIT(&LCD);
    2dc8:	8b e9       	ldi	r24, 0x9B	; 155
    2dca:	91 e0       	ldi	r25, 0x01	; 1
    2dcc:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <LCD_4BIT_INIT>
    2dd0:	80 93 eb 01 	sts	0x01EB, r24
	Ret=LCD_4BIT_SEND_STRING_POS(&LCD,"Type:",1,0);
    2dd4:	8b e9       	ldi	r24, 0x9B	; 155
    2dd6:	91 e0       	ldi	r25, 0x01	; 1
    2dd8:	6f e6       	ldi	r22, 0x6F	; 111
    2dda:	70 e0       	ldi	r23, 0x00	; 0
    2ddc:	41 e0       	ldi	r20, 0x01	; 1
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <LCD_4BIT_SEND_STRING_POS>
    2de4:	80 93 eb 01 	sts	0x01EB, r24
	Ret=LCD_4BIT_SEND_STRING_POS(&LCD,"Code:",2,0);
    2de8:	8b e9       	ldi	r24, 0x9B	; 155
    2dea:	91 e0       	ldi	r25, 0x01	; 1
    2dec:	65 e7       	ldi	r22, 0x75	; 117
    2dee:	70 e0       	ldi	r23, 0x00	; 0
    2df0:	42 e0       	ldi	r20, 0x02	; 2
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <LCD_4BIT_SEND_STRING_POS>
    2df8:	80 93 eb 01 	sts	0x01EB, r24
	IR_INIT(IR_RECIEVER);
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	0e 94 b6 10 	call	0x216c	; 0x216c <IR_INIT>
		{
			Ret=LCD_4BIT_SEND_STRING_POS(&LCD,Protcol,1,5);
			convert_int_to_Hex(Code,Code_str);
			LCD_4BIT_SEND_STRING_POS(&LCD,Code_str,2,5);
			if((Flag==E_OK)&&(Code==0xA10))
				PORTA^=(1<<2);
    2e02:	14 e0       	ldi	r17, 0x04	; 4
	Ret=LCD_4BIT_SEND_STRING_POS(&LCD,"Type:",1,0);
	Ret=LCD_4BIT_SEND_STRING_POS(&LCD,"Code:",2,0);
	IR_INIT(IR_RECIEVER);
	while(1)
	{
		Flag=IR_Read(Protcol,&Code);
    2e04:	8f ea       	ldi	r24, 0xAF	; 175
    2e06:	91 e0       	ldi	r25, 0x01	; 1
    2e08:	67 ed       	ldi	r22, 0xD7	; 215
    2e0a:	71 e0       	ldi	r23, 0x01	; 1
    2e0c:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <IR_Read>
    2e10:	80 93 b4 01 	sts	0x01B4, r24
		if(Flag==E_OK)
    2e14:	81 30       	cpi	r24, 0x01	; 1
    2e16:	b1 f7       	brne	.-20     	; 0x2e04 <main+0x40>
		{
			Ret=LCD_4BIT_SEND_STRING_POS(&LCD,Protcol,1,5);
    2e18:	8b e9       	ldi	r24, 0x9B	; 155
    2e1a:	91 e0       	ldi	r25, 0x01	; 1
    2e1c:	6f ea       	ldi	r22, 0xAF	; 175
    2e1e:	71 e0       	ldi	r23, 0x01	; 1
    2e20:	41 e0       	ldi	r20, 0x01	; 1
    2e22:	25 e0       	ldi	r18, 0x05	; 5
    2e24:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <LCD_4BIT_SEND_STRING_POS>
    2e28:	80 93 eb 01 	sts	0x01EB, r24
			convert_int_to_Hex(Code,Code_str);
    2e2c:	60 91 d7 01 	lds	r22, 0x01D7
    2e30:	70 91 d8 01 	lds	r23, 0x01D8
    2e34:	80 91 d9 01 	lds	r24, 0x01D9
    2e38:	90 91 da 01 	lds	r25, 0x01DA
    2e3c:	4b ed       	ldi	r20, 0xDB	; 219
    2e3e:	51 e0       	ldi	r21, 0x01	; 1
    2e40:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <convert_int_to_Hex>
			LCD_4BIT_SEND_STRING_POS(&LCD,Code_str,2,5);
    2e44:	8b e9       	ldi	r24, 0x9B	; 155
    2e46:	91 e0       	ldi	r25, 0x01	; 1
    2e48:	6b ed       	ldi	r22, 0xDB	; 219
    2e4a:	71 e0       	ldi	r23, 0x01	; 1
    2e4c:	42 e0       	ldi	r20, 0x02	; 2
    2e4e:	25 e0       	ldi	r18, 0x05	; 5
    2e50:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <LCD_4BIT_SEND_STRING_POS>
			if((Flag==E_OK)&&(Code==0xA10))
    2e54:	80 91 b4 01 	lds	r24, 0x01B4
    2e58:	81 30       	cpi	r24, 0x01	; 1
    2e5a:	a1 f6       	brne	.-88     	; 0x2e04 <main+0x40>
    2e5c:	80 91 d7 01 	lds	r24, 0x01D7
    2e60:	90 91 d8 01 	lds	r25, 0x01D8
    2e64:	a0 91 d9 01 	lds	r26, 0x01D9
    2e68:	b0 91 da 01 	lds	r27, 0x01DA
    2e6c:	80 51       	subi	r24, 0x10	; 16
    2e6e:	9a 40       	sbci	r25, 0x0A	; 10
    2e70:	a0 40       	sbci	r26, 0x00	; 0
    2e72:	b0 40       	sbci	r27, 0x00	; 0
    2e74:	39 f6       	brne	.-114    	; 0x2e04 <main+0x40>
				PORTA^=(1<<2);
    2e76:	8b b3       	in	r24, 0x1b	; 27
    2e78:	81 27       	eor	r24, r17
    2e7a:	8b bb       	out	0x1b, r24	; 27
    2e7c:	c3 cf       	rjmp	.-122    	; 0x2e04 <main+0x40>

00002e7e <__divmodsi4>:
    2e7e:	97 fb       	bst	r25, 7
    2e80:	09 2e       	mov	r0, r25
    2e82:	05 26       	eor	r0, r21
    2e84:	0e d0       	rcall	.+28     	; 0x2ea2 <__divmodsi4_neg1>
    2e86:	57 fd       	sbrc	r21, 7
    2e88:	04 d0       	rcall	.+8      	; 0x2e92 <__divmodsi4_neg2>
    2e8a:	14 d0       	rcall	.+40     	; 0x2eb4 <__udivmodsi4>
    2e8c:	0a d0       	rcall	.+20     	; 0x2ea2 <__divmodsi4_neg1>
    2e8e:	00 1c       	adc	r0, r0
    2e90:	38 f4       	brcc	.+14     	; 0x2ea0 <__divmodsi4_exit>

00002e92 <__divmodsi4_neg2>:
    2e92:	50 95       	com	r21
    2e94:	40 95       	com	r20
    2e96:	30 95       	com	r19
    2e98:	21 95       	neg	r18
    2e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e9c:	4f 4f       	sbci	r20, 0xFF	; 255
    2e9e:	5f 4f       	sbci	r21, 0xFF	; 255

00002ea0 <__divmodsi4_exit>:
    2ea0:	08 95       	ret

00002ea2 <__divmodsi4_neg1>:
    2ea2:	f6 f7       	brtc	.-4      	; 0x2ea0 <__divmodsi4_exit>
    2ea4:	90 95       	com	r25
    2ea6:	80 95       	com	r24
    2ea8:	70 95       	com	r23
    2eaa:	61 95       	neg	r22
    2eac:	7f 4f       	sbci	r23, 0xFF	; 255
    2eae:	8f 4f       	sbci	r24, 0xFF	; 255
    2eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb2:	08 95       	ret

00002eb4 <__udivmodsi4>:
    2eb4:	a1 e2       	ldi	r26, 0x21	; 33
    2eb6:	1a 2e       	mov	r1, r26
    2eb8:	aa 1b       	sub	r26, r26
    2eba:	bb 1b       	sub	r27, r27
    2ebc:	fd 01       	movw	r30, r26
    2ebe:	0d c0       	rjmp	.+26     	; 0x2eda <__udivmodsi4_ep>

00002ec0 <__udivmodsi4_loop>:
    2ec0:	aa 1f       	adc	r26, r26
    2ec2:	bb 1f       	adc	r27, r27
    2ec4:	ee 1f       	adc	r30, r30
    2ec6:	ff 1f       	adc	r31, r31
    2ec8:	a2 17       	cp	r26, r18
    2eca:	b3 07       	cpc	r27, r19
    2ecc:	e4 07       	cpc	r30, r20
    2ece:	f5 07       	cpc	r31, r21
    2ed0:	20 f0       	brcs	.+8      	; 0x2eda <__udivmodsi4_ep>
    2ed2:	a2 1b       	sub	r26, r18
    2ed4:	b3 0b       	sbc	r27, r19
    2ed6:	e4 0b       	sbc	r30, r20
    2ed8:	f5 0b       	sbc	r31, r21

00002eda <__udivmodsi4_ep>:
    2eda:	66 1f       	adc	r22, r22
    2edc:	77 1f       	adc	r23, r23
    2ede:	88 1f       	adc	r24, r24
    2ee0:	99 1f       	adc	r25, r25
    2ee2:	1a 94       	dec	r1
    2ee4:	69 f7       	brne	.-38     	; 0x2ec0 <__udivmodsi4_loop>
    2ee6:	60 95       	com	r22
    2ee8:	70 95       	com	r23
    2eea:	80 95       	com	r24
    2eec:	90 95       	com	r25
    2eee:	9b 01       	movw	r18, r22
    2ef0:	ac 01       	movw	r20, r24
    2ef2:	bd 01       	movw	r22, r26
    2ef4:	cf 01       	movw	r24, r30
    2ef6:	08 95       	ret

00002ef8 <__prologue_saves__>:
    2ef8:	2f 92       	push	r2
    2efa:	3f 92       	push	r3
    2efc:	4f 92       	push	r4
    2efe:	5f 92       	push	r5
    2f00:	6f 92       	push	r6
    2f02:	7f 92       	push	r7
    2f04:	8f 92       	push	r8
    2f06:	9f 92       	push	r9
    2f08:	af 92       	push	r10
    2f0a:	bf 92       	push	r11
    2f0c:	cf 92       	push	r12
    2f0e:	df 92       	push	r13
    2f10:	ef 92       	push	r14
    2f12:	ff 92       	push	r15
    2f14:	0f 93       	push	r16
    2f16:	1f 93       	push	r17
    2f18:	cf 93       	push	r28
    2f1a:	df 93       	push	r29
    2f1c:	cd b7       	in	r28, 0x3d	; 61
    2f1e:	de b7       	in	r29, 0x3e	; 62
    2f20:	ca 1b       	sub	r28, r26
    2f22:	db 0b       	sbc	r29, r27
    2f24:	0f b6       	in	r0, 0x3f	; 63
    2f26:	f8 94       	cli
    2f28:	de bf       	out	0x3e, r29	; 62
    2f2a:	0f be       	out	0x3f, r0	; 63
    2f2c:	cd bf       	out	0x3d, r28	; 61
    2f2e:	09 94       	ijmp

00002f30 <__epilogue_restores__>:
    2f30:	2a 88       	ldd	r2, Y+18	; 0x12
    2f32:	39 88       	ldd	r3, Y+17	; 0x11
    2f34:	48 88       	ldd	r4, Y+16	; 0x10
    2f36:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f38:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f3a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f3c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f3e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f40:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f42:	b9 84       	ldd	r11, Y+9	; 0x09
    2f44:	c8 84       	ldd	r12, Y+8	; 0x08
    2f46:	df 80       	ldd	r13, Y+7	; 0x07
    2f48:	ee 80       	ldd	r14, Y+6	; 0x06
    2f4a:	fd 80       	ldd	r15, Y+5	; 0x05
    2f4c:	0c 81       	ldd	r16, Y+4	; 0x04
    2f4e:	1b 81       	ldd	r17, Y+3	; 0x03
    2f50:	aa 81       	ldd	r26, Y+2	; 0x02
    2f52:	b9 81       	ldd	r27, Y+1	; 0x01
    2f54:	ce 0f       	add	r28, r30
    2f56:	d1 1d       	adc	r29, r1
    2f58:	0f b6       	in	r0, 0x3f	; 63
    2f5a:	f8 94       	cli
    2f5c:	de bf       	out	0x3e, r29	; 62
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	cd bf       	out	0x3d, r28	; 61
    2f62:	ed 01       	movw	r28, r26
    2f64:	08 95       	ret

00002f66 <strcat>:
    2f66:	fb 01       	movw	r30, r22
    2f68:	dc 01       	movw	r26, r24
    2f6a:	0d 90       	ld	r0, X+
    2f6c:	00 20       	and	r0, r0
    2f6e:	e9 f7       	brne	.-6      	; 0x2f6a <strcat+0x4>
    2f70:	11 97       	sbiw	r26, 0x01	; 1
    2f72:	01 90       	ld	r0, Z+
    2f74:	0d 92       	st	X+, r0
    2f76:	00 20       	and	r0, r0
    2f78:	e1 f7       	brne	.-8      	; 0x2f72 <strcat+0xc>
    2f7a:	08 95       	ret

00002f7c <strncat>:
    2f7c:	fb 01       	movw	r30, r22
    2f7e:	dc 01       	movw	r26, r24
    2f80:	0d 90       	ld	r0, X+
    2f82:	00 20       	and	r0, r0
    2f84:	e9 f7       	brne	.-6      	; 0x2f80 <strncat+0x4>
    2f86:	11 97       	sbiw	r26, 0x01	; 1
    2f88:	41 50       	subi	r20, 0x01	; 1
    2f8a:	50 40       	sbci	r21, 0x00	; 0
    2f8c:	28 f0       	brcs	.+10     	; 0x2f98 <strncat+0x1c>
    2f8e:	01 90       	ld	r0, Z+
    2f90:	00 20       	and	r0, r0
    2f92:	0d 92       	st	X+, r0
    2f94:	c9 f7       	brne	.-14     	; 0x2f88 <strncat+0xc>
    2f96:	08 95       	ret
    2f98:	1c 92       	st	X, r1
    2f9a:	08 95       	ret

00002f9c <sprintf>:
    2f9c:	ae e0       	ldi	r26, 0x0E	; 14
    2f9e:	b0 e0       	ldi	r27, 0x00	; 0
    2fa0:	e4 ed       	ldi	r30, 0xD4	; 212
    2fa2:	f7 e1       	ldi	r31, 0x17	; 23
    2fa4:	0c 94 8a 17 	jmp	0x2f14	; 0x2f14 <__prologue_saves__+0x1c>
    2fa8:	0d 89       	ldd	r16, Y+21	; 0x15
    2faa:	1e 89       	ldd	r17, Y+22	; 0x16
    2fac:	86 e0       	ldi	r24, 0x06	; 6
    2fae:	8c 83       	std	Y+4, r24	; 0x04
    2fb0:	1a 83       	std	Y+2, r17	; 0x02
    2fb2:	09 83       	std	Y+1, r16	; 0x01
    2fb4:	8f ef       	ldi	r24, 0xFF	; 255
    2fb6:	9f e7       	ldi	r25, 0x7F	; 127
    2fb8:	9e 83       	std	Y+6, r25	; 0x06
    2fba:	8d 83       	std	Y+5, r24	; 0x05
    2fbc:	9e 01       	movw	r18, r28
    2fbe:	27 5e       	subi	r18, 0xE7	; 231
    2fc0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fc2:	ce 01       	movw	r24, r28
    2fc4:	01 96       	adiw	r24, 0x01	; 1
    2fc6:	6f 89       	ldd	r22, Y+23	; 0x17
    2fc8:	78 8d       	ldd	r23, Y+24	; 0x18
    2fca:	a9 01       	movw	r20, r18
    2fcc:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <vfprintf>
    2fd0:	2f 81       	ldd	r18, Y+7	; 0x07
    2fd2:	38 85       	ldd	r19, Y+8	; 0x08
    2fd4:	02 0f       	add	r16, r18
    2fd6:	13 1f       	adc	r17, r19
    2fd8:	f8 01       	movw	r30, r16
    2fda:	10 82       	st	Z, r1
    2fdc:	2e 96       	adiw	r28, 0x0e	; 14
    2fde:	e4 e0       	ldi	r30, 0x04	; 4
    2fe0:	0c 94 a6 17 	jmp	0x2f4c	; 0x2f4c <__epilogue_restores__+0x1c>

00002fe4 <vfprintf>:
    2fe4:	ab e0       	ldi	r26, 0x0B	; 11
    2fe6:	b0 e0       	ldi	r27, 0x00	; 0
    2fe8:	e8 ef       	ldi	r30, 0xF8	; 248
    2fea:	f7 e1       	ldi	r31, 0x17	; 23
    2fec:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__prologue_saves__>
    2ff0:	3c 01       	movw	r6, r24
    2ff2:	2b 01       	movw	r4, r22
    2ff4:	5a 01       	movw	r10, r20
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	17 82       	std	Z+7, r1	; 0x07
    2ffa:	16 82       	std	Z+6, r1	; 0x06
    2ffc:	83 81       	ldd	r24, Z+3	; 0x03
    2ffe:	81 fd       	sbrc	r24, 1
    3000:	03 c0       	rjmp	.+6      	; 0x3008 <vfprintf+0x24>
    3002:	6f ef       	ldi	r22, 0xFF	; 255
    3004:	7f ef       	ldi	r23, 0xFF	; 255
    3006:	c6 c1       	rjmp	.+908    	; 0x3394 <vfprintf+0x3b0>
    3008:	9a e0       	ldi	r25, 0x0A	; 10
    300a:	89 2e       	mov	r8, r25
    300c:	1e 01       	movw	r2, r28
    300e:	08 94       	sec
    3010:	21 1c       	adc	r2, r1
    3012:	31 1c       	adc	r3, r1
    3014:	f3 01       	movw	r30, r6
    3016:	23 81       	ldd	r18, Z+3	; 0x03
    3018:	f2 01       	movw	r30, r4
    301a:	23 fd       	sbrc	r18, 3
    301c:	85 91       	lpm	r24, Z+
    301e:	23 ff       	sbrs	r18, 3
    3020:	81 91       	ld	r24, Z+
    3022:	2f 01       	movw	r4, r30
    3024:	88 23       	and	r24, r24
    3026:	09 f4       	brne	.+2      	; 0x302a <vfprintf+0x46>
    3028:	b2 c1       	rjmp	.+868    	; 0x338e <vfprintf+0x3aa>
    302a:	85 32       	cpi	r24, 0x25	; 37
    302c:	39 f4       	brne	.+14     	; 0x303c <vfprintf+0x58>
    302e:	23 fd       	sbrc	r18, 3
    3030:	85 91       	lpm	r24, Z+
    3032:	23 ff       	sbrs	r18, 3
    3034:	81 91       	ld	r24, Z+
    3036:	2f 01       	movw	r4, r30
    3038:	85 32       	cpi	r24, 0x25	; 37
    303a:	29 f4       	brne	.+10     	; 0x3046 <vfprintf+0x62>
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	b3 01       	movw	r22, r6
    3040:	0e 94 e5 19 	call	0x33ca	; 0x33ca <fputc>
    3044:	e7 cf       	rjmp	.-50     	; 0x3014 <vfprintf+0x30>
    3046:	98 2f       	mov	r25, r24
    3048:	ff 24       	eor	r15, r15
    304a:	ee 24       	eor	r14, r14
    304c:	99 24       	eor	r9, r9
    304e:	ff e1       	ldi	r31, 0x1F	; 31
    3050:	ff 15       	cp	r31, r15
    3052:	d0 f0       	brcs	.+52     	; 0x3088 <vfprintf+0xa4>
    3054:	9b 32       	cpi	r25, 0x2B	; 43
    3056:	69 f0       	breq	.+26     	; 0x3072 <vfprintf+0x8e>
    3058:	9c 32       	cpi	r25, 0x2C	; 44
    305a:	28 f4       	brcc	.+10     	; 0x3066 <vfprintf+0x82>
    305c:	90 32       	cpi	r25, 0x20	; 32
    305e:	59 f0       	breq	.+22     	; 0x3076 <vfprintf+0x92>
    3060:	93 32       	cpi	r25, 0x23	; 35
    3062:	91 f4       	brne	.+36     	; 0x3088 <vfprintf+0xa4>
    3064:	0e c0       	rjmp	.+28     	; 0x3082 <vfprintf+0x9e>
    3066:	9d 32       	cpi	r25, 0x2D	; 45
    3068:	49 f0       	breq	.+18     	; 0x307c <vfprintf+0x98>
    306a:	90 33       	cpi	r25, 0x30	; 48
    306c:	69 f4       	brne	.+26     	; 0x3088 <vfprintf+0xa4>
    306e:	41 e0       	ldi	r20, 0x01	; 1
    3070:	24 c0       	rjmp	.+72     	; 0x30ba <vfprintf+0xd6>
    3072:	52 e0       	ldi	r21, 0x02	; 2
    3074:	f5 2a       	or	r15, r21
    3076:	84 e0       	ldi	r24, 0x04	; 4
    3078:	f8 2a       	or	r15, r24
    307a:	28 c0       	rjmp	.+80     	; 0x30cc <vfprintf+0xe8>
    307c:	98 e0       	ldi	r25, 0x08	; 8
    307e:	f9 2a       	or	r15, r25
    3080:	25 c0       	rjmp	.+74     	; 0x30cc <vfprintf+0xe8>
    3082:	e0 e1       	ldi	r30, 0x10	; 16
    3084:	fe 2a       	or	r15, r30
    3086:	22 c0       	rjmp	.+68     	; 0x30cc <vfprintf+0xe8>
    3088:	f7 fc       	sbrc	r15, 7
    308a:	29 c0       	rjmp	.+82     	; 0x30de <vfprintf+0xfa>
    308c:	89 2f       	mov	r24, r25
    308e:	80 53       	subi	r24, 0x30	; 48
    3090:	8a 30       	cpi	r24, 0x0A	; 10
    3092:	70 f4       	brcc	.+28     	; 0x30b0 <vfprintf+0xcc>
    3094:	f6 fe       	sbrs	r15, 6
    3096:	05 c0       	rjmp	.+10     	; 0x30a2 <vfprintf+0xbe>
    3098:	98 9c       	mul	r9, r8
    309a:	90 2c       	mov	r9, r0
    309c:	11 24       	eor	r1, r1
    309e:	98 0e       	add	r9, r24
    30a0:	15 c0       	rjmp	.+42     	; 0x30cc <vfprintf+0xe8>
    30a2:	e8 9c       	mul	r14, r8
    30a4:	e0 2c       	mov	r14, r0
    30a6:	11 24       	eor	r1, r1
    30a8:	e8 0e       	add	r14, r24
    30aa:	f0 e2       	ldi	r31, 0x20	; 32
    30ac:	ff 2a       	or	r15, r31
    30ae:	0e c0       	rjmp	.+28     	; 0x30cc <vfprintf+0xe8>
    30b0:	9e 32       	cpi	r25, 0x2E	; 46
    30b2:	29 f4       	brne	.+10     	; 0x30be <vfprintf+0xda>
    30b4:	f6 fc       	sbrc	r15, 6
    30b6:	6b c1       	rjmp	.+726    	; 0x338e <vfprintf+0x3aa>
    30b8:	40 e4       	ldi	r20, 0x40	; 64
    30ba:	f4 2a       	or	r15, r20
    30bc:	07 c0       	rjmp	.+14     	; 0x30cc <vfprintf+0xe8>
    30be:	9c 36       	cpi	r25, 0x6C	; 108
    30c0:	19 f4       	brne	.+6      	; 0x30c8 <vfprintf+0xe4>
    30c2:	50 e8       	ldi	r21, 0x80	; 128
    30c4:	f5 2a       	or	r15, r21
    30c6:	02 c0       	rjmp	.+4      	; 0x30cc <vfprintf+0xe8>
    30c8:	98 36       	cpi	r25, 0x68	; 104
    30ca:	49 f4       	brne	.+18     	; 0x30de <vfprintf+0xfa>
    30cc:	f2 01       	movw	r30, r4
    30ce:	23 fd       	sbrc	r18, 3
    30d0:	95 91       	lpm	r25, Z+
    30d2:	23 ff       	sbrs	r18, 3
    30d4:	91 91       	ld	r25, Z+
    30d6:	2f 01       	movw	r4, r30
    30d8:	99 23       	and	r25, r25
    30da:	09 f0       	breq	.+2      	; 0x30de <vfprintf+0xfa>
    30dc:	b8 cf       	rjmp	.-144    	; 0x304e <vfprintf+0x6a>
    30de:	89 2f       	mov	r24, r25
    30e0:	85 54       	subi	r24, 0x45	; 69
    30e2:	83 30       	cpi	r24, 0x03	; 3
    30e4:	18 f0       	brcs	.+6      	; 0x30ec <vfprintf+0x108>
    30e6:	80 52       	subi	r24, 0x20	; 32
    30e8:	83 30       	cpi	r24, 0x03	; 3
    30ea:	38 f4       	brcc	.+14     	; 0x30fa <vfprintf+0x116>
    30ec:	44 e0       	ldi	r20, 0x04	; 4
    30ee:	50 e0       	ldi	r21, 0x00	; 0
    30f0:	a4 0e       	add	r10, r20
    30f2:	b5 1e       	adc	r11, r21
    30f4:	5f e3       	ldi	r21, 0x3F	; 63
    30f6:	59 83       	std	Y+1, r21	; 0x01
    30f8:	0f c0       	rjmp	.+30     	; 0x3118 <vfprintf+0x134>
    30fa:	93 36       	cpi	r25, 0x63	; 99
    30fc:	31 f0       	breq	.+12     	; 0x310a <vfprintf+0x126>
    30fe:	93 37       	cpi	r25, 0x73	; 115
    3100:	79 f0       	breq	.+30     	; 0x3120 <vfprintf+0x13c>
    3102:	93 35       	cpi	r25, 0x53	; 83
    3104:	09 f0       	breq	.+2      	; 0x3108 <vfprintf+0x124>
    3106:	56 c0       	rjmp	.+172    	; 0x31b4 <vfprintf+0x1d0>
    3108:	20 c0       	rjmp	.+64     	; 0x314a <vfprintf+0x166>
    310a:	f5 01       	movw	r30, r10
    310c:	80 81       	ld	r24, Z
    310e:	89 83       	std	Y+1, r24	; 0x01
    3110:	42 e0       	ldi	r20, 0x02	; 2
    3112:	50 e0       	ldi	r21, 0x00	; 0
    3114:	a4 0e       	add	r10, r20
    3116:	b5 1e       	adc	r11, r21
    3118:	61 01       	movw	r12, r2
    311a:	01 e0       	ldi	r16, 0x01	; 1
    311c:	10 e0       	ldi	r17, 0x00	; 0
    311e:	12 c0       	rjmp	.+36     	; 0x3144 <vfprintf+0x160>
    3120:	f5 01       	movw	r30, r10
    3122:	c0 80       	ld	r12, Z
    3124:	d1 80       	ldd	r13, Z+1	; 0x01
    3126:	f6 fc       	sbrc	r15, 6
    3128:	03 c0       	rjmp	.+6      	; 0x3130 <vfprintf+0x14c>
    312a:	6f ef       	ldi	r22, 0xFF	; 255
    312c:	7f ef       	ldi	r23, 0xFF	; 255
    312e:	02 c0       	rjmp	.+4      	; 0x3134 <vfprintf+0x150>
    3130:	69 2d       	mov	r22, r9
    3132:	70 e0       	ldi	r23, 0x00	; 0
    3134:	42 e0       	ldi	r20, 0x02	; 2
    3136:	50 e0       	ldi	r21, 0x00	; 0
    3138:	a4 0e       	add	r10, r20
    313a:	b5 1e       	adc	r11, r21
    313c:	c6 01       	movw	r24, r12
    313e:	0e 94 da 19 	call	0x33b4	; 0x33b4 <strnlen>
    3142:	8c 01       	movw	r16, r24
    3144:	5f e7       	ldi	r21, 0x7F	; 127
    3146:	f5 22       	and	r15, r21
    3148:	14 c0       	rjmp	.+40     	; 0x3172 <vfprintf+0x18e>
    314a:	f5 01       	movw	r30, r10
    314c:	c0 80       	ld	r12, Z
    314e:	d1 80       	ldd	r13, Z+1	; 0x01
    3150:	f6 fc       	sbrc	r15, 6
    3152:	03 c0       	rjmp	.+6      	; 0x315a <vfprintf+0x176>
    3154:	6f ef       	ldi	r22, 0xFF	; 255
    3156:	7f ef       	ldi	r23, 0xFF	; 255
    3158:	02 c0       	rjmp	.+4      	; 0x315e <vfprintf+0x17a>
    315a:	69 2d       	mov	r22, r9
    315c:	70 e0       	ldi	r23, 0x00	; 0
    315e:	42 e0       	ldi	r20, 0x02	; 2
    3160:	50 e0       	ldi	r21, 0x00	; 0
    3162:	a4 0e       	add	r10, r20
    3164:	b5 1e       	adc	r11, r21
    3166:	c6 01       	movw	r24, r12
    3168:	0e 94 cf 19 	call	0x339e	; 0x339e <strnlen_P>
    316c:	8c 01       	movw	r16, r24
    316e:	50 e8       	ldi	r21, 0x80	; 128
    3170:	f5 2a       	or	r15, r21
    3172:	f3 fe       	sbrs	r15, 3
    3174:	07 c0       	rjmp	.+14     	; 0x3184 <vfprintf+0x1a0>
    3176:	1a c0       	rjmp	.+52     	; 0x31ac <vfprintf+0x1c8>
    3178:	80 e2       	ldi	r24, 0x20	; 32
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	b3 01       	movw	r22, r6
    317e:	0e 94 e5 19 	call	0x33ca	; 0x33ca <fputc>
    3182:	ea 94       	dec	r14
    3184:	8e 2d       	mov	r24, r14
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	08 17       	cp	r16, r24
    318a:	19 07       	cpc	r17, r25
    318c:	a8 f3       	brcs	.-22     	; 0x3178 <vfprintf+0x194>
    318e:	0e c0       	rjmp	.+28     	; 0x31ac <vfprintf+0x1c8>
    3190:	f6 01       	movw	r30, r12
    3192:	f7 fc       	sbrc	r15, 7
    3194:	85 91       	lpm	r24, Z+
    3196:	f7 fe       	sbrs	r15, 7
    3198:	81 91       	ld	r24, Z+
    319a:	6f 01       	movw	r12, r30
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	b3 01       	movw	r22, r6
    31a0:	0e 94 e5 19 	call	0x33ca	; 0x33ca <fputc>
    31a4:	e1 10       	cpse	r14, r1
    31a6:	ea 94       	dec	r14
    31a8:	01 50       	subi	r16, 0x01	; 1
    31aa:	10 40       	sbci	r17, 0x00	; 0
    31ac:	01 15       	cp	r16, r1
    31ae:	11 05       	cpc	r17, r1
    31b0:	79 f7       	brne	.-34     	; 0x3190 <vfprintf+0x1ac>
    31b2:	ea c0       	rjmp	.+468    	; 0x3388 <vfprintf+0x3a4>
    31b4:	94 36       	cpi	r25, 0x64	; 100
    31b6:	11 f0       	breq	.+4      	; 0x31bc <vfprintf+0x1d8>
    31b8:	99 36       	cpi	r25, 0x69	; 105
    31ba:	69 f5       	brne	.+90     	; 0x3216 <vfprintf+0x232>
    31bc:	f7 fe       	sbrs	r15, 7
    31be:	08 c0       	rjmp	.+16     	; 0x31d0 <vfprintf+0x1ec>
    31c0:	f5 01       	movw	r30, r10
    31c2:	20 81       	ld	r18, Z
    31c4:	31 81       	ldd	r19, Z+1	; 0x01
    31c6:	42 81       	ldd	r20, Z+2	; 0x02
    31c8:	53 81       	ldd	r21, Z+3	; 0x03
    31ca:	84 e0       	ldi	r24, 0x04	; 4
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	0a c0       	rjmp	.+20     	; 0x31e4 <vfprintf+0x200>
    31d0:	f5 01       	movw	r30, r10
    31d2:	80 81       	ld	r24, Z
    31d4:	91 81       	ldd	r25, Z+1	; 0x01
    31d6:	9c 01       	movw	r18, r24
    31d8:	44 27       	eor	r20, r20
    31da:	37 fd       	sbrc	r19, 7
    31dc:	40 95       	com	r20
    31de:	54 2f       	mov	r21, r20
    31e0:	82 e0       	ldi	r24, 0x02	; 2
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	a8 0e       	add	r10, r24
    31e6:	b9 1e       	adc	r11, r25
    31e8:	9f e6       	ldi	r25, 0x6F	; 111
    31ea:	f9 22       	and	r15, r25
    31ec:	57 ff       	sbrs	r21, 7
    31ee:	09 c0       	rjmp	.+18     	; 0x3202 <vfprintf+0x21e>
    31f0:	50 95       	com	r21
    31f2:	40 95       	com	r20
    31f4:	30 95       	com	r19
    31f6:	21 95       	neg	r18
    31f8:	3f 4f       	sbci	r19, 0xFF	; 255
    31fa:	4f 4f       	sbci	r20, 0xFF	; 255
    31fc:	5f 4f       	sbci	r21, 0xFF	; 255
    31fe:	e0 e8       	ldi	r30, 0x80	; 128
    3200:	fe 2a       	or	r15, r30
    3202:	ca 01       	movw	r24, r20
    3204:	b9 01       	movw	r22, r18
    3206:	a1 01       	movw	r20, r2
    3208:	2a e0       	ldi	r18, 0x0A	; 10
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	0e 94 11 1a 	call	0x3422	; 0x3422 <__ultoa_invert>
    3210:	d8 2e       	mov	r13, r24
    3212:	d2 18       	sub	r13, r2
    3214:	40 c0       	rjmp	.+128    	; 0x3296 <vfprintf+0x2b2>
    3216:	95 37       	cpi	r25, 0x75	; 117
    3218:	29 f4       	brne	.+10     	; 0x3224 <vfprintf+0x240>
    321a:	1f 2d       	mov	r17, r15
    321c:	1f 7e       	andi	r17, 0xEF	; 239
    321e:	2a e0       	ldi	r18, 0x0A	; 10
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	1d c0       	rjmp	.+58     	; 0x325e <vfprintf+0x27a>
    3224:	1f 2d       	mov	r17, r15
    3226:	19 7f       	andi	r17, 0xF9	; 249
    3228:	9f 36       	cpi	r25, 0x6F	; 111
    322a:	61 f0       	breq	.+24     	; 0x3244 <vfprintf+0x260>
    322c:	90 37       	cpi	r25, 0x70	; 112
    322e:	20 f4       	brcc	.+8      	; 0x3238 <vfprintf+0x254>
    3230:	98 35       	cpi	r25, 0x58	; 88
    3232:	09 f0       	breq	.+2      	; 0x3236 <vfprintf+0x252>
    3234:	ac c0       	rjmp	.+344    	; 0x338e <vfprintf+0x3aa>
    3236:	0f c0       	rjmp	.+30     	; 0x3256 <vfprintf+0x272>
    3238:	90 37       	cpi	r25, 0x70	; 112
    323a:	39 f0       	breq	.+14     	; 0x324a <vfprintf+0x266>
    323c:	98 37       	cpi	r25, 0x78	; 120
    323e:	09 f0       	breq	.+2      	; 0x3242 <vfprintf+0x25e>
    3240:	a6 c0       	rjmp	.+332    	; 0x338e <vfprintf+0x3aa>
    3242:	04 c0       	rjmp	.+8      	; 0x324c <vfprintf+0x268>
    3244:	28 e0       	ldi	r18, 0x08	; 8
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	0a c0       	rjmp	.+20     	; 0x325e <vfprintf+0x27a>
    324a:	10 61       	ori	r17, 0x10	; 16
    324c:	14 fd       	sbrc	r17, 4
    324e:	14 60       	ori	r17, 0x04	; 4
    3250:	20 e1       	ldi	r18, 0x10	; 16
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	04 c0       	rjmp	.+8      	; 0x325e <vfprintf+0x27a>
    3256:	14 fd       	sbrc	r17, 4
    3258:	16 60       	ori	r17, 0x06	; 6
    325a:	20 e1       	ldi	r18, 0x10	; 16
    325c:	32 e0       	ldi	r19, 0x02	; 2
    325e:	17 ff       	sbrs	r17, 7
    3260:	08 c0       	rjmp	.+16     	; 0x3272 <vfprintf+0x28e>
    3262:	f5 01       	movw	r30, r10
    3264:	60 81       	ld	r22, Z
    3266:	71 81       	ldd	r23, Z+1	; 0x01
    3268:	82 81       	ldd	r24, Z+2	; 0x02
    326a:	93 81       	ldd	r25, Z+3	; 0x03
    326c:	44 e0       	ldi	r20, 0x04	; 4
    326e:	50 e0       	ldi	r21, 0x00	; 0
    3270:	08 c0       	rjmp	.+16     	; 0x3282 <vfprintf+0x29e>
    3272:	f5 01       	movw	r30, r10
    3274:	80 81       	ld	r24, Z
    3276:	91 81       	ldd	r25, Z+1	; 0x01
    3278:	bc 01       	movw	r22, r24
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	42 e0       	ldi	r20, 0x02	; 2
    3280:	50 e0       	ldi	r21, 0x00	; 0
    3282:	a4 0e       	add	r10, r20
    3284:	b5 1e       	adc	r11, r21
    3286:	a1 01       	movw	r20, r2
    3288:	0e 94 11 1a 	call	0x3422	; 0x3422 <__ultoa_invert>
    328c:	d8 2e       	mov	r13, r24
    328e:	d2 18       	sub	r13, r2
    3290:	8f e7       	ldi	r24, 0x7F	; 127
    3292:	f8 2e       	mov	r15, r24
    3294:	f1 22       	and	r15, r17
    3296:	f6 fe       	sbrs	r15, 6
    3298:	0b c0       	rjmp	.+22     	; 0x32b0 <vfprintf+0x2cc>
    329a:	5e ef       	ldi	r21, 0xFE	; 254
    329c:	f5 22       	and	r15, r21
    329e:	d9 14       	cp	r13, r9
    32a0:	38 f4       	brcc	.+14     	; 0x32b0 <vfprintf+0x2cc>
    32a2:	f4 fe       	sbrs	r15, 4
    32a4:	07 c0       	rjmp	.+14     	; 0x32b4 <vfprintf+0x2d0>
    32a6:	f2 fc       	sbrc	r15, 2
    32a8:	05 c0       	rjmp	.+10     	; 0x32b4 <vfprintf+0x2d0>
    32aa:	8f ee       	ldi	r24, 0xEF	; 239
    32ac:	f8 22       	and	r15, r24
    32ae:	02 c0       	rjmp	.+4      	; 0x32b4 <vfprintf+0x2d0>
    32b0:	1d 2d       	mov	r17, r13
    32b2:	01 c0       	rjmp	.+2      	; 0x32b6 <vfprintf+0x2d2>
    32b4:	19 2d       	mov	r17, r9
    32b6:	f4 fe       	sbrs	r15, 4
    32b8:	0d c0       	rjmp	.+26     	; 0x32d4 <vfprintf+0x2f0>
    32ba:	fe 01       	movw	r30, r28
    32bc:	ed 0d       	add	r30, r13
    32be:	f1 1d       	adc	r31, r1
    32c0:	80 81       	ld	r24, Z
    32c2:	80 33       	cpi	r24, 0x30	; 48
    32c4:	19 f4       	brne	.+6      	; 0x32cc <vfprintf+0x2e8>
    32c6:	99 ee       	ldi	r25, 0xE9	; 233
    32c8:	f9 22       	and	r15, r25
    32ca:	08 c0       	rjmp	.+16     	; 0x32dc <vfprintf+0x2f8>
    32cc:	1f 5f       	subi	r17, 0xFF	; 255
    32ce:	f2 fe       	sbrs	r15, 2
    32d0:	05 c0       	rjmp	.+10     	; 0x32dc <vfprintf+0x2f8>
    32d2:	03 c0       	rjmp	.+6      	; 0x32da <vfprintf+0x2f6>
    32d4:	8f 2d       	mov	r24, r15
    32d6:	86 78       	andi	r24, 0x86	; 134
    32d8:	09 f0       	breq	.+2      	; 0x32dc <vfprintf+0x2f8>
    32da:	1f 5f       	subi	r17, 0xFF	; 255
    32dc:	0f 2d       	mov	r16, r15
    32de:	f3 fc       	sbrc	r15, 3
    32e0:	14 c0       	rjmp	.+40     	; 0x330a <vfprintf+0x326>
    32e2:	f0 fe       	sbrs	r15, 0
    32e4:	0f c0       	rjmp	.+30     	; 0x3304 <vfprintf+0x320>
    32e6:	1e 15       	cp	r17, r14
    32e8:	10 f0       	brcs	.+4      	; 0x32ee <vfprintf+0x30a>
    32ea:	9d 2c       	mov	r9, r13
    32ec:	0b c0       	rjmp	.+22     	; 0x3304 <vfprintf+0x320>
    32ee:	9d 2c       	mov	r9, r13
    32f0:	9e 0c       	add	r9, r14
    32f2:	91 1a       	sub	r9, r17
    32f4:	1e 2d       	mov	r17, r14
    32f6:	06 c0       	rjmp	.+12     	; 0x3304 <vfprintf+0x320>
    32f8:	80 e2       	ldi	r24, 0x20	; 32
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	b3 01       	movw	r22, r6
    32fe:	0e 94 e5 19 	call	0x33ca	; 0x33ca <fputc>
    3302:	1f 5f       	subi	r17, 0xFF	; 255
    3304:	1e 15       	cp	r17, r14
    3306:	c0 f3       	brcs	.-16     	; 0x32f8 <vfprintf+0x314>
    3308:	04 c0       	rjmp	.+8      	; 0x3312 <vfprintf+0x32e>
    330a:	1e 15       	cp	r17, r14
    330c:	10 f4       	brcc	.+4      	; 0x3312 <vfprintf+0x32e>
    330e:	e1 1a       	sub	r14, r17
    3310:	01 c0       	rjmp	.+2      	; 0x3314 <vfprintf+0x330>
    3312:	ee 24       	eor	r14, r14
    3314:	04 ff       	sbrs	r16, 4
    3316:	0f c0       	rjmp	.+30     	; 0x3336 <vfprintf+0x352>
    3318:	80 e3       	ldi	r24, 0x30	; 48
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	b3 01       	movw	r22, r6
    331e:	0e 94 e5 19 	call	0x33ca	; 0x33ca <fputc>
    3322:	02 ff       	sbrs	r16, 2
    3324:	1d c0       	rjmp	.+58     	; 0x3360 <vfprintf+0x37c>
    3326:	01 fd       	sbrc	r16, 1
    3328:	03 c0       	rjmp	.+6      	; 0x3330 <vfprintf+0x34c>
    332a:	88 e7       	ldi	r24, 0x78	; 120
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	0e c0       	rjmp	.+28     	; 0x334c <vfprintf+0x368>
    3330:	88 e5       	ldi	r24, 0x58	; 88
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	0b c0       	rjmp	.+22     	; 0x334c <vfprintf+0x368>
    3336:	80 2f       	mov	r24, r16
    3338:	86 78       	andi	r24, 0x86	; 134
    333a:	91 f0       	breq	.+36     	; 0x3360 <vfprintf+0x37c>
    333c:	01 ff       	sbrs	r16, 1
    333e:	02 c0       	rjmp	.+4      	; 0x3344 <vfprintf+0x360>
    3340:	8b e2       	ldi	r24, 0x2B	; 43
    3342:	01 c0       	rjmp	.+2      	; 0x3346 <vfprintf+0x362>
    3344:	80 e2       	ldi	r24, 0x20	; 32
    3346:	f7 fc       	sbrc	r15, 7
    3348:	8d e2       	ldi	r24, 0x2D	; 45
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	b3 01       	movw	r22, r6
    334e:	0e 94 e5 19 	call	0x33ca	; 0x33ca <fputc>
    3352:	06 c0       	rjmp	.+12     	; 0x3360 <vfprintf+0x37c>
    3354:	80 e3       	ldi	r24, 0x30	; 48
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	b3 01       	movw	r22, r6
    335a:	0e 94 e5 19 	call	0x33ca	; 0x33ca <fputc>
    335e:	9a 94       	dec	r9
    3360:	d9 14       	cp	r13, r9
    3362:	c0 f3       	brcs	.-16     	; 0x3354 <vfprintf+0x370>
    3364:	da 94       	dec	r13
    3366:	f1 01       	movw	r30, r2
    3368:	ed 0d       	add	r30, r13
    336a:	f1 1d       	adc	r31, r1
    336c:	80 81       	ld	r24, Z
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	b3 01       	movw	r22, r6
    3372:	0e 94 e5 19 	call	0x33ca	; 0x33ca <fputc>
    3376:	dd 20       	and	r13, r13
    3378:	a9 f7       	brne	.-22     	; 0x3364 <vfprintf+0x380>
    337a:	06 c0       	rjmp	.+12     	; 0x3388 <vfprintf+0x3a4>
    337c:	80 e2       	ldi	r24, 0x20	; 32
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	b3 01       	movw	r22, r6
    3382:	0e 94 e5 19 	call	0x33ca	; 0x33ca <fputc>
    3386:	ea 94       	dec	r14
    3388:	ee 20       	and	r14, r14
    338a:	c1 f7       	brne	.-16     	; 0x337c <vfprintf+0x398>
    338c:	43 ce       	rjmp	.-890    	; 0x3014 <vfprintf+0x30>
    338e:	f3 01       	movw	r30, r6
    3390:	66 81       	ldd	r22, Z+6	; 0x06
    3392:	77 81       	ldd	r23, Z+7	; 0x07
    3394:	cb 01       	movw	r24, r22
    3396:	2b 96       	adiw	r28, 0x0b	; 11
    3398:	e2 e1       	ldi	r30, 0x12	; 18
    339a:	0c 94 98 17 	jmp	0x2f30	; 0x2f30 <__epilogue_restores__>

0000339e <strnlen_P>:
    339e:	fc 01       	movw	r30, r24
    33a0:	05 90       	lpm	r0, Z+
    33a2:	61 50       	subi	r22, 0x01	; 1
    33a4:	70 40       	sbci	r23, 0x00	; 0
    33a6:	01 10       	cpse	r0, r1
    33a8:	d8 f7       	brcc	.-10     	; 0x33a0 <strnlen_P+0x2>
    33aa:	80 95       	com	r24
    33ac:	90 95       	com	r25
    33ae:	8e 0f       	add	r24, r30
    33b0:	9f 1f       	adc	r25, r31
    33b2:	08 95       	ret

000033b4 <strnlen>:
    33b4:	fc 01       	movw	r30, r24
    33b6:	61 50       	subi	r22, 0x01	; 1
    33b8:	70 40       	sbci	r23, 0x00	; 0
    33ba:	01 90       	ld	r0, Z+
    33bc:	01 10       	cpse	r0, r1
    33be:	d8 f7       	brcc	.-10     	; 0x33b6 <strnlen+0x2>
    33c0:	80 95       	com	r24
    33c2:	90 95       	com	r25
    33c4:	8e 0f       	add	r24, r30
    33c6:	9f 1f       	adc	r25, r31
    33c8:	08 95       	ret

000033ca <fputc>:
    33ca:	0f 93       	push	r16
    33cc:	1f 93       	push	r17
    33ce:	cf 93       	push	r28
    33d0:	df 93       	push	r29
    33d2:	8c 01       	movw	r16, r24
    33d4:	eb 01       	movw	r28, r22
    33d6:	8b 81       	ldd	r24, Y+3	; 0x03
    33d8:	81 ff       	sbrs	r24, 1
    33da:	1b c0       	rjmp	.+54     	; 0x3412 <fputc+0x48>
    33dc:	82 ff       	sbrs	r24, 2
    33de:	0d c0       	rjmp	.+26     	; 0x33fa <fputc+0x30>
    33e0:	2e 81       	ldd	r18, Y+6	; 0x06
    33e2:	3f 81       	ldd	r19, Y+7	; 0x07
    33e4:	8c 81       	ldd	r24, Y+4	; 0x04
    33e6:	9d 81       	ldd	r25, Y+5	; 0x05
    33e8:	28 17       	cp	r18, r24
    33ea:	39 07       	cpc	r19, r25
    33ec:	64 f4       	brge	.+24     	; 0x3406 <fputc+0x3c>
    33ee:	e8 81       	ld	r30, Y
    33f0:	f9 81       	ldd	r31, Y+1	; 0x01
    33f2:	01 93       	st	Z+, r16
    33f4:	f9 83       	std	Y+1, r31	; 0x01
    33f6:	e8 83       	st	Y, r30
    33f8:	06 c0       	rjmp	.+12     	; 0x3406 <fputc+0x3c>
    33fa:	e8 85       	ldd	r30, Y+8	; 0x08
    33fc:	f9 85       	ldd	r31, Y+9	; 0x09
    33fe:	80 2f       	mov	r24, r16
    3400:	09 95       	icall
    3402:	89 2b       	or	r24, r25
    3404:	31 f4       	brne	.+12     	; 0x3412 <fputc+0x48>
    3406:	8e 81       	ldd	r24, Y+6	; 0x06
    3408:	9f 81       	ldd	r25, Y+7	; 0x07
    340a:	01 96       	adiw	r24, 0x01	; 1
    340c:	9f 83       	std	Y+7, r25	; 0x07
    340e:	8e 83       	std	Y+6, r24	; 0x06
    3410:	02 c0       	rjmp	.+4      	; 0x3416 <fputc+0x4c>
    3412:	0f ef       	ldi	r16, 0xFF	; 255
    3414:	1f ef       	ldi	r17, 0xFF	; 255
    3416:	c8 01       	movw	r24, r16
    3418:	df 91       	pop	r29
    341a:	cf 91       	pop	r28
    341c:	1f 91       	pop	r17
    341e:	0f 91       	pop	r16
    3420:	08 95       	ret

00003422 <__ultoa_invert>:
    3422:	fa 01       	movw	r30, r20
    3424:	aa 27       	eor	r26, r26
    3426:	28 30       	cpi	r18, 0x08	; 8
    3428:	51 f1       	breq	.+84     	; 0x347e <__ultoa_invert+0x5c>
    342a:	20 31       	cpi	r18, 0x10	; 16
    342c:	81 f1       	breq	.+96     	; 0x348e <__ultoa_invert+0x6c>
    342e:	e8 94       	clt
    3430:	6f 93       	push	r22
    3432:	6e 7f       	andi	r22, 0xFE	; 254
    3434:	6e 5f       	subi	r22, 0xFE	; 254
    3436:	7f 4f       	sbci	r23, 0xFF	; 255
    3438:	8f 4f       	sbci	r24, 0xFF	; 255
    343a:	9f 4f       	sbci	r25, 0xFF	; 255
    343c:	af 4f       	sbci	r26, 0xFF	; 255
    343e:	b1 e0       	ldi	r27, 0x01	; 1
    3440:	3e d0       	rcall	.+124    	; 0x34be <__ultoa_invert+0x9c>
    3442:	b4 e0       	ldi	r27, 0x04	; 4
    3444:	3c d0       	rcall	.+120    	; 0x34be <__ultoa_invert+0x9c>
    3446:	67 0f       	add	r22, r23
    3448:	78 1f       	adc	r23, r24
    344a:	89 1f       	adc	r24, r25
    344c:	9a 1f       	adc	r25, r26
    344e:	a1 1d       	adc	r26, r1
    3450:	68 0f       	add	r22, r24
    3452:	79 1f       	adc	r23, r25
    3454:	8a 1f       	adc	r24, r26
    3456:	91 1d       	adc	r25, r1
    3458:	a1 1d       	adc	r26, r1
    345a:	6a 0f       	add	r22, r26
    345c:	71 1d       	adc	r23, r1
    345e:	81 1d       	adc	r24, r1
    3460:	91 1d       	adc	r25, r1
    3462:	a1 1d       	adc	r26, r1
    3464:	20 d0       	rcall	.+64     	; 0x34a6 <__ultoa_invert+0x84>
    3466:	09 f4       	brne	.+2      	; 0x346a <__ultoa_invert+0x48>
    3468:	68 94       	set
    346a:	3f 91       	pop	r19
    346c:	2a e0       	ldi	r18, 0x0A	; 10
    346e:	26 9f       	mul	r18, r22
    3470:	11 24       	eor	r1, r1
    3472:	30 19       	sub	r19, r0
    3474:	30 5d       	subi	r19, 0xD0	; 208
    3476:	31 93       	st	Z+, r19
    3478:	de f6       	brtc	.-74     	; 0x3430 <__ultoa_invert+0xe>
    347a:	cf 01       	movw	r24, r30
    347c:	08 95       	ret
    347e:	46 2f       	mov	r20, r22
    3480:	47 70       	andi	r20, 0x07	; 7
    3482:	40 5d       	subi	r20, 0xD0	; 208
    3484:	41 93       	st	Z+, r20
    3486:	b3 e0       	ldi	r27, 0x03	; 3
    3488:	0f d0       	rcall	.+30     	; 0x34a8 <__ultoa_invert+0x86>
    348a:	c9 f7       	brne	.-14     	; 0x347e <__ultoa_invert+0x5c>
    348c:	f6 cf       	rjmp	.-20     	; 0x347a <__ultoa_invert+0x58>
    348e:	46 2f       	mov	r20, r22
    3490:	4f 70       	andi	r20, 0x0F	; 15
    3492:	40 5d       	subi	r20, 0xD0	; 208
    3494:	4a 33       	cpi	r20, 0x3A	; 58
    3496:	18 f0       	brcs	.+6      	; 0x349e <__ultoa_invert+0x7c>
    3498:	49 5d       	subi	r20, 0xD9	; 217
    349a:	31 fd       	sbrc	r19, 1
    349c:	40 52       	subi	r20, 0x20	; 32
    349e:	41 93       	st	Z+, r20
    34a0:	02 d0       	rcall	.+4      	; 0x34a6 <__ultoa_invert+0x84>
    34a2:	a9 f7       	brne	.-22     	; 0x348e <__ultoa_invert+0x6c>
    34a4:	ea cf       	rjmp	.-44     	; 0x347a <__ultoa_invert+0x58>
    34a6:	b4 e0       	ldi	r27, 0x04	; 4
    34a8:	a6 95       	lsr	r26
    34aa:	97 95       	ror	r25
    34ac:	87 95       	ror	r24
    34ae:	77 95       	ror	r23
    34b0:	67 95       	ror	r22
    34b2:	ba 95       	dec	r27
    34b4:	c9 f7       	brne	.-14     	; 0x34a8 <__ultoa_invert+0x86>
    34b6:	00 97       	sbiw	r24, 0x00	; 0
    34b8:	61 05       	cpc	r22, r1
    34ba:	71 05       	cpc	r23, r1
    34bc:	08 95       	ret
    34be:	9b 01       	movw	r18, r22
    34c0:	ac 01       	movw	r20, r24
    34c2:	0a 2e       	mov	r0, r26
    34c4:	06 94       	lsr	r0
    34c6:	57 95       	ror	r21
    34c8:	47 95       	ror	r20
    34ca:	37 95       	ror	r19
    34cc:	27 95       	ror	r18
    34ce:	ba 95       	dec	r27
    34d0:	c9 f7       	brne	.-14     	; 0x34c4 <__ultoa_invert+0xa2>
    34d2:	62 0f       	add	r22, r18
    34d4:	73 1f       	adc	r23, r19
    34d6:	84 1f       	adc	r24, r20
    34d8:	95 1f       	adc	r25, r21
    34da:	a0 1d       	adc	r26, r0
    34dc:	08 95       	ret

000034de <_exit>:
    34de:	f8 94       	cli

000034e0 <__stop_program>:
    34e0:	ff cf       	rjmp	.-2      	; 0x34e0 <__stop_program>
